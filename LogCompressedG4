Lista de nós do grafo
nó : v1
nó : v2
nó : v3
nó : v4
nó : v5
Grafo com 1652nós
{'56': [<pydotplus.graphviz.Node object at 0x7fcc8ca87a10>, <pydotplus.graphviz.Node object at 0x7fcc8c5ddd10>, <pydotplus.graphviz.Node object at 0x7fcc8eee7050>], '28': [<pydotplus.graphviz.Node object at 0x7fcc8ee08410>, <pydotplus.graphviz.Node object at 0x7fcc8e8d0910>], '22': [<pydotplus.graphviz.Node object at 0x7fcc8f9a5a10>, <pydotplus.graphviz.Node object at 0x7fcc8f993850>, <pydotplus.graphviz.Node object at 0x7fcc8e867350>], '29': [<pydotplus.graphviz.Node object at 0x7fcc8fc44f10>, <pydotplus.graphviz.Node object at 0x7fcc8f81f290>, <pydotplus.graphviz.Node object at 0x7fcc8f08be50>, <pydotplus.graphviz.Node object at 0x7fcc8ee3ced0>, <pydotplus.graphviz.Node object at 0x7fcc8eb4de90>, <pydotplus.graphviz.Node object at 0x7fcc8e8afc90>], '60': [<pydotplus.graphviz.Node object at 0x7fcc8f70bb50>, <pydotplus.graphviz.Node object at 0x7fcc8f352d50>], '61': [<pydotplus.graphviz.Node object at 0x7fcc8ce46cd0>, <pydotplus.graphviz.Node object at 0x7fcc8cbb6490>, <pydotplus.graphviz.Node object at 0x7fcc8e86c810>], '62': [<pydotplus.graphviz.Node object at 0x7fcc8ea78310>, <pydotplus.graphviz.Node object at 0x7fcc8e385f90>], '63': [<pydotplus.graphviz.Node object at 0x7fcc8c78d050>, <pydotplus.graphviz.Node object at 0x7fcc8c7338d0>, <pydotplus.graphviz.Node object at 0x7fcc8f8be250>, <pydotplus.graphviz.Node object at 0x7fcc8f7554d0>, <pydotplus.graphviz.Node object at 0x7fcc8e880ad0>, <pydotplus.graphviz.Node object at 0x7fcc8e7bf210>], '64': [<pydotplus.graphviz.Node object at 0x7fcc8fb62190>, <pydotplus.graphviz.Node object at 0x7fcc8f057390>, <pydotplus.graphviz.Node object at 0x7fcc8f06b210>], '35': [<pydotplus.graphviz.Node object at 0x7fcc8c9e6950>, <pydotplus.graphviz.Node object at 0x7fcc8c953690>, <pydotplus.graphviz.Node object at 0x7fcc8c345450>, <pydotplus.graphviz.Node object at 0x7fcc8c17ddd0>, <pydotplus.graphviz.Node object at 0x7fcc8c1abf90>, <pydotplus.graphviz.Node object at 0x7fcc8c111810>, <pydotplus.graphviz.Node object at 0x7fcc902e40d0>, <pydotplus.graphviz.Node object at 0x7fcc904da790>, <pydotplus.graphviz.Node object at 0x7fcc8f883390>, <pydotplus.graphviz.Node object at 0x7fcc8f57f4d0>, <pydotplus.graphviz.Node object at 0x7fcc8f457ad0>, <pydotplus.graphviz.Node object at 0x7fcc8f246b10>, <pydotplus.graphviz.Node object at 0x7fcc8eec3810>, <pydotplus.graphviz.Node object at 0x7fcc8ee4b890>, <pydotplus.graphviz.Node object at 0x7fcc8edcc450>, <pydotplus.graphviz.Node object at 0x7fcc8e93bed0>, <pydotplus.graphviz.Node object at 0x7fcc8e775450>], '66': [<pydotplus.graphviz.Node object at 0x7fcc8cc85b50>, <pydotplus.graphviz.Node object at 0x7fcc8c71fa50>, <pydotplus.graphviz.Node object at 0x7fcc8f3ee510>], '67': [<pydotplus.graphviz.Node object at 0x7fcc8c429550>, <pydotplus.graphviz.Node object at 0x7fcc8f3f49d0>], '69': [<pydotplus.graphviz.Node object at 0x7fcc8c909d10>, <pydotplus.graphviz.Node object at 0x7fcc8c92b550>, <pydotplus.graphviz.Node object at 0x7fcc8c932a10>, <pydotplus.graphviz.Node object at 0x7fcc8e6a51d0>, <pydotplus.graphviz.Node object at 0x7fcc8e40c8d0>], '32': [<pydotplus.graphviz.Node object at 0x7fcc8eb55390>, <pydotplus.graphviz.Node object at 0x7fcc8e844b10>, <pydotplus.graphviz.Node object at 0x7fcc8e4c7cd0>], '24': [<pydotplus.graphviz.Node object at 0x7fcc8c8ef590>, <pydotplus.graphviz.Node object at 0x7fcc8c64a310>, <pydotplus.graphviz.Node object at 0x7fcc8c2a5390>, <pydotplus.graphviz.Node object at 0x7fcc8fa4ca90>, <pydotplus.graphviz.Node object at 0x7fcc8eacfa50>, <pydotplus.graphviz.Node object at 0x7fcc8e8bca90>], '25': [<pydotplus.graphviz.Node object at 0x7fcc8d09c150>, <pydotplus.graphviz.Node object at 0x7fcc8c627690>, <pydotplus.graphviz.Node object at 0x7fcc8c2dae50>], '26': [<pydotplus.graphviz.Node object at 0x7fcc8cbde5d0>, <pydotplus.graphviz.Node object at 0x7fcc8cbf2450>], '27': [<pydotplus.graphviz.Node object at 0x7fcc8f7a6310>, <pydotplus.graphviz.Node object at 0x7fcc8f741650>, <pydotplus.graphviz.Node object at 0x7fcc8eae8d90>], '20': [<pydotplus.graphviz.Node object at 0x7fcc8ceab990>, <pydotplus.graphviz.Node object at 0x7fcc8cb9b150>, <pydotplus.graphviz.Node object at 0x7fcc8c586a10>], '21': [<pydotplus.graphviz.Node object at 0x7fcc8c6d7110>, <pydotplus.graphviz.Node object at 0x7fcc8f3e8050>], '48': [<pydotplus.graphviz.Node object at 0x7fcc8d224710>, <pydotplus.graphviz.Node object at 0x7fcc8f472e10>], '49': [<pydotplus.graphviz.Node object at 0x7fcc8c6852d0>, <pydotplus.graphviz.Node object at 0x7fcc8fb98b10>, <pydotplus.graphviz.Node object at 0x7fcc8f6645d0>], '46': [<pydotplus.graphviz.Node object at 0x7fcc8cc9fe90>, <pydotplus.graphviz.Node object at 0x7fcc8c360790>, <pydotplus.graphviz.Node object at 0x7fcc8f968590>, <pydotplus.graphviz.Node object at 0x7fcc8f46c950>, <pydotplus.graphviz.Node object at 0x7fcc8f0f1b10>, <pydotplus.graphviz.Node object at 0x7fcc8ee65bd0>], '23': [<pydotplus.graphviz.Node object at 0x7fcc8fe1f950>, <pydotplus.graphviz.Node object at 0x7fcc8ef72e10>], '44': [<pydotplus.graphviz.Node object at 0x7fcc8d1150d0>, <pydotplus.graphviz.Node object at 0x7fcc8f60c2d0>, <pydotplus.graphviz.Node object at 0x7fcc8e9a9090>], '45': [<pydotplus.graphviz.Node object at 0x7fcc8f678450>, <pydotplus.graphviz.Node object at 0x7fcc8f2b1c90>], '42': [<pydotplus.graphviz.Node object at 0x7fcc902818d0>, <pydotplus.graphviz.Node object at 0x7fcc8f929050>, <pydotplus.graphviz.Node object at 0x7fcc8eb92350>], '43': [<pydotplus.graphviz.Node object at 0x7fcc8c1f7910>, <pydotplus.graphviz.Node object at 0x7fcc8c190c50>], '40': [<pydotplus.graphviz.Node object at 0x7fcc8fcb17d0>, <pydotplus.graphviz.Node object at 0x7fcc8f898210>], '41': [<pydotplus.graphviz.Node object at 0x7fcc8c636050>, <pydotplus.graphviz.Node object at 0x7fcc8fff8090>, <pydotplus.graphviz.Node object at 0x7fcc8f87ae90>, <pydotplus.graphviz.Node object at 0x7fcc8f29de10>, <pydotplus.graphviz.Node object at 0x7fcc8ef284d0>, <pydotplus.graphviz.Node object at 0x7fcc8e640510>], '1': [<pydotplus.graphviz.Node object at 0x7fcc8cddc710>, <pydotplus.graphviz.Node object at 0x7fcc8caaa250>, <pydotplus.graphviz.Node object at 0x7fcc8ca3f0d0>, <pydotplus.graphviz.Node object at 0x7fcc8c528dd0>, <pydotplus.graphviz.Node object at 0x7fcc8c4bcc50>, <pydotplus.graphviz.Node object at 0x7fcc8c254550>, <pydotplus.graphviz.Node object at 0x7fcc8fb0f650>, <pydotplus.graphviz.Node object at 0x7fcc8f9c8c90>, <pydotplus.graphviz.Node object at 0x7fcc8f69a0d0>, <pydotplus.graphviz.Node object at 0x7fcc8f5f7fd0>, <pydotplus.graphviz.Node object at 0x7fcc8f4a9910>, <pydotplus.graphviz.Node object at 0x7fcc8f315d90>, <pydotplus.graphviz.Node object at 0x7fcc8f035710>, <pydotplus.graphviz.Node object at 0x7fcc8ef99f50>, <pydotplus.graphviz.Node object at 0x7fcc8eb98810>, <pydotplus.graphviz.Node object at 0x7fcc8e928c10>, <pydotplus.graphviz.Node object at 0x7fcc8e682990>], '3': [<pydotplus.graphviz.Node object at 0x7fcc8c8e0bd0>, <pydotplus.graphviz.Node object at 0x7fcc8f6adf10>, <pydotplus.graphviz.Node object at 0x7fcc8ecc56d0>], '2': [<pydotplus.graphviz.Node object at 0x7fcc8c2693d0>, <pydotplus.graphviz.Node object at 0x7fcc9004ef90>, <pydotplus.graphviz.Node object at 0x7fcc8f640d90>, <pydotplus.graphviz.Node object at 0x7fcc8f494a90>, <pydotplus.graphviz.Node object at 0x7fcc8f212050>, <pydotplus.graphviz.Node object at 0x7fcc8e624d50>], '5': [<pydotplus.graphviz.Node object at 0x7fcc8d1bcf90>, <pydotplus.graphviz.Node object at 0x7fcc8d10dbd0>, <pydotplus.graphviz.Node object at 0x7fcc8eb25d50>], '4': [<pydotplus.graphviz.Node object at 0x7fcc8ecda550>, <pydotplus.graphviz.Node object at 0x7fcc8e462bd0>], '7': [<pydotplus.graphviz.Node object at 0x7fcc8cd68c50>, <pydotplus.graphviz.Node object at 0x7fcc8c7c0b10>, <pydotplus.graphviz.Node object at 0x7fcc8c7dae50>, <pydotplus.graphviz.Node object at 0x7fcc8c4d0ad0>, <pydotplus.graphviz.Node object at 0x7fcc8c1fd250>, <pydotplus.graphviz.Node object at 0x7fcc8f5f1b10>], '6': [<pydotplus.graphviz.Node object at 0x7fcc8eaff090>, <pydotplus.graphviz.Node object at 0x7fcc8eb10ed0>], '9': [<pydotplus.graphviz.Node object at 0x7fcc8ca15f50>, <pydotplus.graphviz.Node object at 0x7fcc8c7efcd0>], '8': [<pydotplus.graphviz.Node object at 0x7fcc8ccd6990>, <pydotplus.graphviz.Node object at 0x7fcc8c4d7f90>, <pydotplus.graphviz.Node object at 0x7fcc8ebac690>], '33': [<pydotplus.graphviz.Node object at 0x7fcc8eeaa090>, <pydotplus.graphviz.Node object at 0x7fcc8ed32850>], '39': [<pydotplus.graphviz.Node object at 0x7fcc8cef6310>, <pydotplus.graphviz.Node object at 0x7fcc8f8ad090>, <pydotplus.graphviz.Node object at 0x7fcc8f261e50>], '65': [<pydotplus.graphviz.Node object at 0x7fcc8ea91a90>, <pydotplus.graphviz.Node object at 0x7fcc8e8eac50>], '47': [<pydotplus.graphviz.Node object at 0x7fcc8d220310>, <pydotplus.graphviz.Node object at 0x7fcc8ee443d0>, <pydotplus.graphviz.Node object at 0x7fcc8e7605d0>], '38': [<pydotplus.graphviz.Node object at 0x7fcc8c9d2ad0>, <pydotplus.graphviz.Node object at 0x7fcc8c97b7d0>], '59': [<pydotplus.graphviz.Node object at 0x7fcc8cf53f10>, <pydotplus.graphviz.Node object at 0x7fcc8f02f250>, <pydotplus.graphviz.Node object at 0x7fcc8e420750>], '58': [<pydotplus.graphviz.Node object at 0x7fcc903ab390>, <pydotplus.graphviz.Node object at 0x7fcc8f7209d0>, <pydotplus.graphviz.Node object at 0x7fcc8edf4150>, <pydotplus.graphviz.Node object at 0x7fcc8ea41c50>, <pydotplus.graphviz.Node object at 0x7fcc8ea5cf90>, <pydotplus.graphviz.Node object at 0x7fcc8e688e50>], '11': [<pydotplus.graphviz.Node object at 0x7fcc8c225f10>, <pydotplus.graphviz.Node object at 0x7fcc8f9fee10>], '10': [<pydotplus.graphviz.Node object at 0x7fcc8c817e10>, <pydotplus.graphviz.Node object at 0x7fcc8c82cc90>, <pydotplus.graphviz.Node object at 0x7fcc8c2120d0>], '13': [<pydotplus.graphviz.Node object at 0x7fcc8d17f690>, <pydotplus.graphviz.Node object at 0x7fcc8e6eeb10>, <pydotplus.graphviz.Node object at 0x7fcc8e691350>], '12': [<pydotplus.graphviz.Node object at 0x7fcc8d1bc650>, <pydotplus.graphviz.Node object at 0x7fcc8d19b9d0>, <pydotplus.graphviz.Node object at 0x7fcc8d152090>, <pydotplus.graphviz.Node object at 0x7fcc8cb06e50>, <pydotplus.graphviz.Node object at 0x7fcc8cb231d0>, <pydotplus.graphviz.Node object at 0x7fcc8e986850>], '15': [<pydotplus.graphviz.Node object at 0x7fcc8d1d6990>, <pydotplus.graphviz.Node object at 0x7fcc8d1eb810>, <pydotplus.graphviz.Node object at 0x7fcc8e9f29d0>], '14': [<pydotplus.graphviz.Node object at 0x7fcc8d13d210>, <pydotplus.graphviz.Node object at 0x7fcc8e710790>], '16': [<pydotplus.graphviz.Node object at 0x7fcc8f32ac10>, <pydotplus.graphviz.Node object at 0x7fcc8e98cd10>], '19': [<pydotplus.graphviz.Node object at 0x7fcc8ce63050>, <pydotplus.graphviz.Node object at 0x7fcc8cdfd390>, <pydotplus.graphviz.Node object at 0x7fcc8cd8a8d0>, <pydotplus.graphviz.Node object at 0x7fcc8ca80550>, <pydotplus.graphviz.Node object at 0x7fcc8d214f10>, <pydotplus.graphviz.Node object at 0x7fcc8edb8190>], '54': [<pydotplus.graphviz.Node object at 0x7fcc8cfbe510>, <pydotplus.graphviz.Node object at 0x7fcc8e8e5790>, <pydotplus.graphviz.Node object at 0x7fcc8e504c90>], '57': [<pydotplus.graphviz.Node object at 0x7fcc8c2b2d10>, <pydotplus.graphviz.Node object at 0x7fcc8f649290>], '30': [<pydotplus.graphviz.Node object at 0x7fcc8cebec50>, <pydotplus.graphviz.Node object at 0x7fcc8ecef3d0>, <pydotplus.graphviz.Node object at 0x7fcc8ecb2410>], '37': [<pydotplus.graphviz.Node object at 0x7fcc8c402850>, <pydotplus.graphviz.Node object at 0x7fcc8c3f4a50>, <pydotplus.graphviz.Node object at 0x7fcc8c16ab10>], '36': [<pydotplus.graphviz.Node object at 0x7fcc8c3888d0>, <pydotplus.graphviz.Node object at 0x7fcc8c140e10>, <pydotplus.graphviz.Node object at 0x7fcc8c0fd990>, <pydotplus.graphviz.Node object at 0x7fcc902f5950>, <pydotplus.graphviz.Node object at 0x7fcc8f52f250>, <pydotplus.graphviz.Node object at 0x7fcc8f4ca590>], '53': [<pydotplus.graphviz.Node object at 0x7fcc8d02a690>, <pydotplus.graphviz.Node object at 0x7fcc8ce8a190>, <pydotplus.graphviz.Node object at 0x7fcc8c376610>, <pydotplus.graphviz.Node object at 0x7fcc8c27c690>, <pydotplus.graphviz.Node object at 0x7fcc8e4d5690>, <pydotplus.graphviz.Node object at 0x7fcc8e48bd10>], '52': [<pydotplus.graphviz.Node object at 0x7fcc8cc27f10>, <pydotplus.graphviz.Node object at 0x7fcc8c84d910>, <pydotplus.graphviz.Node object at 0x7fcc8c5c8e90>, <pydotplus.graphviz.Node object at 0x7fcc8c0e91d0>, <pydotplus.graphviz.Node object at 0x7fcc8f9401d0>, <pydotplus.graphviz.Node object at 0x7fcc8f9b3c10>, <pydotplus.graphviz.Node object at 0x7fcc8f76a350>, <pydotplus.graphviz.Node object at 0x7fcc8f734850>, <pydotplus.graphviz.Node object at 0x7fcc8f24bfd0>, <pydotplus.graphviz.Node object at 0x7fcc8f026d50>, <pydotplus.graphviz.Node object at 0x7fcc8efc30d0>, <pydotplus.graphviz.Node object at 0x7fcc8efdd410>, <pydotplus.graphviz.Node object at 0x7fcc8ea1ffd0>, <pydotplus.graphviz.Node object at 0x7fcc8e894950>, <pydotplus.graphviz.Node object at 0x7fcc8e81c9d0>, <pydotplus.graphviz.Node object at 0x7fcc8e55bf90>, <pydotplus.graphviz.Node object at 0x7fcc8e3baa90>], '55': [<pydotplus.graphviz.Node object at 0x7fcc8d001990>, <pydotplus.graphviz.Node object at 0x7fcc8e56fe10>], '18': [<pydotplus.graphviz.Node object at 0x7fcc8cfee6d0>, <pydotplus.graphviz.Node object at 0x7fcc8cdf6a50>, <pydotplus.graphviz.Node object at 0x7fcc8cbaef90>, <pydotplus.graphviz.Node object at 0x7fcc8c88a8d0>, <pydotplus.graphviz.Node object at 0x7fcc8c66ab10>, <pydotplus.graphviz.Node object at 0x7fcc9079bf90>, <pydotplus.graphviz.Node object at 0x7fcc8d20f3d0>, <pydotplus.graphviz.Node object at 0x7fcc8f168a90>, <pydotplus.graphviz.Node object at 0x7fcc8ed534d0>, <pydotplus.graphviz.Node object at 0x7fcc8ec8a710>, <pydotplus.graphviz.Node object at 0x7fcc8eb6a210>, <pydotplus.graphviz.Node object at 0x7fcc8eae38d0>, <pydotplus.graphviz.Node object at 0x7fcc8ea69950>, <pydotplus.graphviz.Node object at 0x7fcc8ea2d990>, <pydotplus.graphviz.Node object at 0x7fcc8e807b50>, <pydotplus.graphviz.Node object at 0x7fcc8e585110>, <pydotplus.graphviz.Node object at 0x7fcc8e51efd0>], '31': [<pydotplus.graphviz.Node object at 0x7fcc8f430990>, <pydotplus.graphviz.Node object at 0x7fcc8ea13650>], '50': [<pydotplus.graphviz.Node object at 0x7fcc8f613790>, <pydotplus.graphviz.Node object at 0x7fcc8f0dcc90>]}
{'56': <pydotplus.graphviz.Node object at 0x7fcc8c3b25d0>, '42': <pydotplus.graphviz.Node object at 0x7fcc8ef2f990>, '45': <pydotplus.graphviz.Node object at 0x7fcc8e63a050>, '36': <pydotplus.graphviz.Node object at 0x7fcc8f921b50>, '60': <pydotplus.graphviz.Node object at 0x7fcc8f021890>, '61': <pydotplus.graphviz.Node object at 0x7fcc8c854dd0>, '62': <pydotplus.graphviz.Node object at 0x7fcc8ceb1e50>, '63': <pydotplus.graphviz.Node object at 0x7fcc8f25a990>, '64': <pydotplus.graphviz.Node object at 0x7fcc8f37ae90>, '65': <pydotplus.graphviz.Node object at 0x7fcc8f8ba610>, '66': <pydotplus.graphviz.Node object at 0x7fcc8e7c46d0>, '67': <pydotplus.graphviz.Node object at 0x7fcc8c719590>, '69': <pydotplus.graphviz.Node object at 0x7fcc8c1e1a90>, '23': <pydotplus.graphviz.Node object at 0x7fcc8e5f7750>, '24': <pydotplus.graphviz.Node object at 0x7fcc8ecf5890>, '25': <pydotplus.graphviz.Node object at 0x7fcc8e57cc10>, '26': <pydotplus.graphviz.Node object at 0x7fcc8d0a3610>, '27': <pydotplus.graphviz.Node object at 0x7fcc8c2ab850>, '20': <pydotplus.graphviz.Node object at 0x7fcc8ed3f650>, '21': <pydotplus.graphviz.Node object at 0x7fcc8c580550>, '22': <pydotplus.graphviz.Node object at 0x7fcc8ffbaf10>, '49': <pydotplus.graphviz.Node object at 0x7fcc8c34c910>, '46': <pydotplus.graphviz.Node object at 0x7fcc8c959b50>, '47': <pydotplus.graphviz.Node object at 0x7fcc8f628610>, '44': <pydotplus.graphviz.Node object at 0x7fcc8c62eb50>, '48': <pydotplus.graphviz.Node object at 0x7fcc8ee50d50>, '28': <pydotplus.graphviz.Node object at 0x7fcc8d207b10>, '29': <pydotplus.graphviz.Node object at 0x7fcc8f1635d0>, '40': <pydotplus.graphviz.Node object at 0x7fcc8f586990>, '41': <pydotplus.graphviz.Node object at 0x7fcc904c3e10>, '1': <pydotplus.graphviz.Node object at 0x7fcc8ca7b090>, '35': <pydotplus.graphviz.Node object at 0x7fcc8e4d01d0>, '3': <pydotplus.graphviz.Node object at 0x7fcc8fb0f490>, '2': <pydotplus.graphviz.Node object at 0x7fcc8e922750>, '5': <pydotplus.graphviz.Node object at 0x7fcc8e62c250>, '4': <pydotplus.graphviz.Node object at 0x7fcc8c8e90d0>, '7': <pydotplus.graphviz.Node object at 0x7fcc8caa2d50>, '6': <pydotplus.graphviz.Node object at 0x7fcc8d1c0110>, '9': <pydotplus.graphviz.Node object at 0x7fcc8ccdce50>, '8': <pydotplus.graphviz.Node object at 0x7fcc8f5eb650>, '18': <pydotplus.graphviz.Node object at 0x7fcc8f4d1a50>, '33': <pydotplus.graphviz.Node object at 0x7fcc8e518b10>, '43': <pydotplus.graphviz.Node object at 0x7fcc8eb8ae50>, '13': <pydotplus.graphviz.Node object at 0x7fcc8ef93a90>, '38': <pydotplus.graphviz.Node object at 0x7fcc8c407d10>, '59': <pydotplus.graphviz.Node object at 0x7fcc8e994210>, '58': <pydotplus.graphviz.Node object at 0x7fcc8f04ee90>, '11': <pydotplus.graphviz.Node object at 0x7fcc8c7c6fd0>, '10': <pydotplus.graphviz.Node object at 0x7fcc8cd70150>, '39': <pydotplus.graphviz.Node object at 0x7fcc8f536710>, '12': <pydotplus.graphviz.Node object at 0x7fcc8cde2bd0>, '15': <pydotplus.graphviz.Node object at 0x7fcc8cb1acd0>, '14': <pydotplus.graphviz.Node object at 0x7fcc8d194510>, '16': <pydotplus.graphviz.Node object at 0x7fcc8d1d14d0>, '19': <pydotplus.graphviz.Node object at 0x7fcc8cf8eed0>, '54': <pydotplus.graphviz.Node object at 0x7fcc8c29ce90>, '31': <pydotplus.graphviz.Node object at 0x7fcc8f084990>, '30': <pydotplus.graphviz.Node object at 0x7fcc8cc6b3d0>, '37': <pydotplus.graphviz.Node object at 0x7fcc8c1a5ad0>, '50': <pydotplus.graphviz.Node object at 0x7fcc8fb96390>, '53': <pydotplus.graphviz.Node object at 0x7fcc8cf5a410>, '52': <pydotplus.graphviz.Node object at 0x7fcc8c911210>, '55': <pydotplus.graphviz.Node object at 0x7fcc8c0ee690>, '32': <pydotplus.graphviz.Node object at 0x7fcc8f816d90>, '57': <pydotplus.graphviz.Node object at 0x7fcc8efd6f10>}
 TERMINOU A GERACAO. VAI INICIAR A COMPRESSAO 107 
nr1585
 LISTANDO v_oc[n][formula_f] 
seqnode=1586
num_oc_formulas=1652
COLLAPSING THE REPEATED FORMULAS
Gerando graph_from_dot_data ANTES-COMPRESSAO 
gravando dot file
GRAVOU
nivel 1
['ORX1', '(ORX1 imp q)']
nivel 2
['X1v2 imp q', '(X1v2 imp q) imp ((ORX1 imp q))']
nivel 3
['q', 'X1v5 imp q', '(X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q)))']
nivel 4
['q', '(X1v3 imp q) imp ((X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q))))', '(ORX2 imp q)', 'X1v3 imp q', 'ORX2']
nivel 5
['(X2v5 imp q) imp ((ORX2 imp q))', '(X2v5 imp q)', '(ORX2 imp q)', 'q', '(X1v1 imp q) imp ((X1v3 imp q) imp ((X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q)))))', 'ORX2', 'X1v1 imp q']
nivel 6
['(X2v5 imp q) imp ((ORX2 imp q))', '(X1v4 imp q) imp ((X1v1 imp q) imp ((X1v3 imp q) imp ((X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q))))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v2', '(ORX2 imp q)', 'q', 'X1v4 imp q', 'ORX2', 'X2v3 imp q', '(X2v5 imp q)', '(X1v2 imp (X2v5 imp q))']
nivel 7
['(X2v5 imp q) imp ((ORX2 imp q))', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v5', '(ORX2 imp q)', 'X2v4 imp q', 'q', '(X1v5 imp (X2v5 imp q))', 'ORX2', '(X2v5 imp q)', '(X2v3 imp q)']
REPEATED_FORMULAS =====> 
['q']
==========
nivel da formula que repete= 7
formula que repete= q
vai collapsar q 2 vezes, no nivel 7
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8f83b750>, <pydotplus.graphviz.Node object at 0x7fcc8f1ac2d0>]
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8f1ac2d0>]
n = q name= 639
vai identificar n=q e v=q
vai identificar n=1551 e v=639
e_in_A.has_key(v.get_name())
False
name = 639
<pydotplus.graphviz.Edge object at 0x7fcc91cba290>
638
<pydotplus.graphviz.Node object at 0x7fcc8174cc50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91cba290>])
set([('638', '639')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fc7e910>, <pydotplus.graphviz.Edge object at 0x7fcc8fc84d90>]
Set([('1544', '1551'), ('1550', '1551')])
q
INtersecao ====================
Set([])
name = 639
<pydotplus.graphviz.Edge object at 0x7fcc91cc2710>
632
<pydotplus.graphviz.Node object at 0x7fcc84a66050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91cc2710>])
set([('632', '639')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fc7e910>, <pydotplus.graphviz.Edge object at 0x7fcc8fc84d90>, <pydotplus.graphviz.Edge object at 0x7fcc83420890>]
Set([('1544', '1551'), ('1550', '1551'), ('638', '1551')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8f83b750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fc9a1d0>])
set([('1551', '1552')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91cd5b10>]
Set([('639', '640')])
(X2v3 imp q) 24
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 7
gravando dot file
nivel 8
['X1v3', 'q', 'ORX3', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v5', '(ORX3 imp q)', '(ORX2 imp q)', '(X2v5 imp q) imp ((ORX2 imp q))', '(X1v5 imp (X2v3 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', '(X2v4 imp q)', 'ORX2', '(X2v5 imp q)', 'X2v1 imp q', '(X2v3 imp q)', '(X1v3 imp (X2v5 imp q))']
nivel 9
['X1v3', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', 'X1v1', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v5', '(X3v2 imp q)', '(ORX3 imp q)', '(X2v2 imp q)', 'X2v4 imp q', '(X3v2 imp q) imp ((ORX3 imp q))', '(X2v1 imp q)', '(X2v5 imp q) imp ((ORX2 imp q))', '(X1v1 imp (X2v5 imp q))', '(X1v5 imp (X2v4 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', 'ORX3', 'X2v3 imp q', '(X2v5 imp q)', 'q', '(X1v3 imp (X2v3 imp q))']
nivel 10
['(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', 'X3v1 imp q', '(X2v2 imp q)', 'X1v2', 'X1v5', 'X1v4', '(ORX3 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X2v3 imp q', '(X1v5 imp (X2v1 imp q))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', '(X3v2 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', 'ORX3', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', '(X1v2 imp (X2v2 imp q))', 'X2v4 imp q', '(X1v4 imp (X2v5 imp q))', 'q', '(X1v2 imp (X3v2 imp q))', 'X2v1 imp q']
REPEATED_FORMULAS =====> 
['X1v2', 'q']
==========
nivel da formula que repete= 10
formula que repete= X1v2
vai collapsar X1v2 2 vezes, no nivel 10
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8cf2a150>, <pydotplus.graphviz.Node object at 0x7fcc8cf12590>]
labels = [X1v2]18
labels = [X1v2]18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8cf12590>]
n = [X1v2]18 name= 569
vai identificar n=[X1v2]18 e v=[X1v2]18
vai identificar n=513 e v=569
e_in_A.has_key(v.get_name())
False
<pydotplus.graphviz.Node object at 0x7fcc8cf2a150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9262c450>])
set([('513', '515')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92117f90>, <pydotplus.graphviz.Edge object at 0x7fcc920fad50>]
Set([('569', '571'), ('570', '571')])
(X3v2 imp q)
INtersecao ====================
Set([])
v ====> [X1v2]18 =18
n ======> [X1v2]18 =18
SAO IGUAIS
APAGANDO ARESTA [X1v2]18==> (X1v2 imp q) 18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 10
formula que repete= q
vai collapsar q 2 vezes, no nivel 10
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c3f8a50>, <pydotplus.graphviz.Node object at 0x7fcc8d0d3110>]
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d0d3110>]
n = q name= 1151
vai identificar n=q e v=q
vai identificar n=251 e v=1151
e_in_A.has_key(v.get_name())
False
name = 1151
<pydotplus.graphviz.Edge object at 0x7fcc90b61d90>
1150
<pydotplus.graphviz.Node object at 0x7fcc8a3c21d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b61d90>])
set([('1150', '1151')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b33050>, <pydotplus.graphviz.Edge object at 0x7fcc92ab94d0>]
Set([('244', '251'), ('250', '251')])
q
INtersecao ====================
Set([])
name = 1151
<pydotplus.graphviz.Edge object at 0x7fcc90b21650>
1144
<pydotplus.graphviz.Node object at 0x7fcc853e3a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b21650>])
set([('1144', '1151')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b33050>, <pydotplus.graphviz.Edge object at 0x7fcc92ab94d0>, <pydotplus.graphviz.Edge object at 0x7fcc85a292d0>]
Set([('244', '251'), ('250', '251'), ('1150', '251')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8c3f8a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92acb8d0>])
set([('251', '252')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90b34a50>]
Set([('1151', '1152')])
(X2v4 imp q) 46
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 10
gravando dot file
nivel 11
['(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', '(X1v5 imp (X2v2 imp q))', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X1v5', 'X2v2 imp q', '(ORX3 imp q)', '(X3v2 imp q)', '(X2v1 imp q)', 'q', 'ORX3', '(X3v2 imp q) imp ((ORX3 imp q))', 'X3v4 imp q', 'X1v2', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', '(X2v4 imp q)', '(X1v2 imp (X3v2 imp q))', 'X3v1 imp q']
REPEATED_FORMULAS =====> 
['(ORX3 imp q)', 'q', 'ORX3']
==========
nivel da formula que repete= 11
formula que repete= (ORX3 imp q)
vai collapsar (ORX3 imp q) 2 vezes, no nivel 11
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8f1dc850>, <pydotplus.graphviz.Node object at 0x7fcc8f122890>]
labels = (ORX3 imp q)
labels = (ORX3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8f122890>]
n = (ORX3 imp q) name= 1144
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=244 e v=1144
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc853d5310>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8038b4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b3bfd0>])
set([('1145', '1144')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>, <pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>]
Set([('245', '244'), ('184', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8038b4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b3bfd0>])
set([('1145', '1144')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>, <pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>]
Set([('245', '244'), ('184', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) 49 e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8a256190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b44490>])
set([('1132', '1144')])
(X3v2 imp q) 49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>, <pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>, <pydotplus.graphviz.Edge object at 0x7fcc886dc650>]
Set([('245', '244'), ('184', '244'), ('1145', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8a256190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b44490>])
set([('1132', '1144')])
(X3v2 imp q) 49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>, <pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>, <pydotplus.graphviz.Edge object at 0x7fcc886dc650>]
Set([('245', '244'), ('184', '244'), ('1145', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) 49 para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8f1dc850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ab94d0>])
set([('244', '251')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b33050>, <pydotplus.graphviz.Edge object at 0x7fcc92ab94d0>, <pydotplus.graphviz.Edge object at 0x7fcc85a292d0>, <pydotplus.graphviz.Edge object at 0x7fcc8a3c80d0>]
Set([('1144', '251'), ('244', '251'), ('250', '251'), ('1150', '251')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ab94d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 11
formula que repete= q
vai collapsar q 4 vezes, no nivel 11
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8f1ee050>, <pydotplus.graphviz.Node object at 0x7fcc8f1cedd0>, <pydotplus.graphviz.Node object at 0x7fcc8f1c93d0>, <pydotplus.graphviz.Node object at 0x7fcc8ec110d0>]
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8f1cedd0>, <pydotplus.graphviz.Node object at 0x7fcc8f1c93d0>, <pydotplus.graphviz.Node object at 0x7fcc8ec110d0>]
n = q name= 375
vai identificar n=q e v=q
vai identificar n=1535 e v=375
e_in_A.has_key(v.get_name())
False
name = 375
<pydotplus.graphviz.Edge object at 0x7fcc9263d490>
374
<pydotplus.graphviz.Node object at 0x7fcc82f41450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9263d490>])
set([('374', '375')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>]
Set([('1528', '1535'), ('1534', '1535')])
q
INtersecao ====================
Set([])
name = 375
<pydotplus.graphviz.Edge object at 0x7fcc926a2b90>
368
<pydotplus.graphviz.Node object at 0x7fcc815c5e10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc926a2b90>])
set([('368', '375')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>, <pydotplus.graphviz.Edge object at 0x7fcc81f99f50>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8f1ee050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fd4d190>])
set([('1535', '1536')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc926efd10>]
Set([('375', '376')])
(X2v4 imp q) 12
INtersecao ====================
Set([])
n = q name= 899
vai identificar n=q e v=q
vai identificar n=1535 e v=899
e_in_A.has_key(v.get_name())
False
name = 899
<pydotplus.graphviz.Edge object at 0x7fcc915fa510>
898
<pydotplus.graphviz.Node object at 0x7fcc83103110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc915fa510>])
set([('898', '899')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>, <pydotplus.graphviz.Edge object at 0x7fcc81f99f50>, <pydotplus.graphviz.Edge object at 0x7fcc82f39910>]
Set([('1528', '1535'), ('1534', '1535'), ('368', '1535'), ('374', '1535')])
q
INtersecao ====================
Set([])
name = 899
<pydotplus.graphviz.Edge object at 0x7fcc917c8710>
892
<pydotplus.graphviz.Node object at 0x7fcc837d3710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc917c8710>])
set([('892', '899')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>, <pydotplus.graphviz.Edge object at 0x7fcc81f99f50>, <pydotplus.graphviz.Edge object at 0x7fcc82f39910>, <pydotplus.graphviz.Edge object at 0x7fcc83103f50>]
Set([('1528', '1535'), ('1534', '1535'), ('368', '1535'), ('374', '1535'), ('898', '1535')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8f1ee050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc89dfdb90>, <pydotplus.graphviz.Edge object at 0x7fcc8fd4d190>])
set([('1535', '376'), ('1535', '1536')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc916e2510>]
Set([('899', '900')])
(X2v1 imp q) 36
INtersecao ====================
Set([])
n = q name= 567
vai identificar n=q e v=q
vai identificar n=1535 e v=567
e_in_A.has_key(v.get_name())
False
name = 567
<pydotplus.graphviz.Edge object at 0x7fcc92085f10>
566
<pydotplus.graphviz.Node object at 0x7fcc88cedd90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92085f10>])
set([('566', '567')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>, <pydotplus.graphviz.Edge object at 0x7fcc81f99f50>, <pydotplus.graphviz.Edge object at 0x7fcc82f39910>, <pydotplus.graphviz.Edge object at 0x7fcc83103f50>, <pydotplus.graphviz.Edge object at 0x7fcc867c01d0>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('368', '1535'), ('898', '1535')])
q
INtersecao ====================
Set([])
name = 567
<pydotplus.graphviz.Edge object at 0x7fcc91ff9d10>
560
<pydotplus.graphviz.Node object at 0x7fcc826fbe90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91ff9d10>])
set([('560', '567')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>, <pydotplus.graphviz.Edge object at 0x7fcc81f99f50>, <pydotplus.graphviz.Edge object at 0x7fcc82f39910>, <pydotplus.graphviz.Edge object at 0x7fcc83103f50>, <pydotplus.graphviz.Edge object at 0x7fcc867c01d0>, <pydotplus.graphviz.Edge object at 0x7fcc88ced090>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('566', '1535'), ('368', '1535'), ('898', '1535')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8f1ee050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc89dfdb90>, <pydotplus.graphviz.Edge object at 0x7fcc8fd4d190>, <pydotplus.graphviz.Edge object at 0x7fcc8826bcd0>])
set([('1535', '376'), ('1535', '1536'), ('1535', '900')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc920326d0>]
Set([('567', '568')])
(X3v1 imp q) 25
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 11
formula que repete= ORX3
vai collapsar ORX3 2 vezes, no nivel 11
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8f1c9ad0>, <pydotplus.graphviz.Node object at 0x7fcc8f1f0b10>]
labels = ORX3
labels = ORX3
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX3 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8f1f0b10>]
n = ORX3 name= 1150
vai identificar n=ORX3 e v=ORX3
vai identificar n=250 e v=1150
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc892324d0>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 11
gravando dot file
nivel 12
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v4 imp (X2v4 imp q))', 'X1v2', 'X1v1', 'X1v4', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', 'ORX3', 'ORX4', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', 'X2v2 imp q', '(X3v4 imp q)', '(X1v1 imp (X2v1 imp q))', 'q', 'X3v2 imp q', '(X1v2 imp (X3v2 imp q))', 'X2v1 imp q', '(X3v3 imp q)']
REPEATED_FORMULAS =====> 
['(ORX3 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', 'q', 'X3v2 imp q']
==========
nivel da formula que repete= 12
formula que repete= (ORX3 imp q)
vai collapsar (ORX3 imp q) 3 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d459a10>, <pydotplus.graphviz.Node object at 0x7fcc8ebcef50>, <pydotplus.graphviz.Node object at 0x7fcc8d4722d0>]
labels = (ORX3 imp q)
labels = (ORX3 imp q)
labels = (ORX3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8ebcef50>, <pydotplus.graphviz.Node object at 0x7fcc8d4722d0>]
n = (ORX3 imp q) name= 368
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=1528 e v=368
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8559fd90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc84f6ef50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9269fc90>])
set([('369', '368')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>]
Set([('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc84f6ef50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9269fc90>])
set([('369', '368')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>]
Set([('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) 13 e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8007cc50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc926a7150>])
set([('308', '368')])
(X3v2 imp q) 13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88902d90>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8007cc50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc926a7150>])
set([('308', '368')])
(X3v2 imp q) 13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88902d90>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) 13 para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8d459a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>])
set([('1528', '1535')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>, <pydotplus.graphviz.Edge object at 0x7fcc81f99f50>, <pydotplus.graphviz.Edge object at 0x7fcc82f39910>, <pydotplus.graphviz.Edge object at 0x7fcc83103f50>, <pydotplus.graphviz.Edge object at 0x7fcc867c01d0>, <pydotplus.graphviz.Edge object at 0x7fcc88ced090>, <pydotplus.graphviz.Edge object at 0x7fcc87dcaad0>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('566', '1535'), ('368', '1535'), ('898', '1535'), ('560', '1535')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>])
delete in_edge_Ancestor
n = (ORX3 imp q) name= 892
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=1528 e v=892
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc870c22d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc80f94710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9123ca90>])
set([('893', '892')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88902d90>, <pydotplus.graphviz.Edge object at 0x7fcc88903310>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc80f94710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9123ca90>])
set([('893', '892')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88902d90>, <pydotplus.graphviz.Edge object at 0x7fcc88903310>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) 37 e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81311910>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91299c90>])
set([('832', '892')])
(X3v2 imp q) 37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88902d90>, <pydotplus.graphviz.Edge object at 0x7fcc88903310>, <pydotplus.graphviz.Edge object at 0x7fcc87d77d10>]
Set([('369', '1528'), ('1516', '1528'), ('1529', '1528'), ('893', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81311910>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91299c90>])
set([('832', '892')])
(X3v2 imp q) 37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88902d90>, <pydotplus.graphviz.Edge object at 0x7fcc88903310>, <pydotplus.graphviz.Edge object at 0x7fcc87d77d10>]
Set([('369', '1528'), ('1516', '1528'), ('1529', '1528'), ('893', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) 37 para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8d459a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>])
set([('1528', '1535')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdb18d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>, <pydotplus.graphviz.Edge object at 0x7fcc81f99f50>, <pydotplus.graphviz.Edge object at 0x7fcc83103f50>, <pydotplus.graphviz.Edge object at 0x7fcc867c01d0>, <pydotplus.graphviz.Edge object at 0x7fcc88ced090>, <pydotplus.graphviz.Edge object at 0x7fcc87dcaad0>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('566', '1535'), ('898', '1535'), ('560', '1535')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fd39d50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= (X3v2 imp q) imp ((ORX3 imp q))
vai collapsar (X3v2 imp q) imp ((ORX3 imp q)) 2 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8ebbbf50>, <pydotplus.graphviz.Node object at 0x7fcc8ebd8cd0>]
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) imp ((ORX3 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8ebd8cd0>]
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 1145
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=245 e v=1145
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8486b310>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc89273350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b5de10>])
set([('1146', '1145')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b3c090>, <pydotplus.graphviz.Edge object at 0x7fcc92b3a450>]
Set([('246', '245'), ('131', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc89273350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b5de10>])
set([('1146', '1145')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b3c090>, <pydotplus.graphviz.Edge object at 0x7fcc92b3a450>]
Set([('246', '245'), ('131', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) 47 e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83a15dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b5d510>])
set([('1080', '1145')])
(X3v1 imp q) 47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b3c090>, <pydotplus.graphviz.Edge object at 0x7fcc92b3a450>, <pydotplus.graphviz.Edge object at 0x7fcc80d52850>]
Set([('246', '245'), ('131', '245'), ('1146', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83a15dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b5d510>])
set([('1080', '1145')])
(X3v1 imp q) 47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b3c090>, <pydotplus.graphviz.Edge object at 0x7fcc92b3a450>, <pydotplus.graphviz.Edge object at 0x7fcc80d52850>]
Set([('246', '245'), ('131', '245'), ('1146', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) 47 para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8ebbbf50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>])
set([('245', '244')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>, <pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>, <pydotplus.graphviz.Edge object at 0x7fcc886dc650>, <pydotplus.graphviz.Edge object at 0x7fcc886bd110>]
Set([('245', '244'), ('184', '244'), ('1132', '244'), ('1145', '244')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= ORX3
vai collapsar ORX3 3 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d45c190>, <pydotplus.graphviz.Node object at 0x7fcc8ebd85d0>, <pydotplus.graphviz.Node object at 0x7fcc8ebef2d0>]
labels = ORX3
labels = ORX3
labels = ORX3
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX3 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8ebd85d0>, <pydotplus.graphviz.Node object at 0x7fcc8ebef2d0>]
n = ORX3 name= 374
vai identificar n=ORX3 e v=ORX3
vai identificar n=1534 e v=374
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc80b9ec50>]
n = ORX3 name= 898
vai identificar n=ORX3 e v=ORX3
vai identificar n=1534 e v=898
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc84c94c90>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= q
vai collapsar q 3 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8ebe61d0>, <pydotplus.graphviz.Node object at 0x7fcc8d425f90>, <pydotplus.graphviz.Node object at 0x7fcc8d3dc650>]
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d425f90>, <pydotplus.graphviz.Node object at 0x7fcc8d3dc650>]
n = q name= 691
vai identificar n=q e v=q
vai identificar n=1023 e v=691
e_in_A.has_key(v.get_name())
False
name = 691
<pydotplus.graphviz.Edge object at 0x7fcc91b8e6d0>
690
<pydotplus.graphviz.Node object at 0x7fcc8394b990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91b8e6d0>])
set([('690', '691')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90e5a790>, <pydotplus.graphviz.Edge object at 0x7fcc90e61c10>]
Set([('1022', '1023'), ('1016', '1023')])
q
INtersecao ====================
Set([])
name = 691
<pydotplus.graphviz.Edge object at 0x7fcc91b94b50>
684
<pydotplus.graphviz.Node object at 0x7fcc8433ba10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91b94b50>])
set([('684', '691')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90e5a790>, <pydotplus.graphviz.Edge object at 0x7fcc90e61c10>, <pydotplus.graphviz.Edge object at 0x7fcc834efed0>]
Set([('1022', '1023'), ('1016', '1023'), ('690', '1023')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8ebe61d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90e76050>])
set([('1023', '1024')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91ba8f50>]
Set([('691', '692')])
(X3v1 imp q) 30
INtersecao ====================
Set([])
n = q name= 627
vai identificar n=q e v=q
vai identificar n=1023 e v=627
e_in_A.has_key(v.get_name())
False
name = 627
<pydotplus.graphviz.Edge object at 0x7fcc91d82750>
626
<pydotplus.graphviz.Node object at 0x7fcc870c49d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91d82750>])
set([('626', '627')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90e5a790>, <pydotplus.graphviz.Edge object at 0x7fcc90e61c10>, <pydotplus.graphviz.Edge object at 0x7fcc834efed0>, <pydotplus.graphviz.Edge object at 0x7fcc80e030d0>]
Set([('1022', '1023'), ('1016', '1023'), ('684', '1023'), ('690', '1023')])
q
INtersecao ====================
Set([])
name = 627
<pydotplus.graphviz.Edge object at 0x7fcc91d88bd0>
620
<pydotplus.graphviz.Node object at 0x7fcc8906b510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91d88bd0>])
set([('620', '627')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90e5a790>, <pydotplus.graphviz.Edge object at 0x7fcc90e61c10>, <pydotplus.graphviz.Edge object at 0x7fcc834efed0>, <pydotplus.graphviz.Edge object at 0x7fcc80e030d0>, <pydotplus.graphviz.Edge object at 0x7fcc8536d6d0>]
Set([('626', '1023'), ('1022', '1023'), ('1016', '1023'), ('684', '1023'), ('690', '1023')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8ebe61d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc843a0550>, <pydotplus.graphviz.Edge object at 0x7fcc90e76050>])
set([('1023', '1024'), ('1023', '692')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91d9bfd0>]
Set([('627', '628')])
(X3v4 imp q) 27
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= X3v2 imp q
vai collapsar X3v2 imp q 2 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8ebd8690>, <pydotplus.graphviz.Node object at 0x7fcc8d43a250>]
labels = (X3v2 imp q) 8
labels = (X3v2 imp q) 49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) 8 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d43a250>]
n = (X3v2 imp q) 49 name= 1132
vai identificar n=(X3v2 imp q) 8 e v=(X3v2 imp q) 49
vai identificar n=184 e v=1132
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) 49 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8483ca90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =q e v = (X3v2 imp q) 49 n=(X3v2 imp q) 8 Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f972cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c60390>])
set([('1131', '1132')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d05bd0>]
Set([('183', '184')])
(X3v2 imp q) 8
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f972cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c60390>])
set([('1131', '1132')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d05bd0>]
Set([('183', '184')])
(X3v2 imp q) 8
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE q para (X3v2 imp q) 8
<pydotplus.graphviz.Node object at 0x7fcc8ebd8690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>])
set([('184', '244')])
(X3v2 imp q) 8
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7abd0>, <pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>, <pydotplus.graphviz.Edge object at 0x7fcc886bd110>]
Set([('245', '244'), ('184', '244'), ('1132', '244')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c2dc50>])
delete in_edge_Ancestor
COLLAPSO DE REGRA DE INTRODUCAO v ====> (X3v2 imp q) 49 =49
COM REGRA DE INTRODUCAO n ====> 8
collapsing_nodes: atualizando conclusions: 8--> (X3v2 imp q) 8 49
collapsing_nodes: atualizando conclusions: 49--> (X3v2 imp q) 8 49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 12
gravando dot file
nivel 13
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', 'X3v1 imp q', 'X3v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X2v4', 'X2v1', 'X2v3', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v5 imp q)', '(ORX4 imp q)', '(X2v3 imp (X3v3 imp q))', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', 'ORX4', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', '(X2v4 imp (X3v4 imp q))', '(X3v5 imp q)', 'X2v2 imp q', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', 'q', '(X2v1 imp (X3v1 imp q))', 'X3v3 imp q', 'X3v2 imp q']
REPEATED_FORMULAS =====> 
['(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX4', 'q', 'X3v2 imp q']
==========
nivel da formula que repete= 13
formula que repete= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai collapsar (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) 2 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d470ed0>, <pydotplus.graphviz.Node object at 0x7fcc8d34eb50>]
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d34eb50>]
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 1146
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=246 e v=1146
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82b7a110>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc80014b50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90af9790>])
set([('1147', '1146')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b59f50>, <pydotplus.graphviz.Edge object at 0x7fcc92b62410>]
Set([('247', '246'), ('240', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc80014b50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90af9790>])
set([('1147', '1146')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b59f50>, <pydotplus.graphviz.Edge object at 0x7fcc92b62410>]
Set([('247', '246'), ('240', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc843c6950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b01c10>])
set([('1139', '1146')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b59f50>, <pydotplus.graphviz.Edge object at 0x7fcc92b62410>, <pydotplus.graphviz.Edge object at 0x7fcc81138ed0>]
Set([('240', '246'), ('247', '246'), ('1147', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc843c6950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b01c10>])
set([('1139', '1146')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b59f50>, <pydotplus.graphviz.Edge object at 0x7fcc92b62410>, <pydotplus.graphviz.Edge object at 0x7fcc81138ed0>]
Set([('240', '246'), ('247', '246'), ('1147', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8d470ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b3c090>])
set([('246', '245')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b3c090>, <pydotplus.graphviz.Edge object at 0x7fcc92b3a450>, <pydotplus.graphviz.Edge object at 0x7fcc80d52850>, <pydotplus.graphviz.Edge object at 0x7fcc80d4f390>]
Set([('246', '245'), ('131', '245'), ('1080', '245'), ('1146', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b3c090>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 2 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d302090>, <pydotplus.graphviz.Node object at 0x7fcc8d2c9f10>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d2c9f10>]
n = (ORX4 imp q) name= 620
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=684 e v=620
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8a0734d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f5c8c90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91db9410>])
set([('621', '620')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>, <pydotplus.graphviz.Edge object at 0x7fcc91c74750>]
Set([('685', '684'), ('683', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f5c8c90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91db9410>])
set([('621', '620')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>, <pydotplus.graphviz.Edge object at 0x7fcc91c74750>]
Set([('685', '684'), ('683', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87c01750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e14c50>])
set([('619', '620')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>, <pydotplus.graphviz.Edge object at 0x7fcc91c74750>, <pydotplus.graphviz.Edge object at 0x7fcc81e65210>]
Set([('685', '684'), ('683', '684'), ('621', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87c01750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e14c50>])
set([('619', '620')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>, <pydotplus.graphviz.Edge object at 0x7fcc91c74750>, <pydotplus.graphviz.Edge object at 0x7fcc81e65210>]
Set([('685', '684'), ('683', '684'), ('621', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8d302090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc80e030d0>])
set([('684', '1023')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90e5a790>, <pydotplus.graphviz.Edge object at 0x7fcc90e61c10>, <pydotplus.graphviz.Edge object at 0x7fcc834efed0>, <pydotplus.graphviz.Edge object at 0x7fcc80e030d0>, <pydotplus.graphviz.Edge object at 0x7fcc8536d6d0>, <pydotplus.graphviz.Edge object at 0x7fcc86f67190>]
Set([('690', '1023'), ('626', '1023'), ('1022', '1023'), ('684', '1023'), ('620', '1023'), ('1016', '1023')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc80e030d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= (X3v2 imp q) imp ((ORX3 imp q))
vai collapsar (X3v2 imp q) imp ((ORX3 imp q)) 3 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d387690>, <pydotplus.graphviz.Node object at 0x7fcc8d33c0d0>, <pydotplus.graphviz.Node object at 0x7fcc8d3ca390>]
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) imp ((ORX3 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d33c0d0>, <pydotplus.graphviz.Node object at 0x7fcc8d3ca390>]
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 369
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=1529 e v=369
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc84038050>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81846210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92640ad0>])
set([('370', '369')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>]
Set([('1464', '1529'), ('1530', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81846210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92640ad0>])
set([('370', '369')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>]
Set([('1464', '1529'), ('1530', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc879c9710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92647f50>])
set([('255', '369')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>]
Set([('1464', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc879c9710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92647f50>])
set([('255', '369')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>]
Set([('1464', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8d387690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>])
set([('1529', '1528')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88902d90>, <pydotplus.graphviz.Edge object at 0x7fcc88903310>, <pydotplus.graphviz.Edge object at 0x7fcc87d77d10>, <pydotplus.graphviz.Edge object at 0x7fcc87e92d50>]
Set([('1529', '1528'), ('369', '1528'), ('893', '1528'), ('308', '1528'), ('1516', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>])
delete in_edge_Ancestor
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 893
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=1529 e v=893
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc85b63d50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81c6f6d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc912c46d0>])
set([('894', '893')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>, <pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>]
Set([('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81c6f6d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc912c46d0>])
set([('894', '893')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>, <pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>]
Set([('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83016450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc912be950>])
set([('779', '893')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>, <pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>, <pydotplus.graphviz.Edge object at 0x7fcc80c984d0>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83016450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc912be950>])
set([('779', '893')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>, <pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>, <pydotplus.graphviz.Edge object at 0x7fcc80c984d0>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8d387690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>])
set([('1529', '1528')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88903310>, <pydotplus.graphviz.Edge object at 0x7fcc87d77d10>, <pydotplus.graphviz.Edge object at 0x7fcc87e92d50>]
Set([('1516', '1528'), ('1529', '1528'), ('308', '1528'), ('893', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= ORX4
vai collapsar ORX4 2 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d360d90>, <pydotplus.graphviz.Node object at 0x7fcc8d319590>]
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d319590>]
n = ORX4 name= 626
vai identificar n=ORX4 e v=ORX4
vai identificar n=690 e v=626
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc85411cd0>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= q
vai collapsar q 4 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d3a6d10>, <pydotplus.graphviz.Node object at 0x7fcc8d3b3a90>, <pydotplus.graphviz.Node object at 0x7fcc8d3b5410>, <pydotplus.graphviz.Node object at 0x7fcc8d306ed0>]
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d3b3a90>, <pydotplus.graphviz.Node object at 0x7fcc8d3b5410>, <pydotplus.graphviz.Node object at 0x7fcc8d306ed0>]
n = q name= 127
vai identificar n=q e v=q
vai identificar n=1287 e v=127
e_in_A.has_key(v.get_name())
False
name = 127
<pydotplus.graphviz.Edge object at 0x7fcc92ebfe10>
126
<pydotplus.graphviz.Node object at 0x7fcc84930990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ebfe10>])
set([('126', '127')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>]
Set([('1286', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
name = 127
<pydotplus.graphviz.Edge object at 0x7fcc92e47c10>
120
<pydotplus.graphviz.Node object at 0x7fcc8a018e10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92e47c10>])
set([('120', '127')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8d3a6d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90664150>])
set([('1287', '1288')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92e5c050>]
Set([('127', '128')])
(X2v2 imp q) 2
INtersecao ====================
Set([])
n = q name= 183
vai identificar n=q e v=q
vai identificar n=1287 e v=183
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc85121090>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8675f6d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92cbcf50>])
set([('182', '183')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8675f6d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92cbcf50>])
set([('182', '183')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83a8f710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92cc4410>])
set([('176', '183')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287'), ('182', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83a8f710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92cc4410>])
set([('176', '183')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287'), ('182', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7fcc8d3a6d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc86c7ed10>, <pydotplus.graphviz.Edge object at 0x7fcc90664150>])
set([('1287', '128'), ('1287', '1288')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d05bd0>, <pydotplus.graphviz.Edge object at 0x7fcc82fb75d0>]
Set([('1131', '184'), ('183', '184')])
(X3v2 imp q) 8 49
INtersecao ====================
Set([])
delete in_edge_Ancestor
n = q name= 1131
vai identificar n=q e v=q
vai identificar n=1287 e v=1131
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc820f1210>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87e55e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90bd4f90>])
set([('1130', '1131')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>, <pydotplus.graphviz.Edge object at 0x7fcc85a03790>]
Set([('1286', '1287'), ('126', '1287'), ('120', '1287'), ('182', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87e55e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90bd4f90>])
set([('1130', '1131')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>, <pydotplus.graphviz.Edge object at 0x7fcc85a03790>]
Set([('1286', '1287'), ('126', '1287'), ('120', '1287'), ('182', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc864ff710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c2df10>])
set([('1124', '1131')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>, <pydotplus.graphviz.Edge object at 0x7fcc85a03790>, <pydotplus.graphviz.Edge object at 0x7fcc868e79d0>]
Set([('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('120', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc864ff710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c2df10>])
set([('1124', '1131')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>, <pydotplus.graphviz.Edge object at 0x7fcc85a03790>, <pydotplus.graphviz.Edge object at 0x7fcc868e79d0>]
Set([('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('120', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7fcc8d3a6d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc879df6d0>, <pydotplus.graphviz.Edge object at 0x7fcc86c7ed10>, <pydotplus.graphviz.Edge object at 0x7fcc90664150>])
set([('1287', '128'), ('1287', '1288'), ('1287', '184')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc82fb75d0>, <pydotplus.graphviz.Edge object at 0x7fcc879df6d0>]
Set([('1131', '184'), ('1287', '184')])
(X3v2 imp q) 8 49
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc879df6d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= X3v2 imp q
vai collapsar X3v2 imp q 3 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d3a6f90>, <pydotplus.graphviz.Node object at 0x7fcc8d3b5250>, <pydotplus.graphviz.Node object at 0x7fcc8d3ba850>]
labels = (X3v2 imp q) 66
labels = (X3v2 imp q) 13
labels = (X3v2 imp q) 37
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) 66 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d3b5250>, <pydotplus.graphviz.Node object at 0x7fcc8d3ba850>]
n = (X3v2 imp q) 13 name= 308
vai identificar n=(X3v2 imp q) 66 e v=(X3v2 imp q) 13
vai identificar n=1516 e v=308
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) 13 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89bd8910>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =q e v = (X3v2 imp q) 13 n=(X3v2 imp q) 66 Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc89f9b490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9293db10>])
set([('307', '308')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe57d90>]
Set([('1515', '1516')])
(X3v2 imp q) 66
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc89f9b490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9293db10>])
set([('307', '308')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe57d90>]
Set([('1515', '1516')])
(X3v2 imp q) 66
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE q para (X3v2 imp q) 66
<pydotplus.graphviz.Node object at 0x7fcc8d3a6f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>])
set([('1516', '1528')])
(X3v2 imp q) 66
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc88903310>, <pydotplus.graphviz.Edge object at 0x7fcc87e92d50>]
Set([('1529', '1528'), ('308', '1528'), ('1516', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>])
delete in_edge_Ancestor
COLLAPSO DE REGRA DE INTRODUCAO v ====> (X3v2 imp q) 13 =13
COM REGRA DE INTRODUCAO n ====> 66
collapsing_nodes: atualizando conclusions: 66--> (X3v2 imp q) 66 13
collapsing_nodes: atualizando conclusions: 13--> (X3v2 imp q) 66 13
n = (X3v2 imp q) 37 name= 832
vai identificar n=(X3v2 imp q) 66 13 e v=(X3v2 imp q) 37
vai identificar n=1516 e v=832
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) 37 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89f18fd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =q e v = (X3v2 imp q) 37 n=(X3v2 imp q) 66 13 Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f812d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9158ccd0>])
set([('831', '832')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe57d90>, <pydotplus.graphviz.Edge object at 0x7fcc85f95c10>]
Set([('307', '1516'), ('1515', '1516')])
(X3v2 imp q) 66 13
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f812d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9158ccd0>])
set([('831', '832')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe57d90>, <pydotplus.graphviz.Edge object at 0x7fcc85f95c10>]
Set([('307', '1516'), ('1515', '1516')])
(X3v2 imp q) 66 13
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE q para (X3v2 imp q) 66 13
<pydotplus.graphviz.Node object at 0x7fcc8d3a6f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>])
set([('1516', '1528')])
(X3v2 imp q) 66 13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe3a410>, <pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>, <pydotplus.graphviz.Edge object at 0x7fcc87e92d50>]
Set([('1529', '1528'), ('1516', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe9f310>])
delete in_edge_Ancestor
COLLAPSO DE REGRA DE INTRODUCAO v ====> (X3v2 imp q) 37 =37
COM REGRA DE INTRODUCAO n ====> 66
collapsing_nodes: atualizando conclusions: 66--> (X3v2 imp q) 66 13 37
collapsing_nodes: atualizando conclusions: 37--> (X3v2 imp q) 66 13 37
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 13
gravando dot file
nivel 14
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v1 imp (X3v1 imp q))', 'X3v1 imp q', 'X3v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v2 imp q)', 'X1v1', '(X3v4 imp q)', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X3v1 imp (X4v5 imp q))', 'X2v3', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', '(X2v3 imp (X3v5 imp q))', 'ORX4', '(X4v2 imp q)', '(X3v5 imp q)', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', 'q', 'X3v3 imp q']
REPEATED_FORMULAS =====> 
['(X4v5 imp q) imp ((ORX4 imp q))', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v5 imp q)', '(ORX4 imp q)', 'ORX3', 'ORX4', 'q']
==========
nivel da formula que repete= 14
formula que repete= (X4v5 imp q) imp ((ORX4 imp q))
vai collapsar (X4v5 imp q) imp ((ORX4 imp q)) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c5506d0>, <pydotplus.graphviz.Node object at 0x7fcc8c48e250>]
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) imp ((ORX4 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c48e250>]
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 621
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=685 e v=621
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82769390>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8658d4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e9d090>])
set([('622', '621')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91c48150>, <pydotplus.graphviz.Edge object at 0x7fcc91c48d10>]
Set([('686', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8658d4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e9d090>])
set([('622', '621')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91c48150>, <pydotplus.graphviz.Edge object at 0x7fcc91c48d10>]
Set([('686', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82469ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e94f50>])
set([('607', '621')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91c48150>, <pydotplus.graphviz.Edge object at 0x7fcc91c48d10>, <pydotplus.graphviz.Edge object at 0x7fcc85e4b510>]
Set([('686', '685'), ('622', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82469ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e94f50>])
set([('607', '621')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91c48150>, <pydotplus.graphviz.Edge object at 0x7fcc91c48d10>, <pydotplus.graphviz.Edge object at 0x7fcc85e4b510>]
Set([('686', '685'), ('622', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8c5506d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>])
set([('685', '684')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>, <pydotplus.graphviz.Edge object at 0x7fcc91c74750>, <pydotplus.graphviz.Edge object at 0x7fcc81e65210>, <pydotplus.graphviz.Edge object at 0x7fcc82c2cd90>]
Set([('685', '684'), ('683', '684'), ('619', '684'), ('621', '684')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (ORX3 imp q)
vai collapsar (ORX3 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8cabdcd0>, <pydotplus.graphviz.Node object at 0x7fcc8d2443d0>]
labels = (ORX3 imp q)
labels = (ORX3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d2443d0>]
n = (ORX3 imp q) name= 120
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=1280 e v=120
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8943b2d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87801b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ee8a90>])
set([('121', '120')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90733050>, <pydotplus.graphviz.Edge object at 0x7fcc90736fd0>]
Set([('1281', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87801b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ee8a90>])
set([('121', '120')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90733050>, <pydotplus.graphviz.Edge object at 0x7fcc90736fd0>]
Set([('1281', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7fd2be50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ef0f10>])
set([('11', '120')])
(X3v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90733050>, <pydotplus.graphviz.Edge object at 0x7fcc90736fd0>, <pydotplus.graphviz.Edge object at 0x7fcc80bbbc90>]
Set([('1281', '1280'), ('121', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7fd2be50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ef0f10>])
set([('11', '120')])
(X3v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90733050>, <pydotplus.graphviz.Edge object at 0x7fcc90736fd0>, <pydotplus.graphviz.Edge object at 0x7fcc80bbbc90>]
Set([('1281', '1280'), ('121', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8cabdcd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9064ed10>])
set([('1280', '1287')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc85f06f90>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>, <pydotplus.graphviz.Edge object at 0x7fcc85a03790>, <pydotplus.graphviz.Edge object at 0x7fcc868e79d0>, <pydotplus.graphviz.Edge object at 0x7fcc80d476d0>]
Set([('1124', '1287'), ('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('120', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc9064ed10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X3v1 imp q)
vai collapsar (X3v1 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d244090>, <pydotplus.graphviz.Node object at 0x7fcc8caeee90>]
labels = (X3v1 imp q)
labels = (X3v1 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8caeee90>]
n = (X3v1 imp q) name= 779
vai identificar n=(X3v1 imp q) e v=(X3v1 imp q)
vai identificar n=255 e v=779
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8553e9d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X2v1]36 e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83346350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc917e08d0>])
set([('777', '779')])
[X2v1]36
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc929ff050>, <pydotplus.graphviz.Edge object at 0x7fcc92bea950>]
Set([('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83346350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc917e08d0>])
set([('777', '779')])
[X2v1]36
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc929ff050>, <pydotplus.graphviz.Edge object at 0x7fcc92bea950>]
Set([('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X2v1]36 para (X3v1 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X2v1 imp (X3v1 imp q)) e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8323b350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc921932d0>])
set([('778', '779')])
(X2v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc929ff050>, <pydotplus.graphviz.Edge object at 0x7fcc92bea950>, <pydotplus.graphviz.Edge object at 0x7fcc83346790>]
Set([('777', '255'), ('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8323b350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc921932d0>])
set([('778', '779')])
(X2v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc929ff050>, <pydotplus.graphviz.Edge object at 0x7fcc92bea950>, <pydotplus.graphviz.Edge object at 0x7fcc83346790>]
Set([('777', '255'), ('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X2v1 imp (X3v1 imp q)) para (X3v1 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8d244090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>])
set([('255', '1529')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>, <pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>, <pydotplus.graphviz.Edge object at 0x7fcc80c984d0>, <pydotplus.graphviz.Edge object at 0x7fcc830166d0>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('370', '1529'), ('1530', '1529'), ('779', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai collapsar (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) 3 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d244d50>, <pydotplus.graphviz.Node object at 0x7fcc8d2807d0>, <pydotplus.graphviz.Node object at 0x7fcc8cadb050>]
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d2807d0>, <pydotplus.graphviz.Node object at 0x7fcc8cadb050>]
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 370
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=1530 e v=370
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc80f35850>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc804aad10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92662910>])
set([('371', '370')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>]
Set([('1531', '1530'), ('1523', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc804aad10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92662910>])
set([('371', '370')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>]
Set([('1531', '1530'), ('1523', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc80764fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92668d90>])
set([('363', '370')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>]
Set([('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc80764fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92668d90>])
set([('363', '370')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>]
Set([('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8d244d50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>])
set([('1530', '1529')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864afd10>, <pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>, <pydotplus.graphviz.Edge object at 0x7fcc80c984d0>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>])
delete in_edge_Ancestor
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 894
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=1530 e v=894
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc83769290>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc817d74d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924df990>])
set([('895', '894')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>, <pydotplus.graphviz.Edge object at 0x7fcc7fe4bb10>]
Set([('363', '1530'), ('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc817d74d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924df990>])
set([('895', '894')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>, <pydotplus.graphviz.Edge object at 0x7fcc7fe4bb10>]
Set([('363', '1530'), ('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) 39 e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8447ee10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9225cad0>])
set([('888', '894')])
(X3v4 imp q) 39
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>, <pydotplus.graphviz.Edge object at 0x7fcc7fe4bb10>, <pydotplus.graphviz.Edge object at 0x7fcc81c46510>]
Set([('1531', '1530'), ('895', '1530'), ('363', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8447ee10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9225cad0>])
set([('888', '894')])
(X3v4 imp q) 39
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>, <pydotplus.graphviz.Edge object at 0x7fcc7fe4bb10>, <pydotplus.graphviz.Edge object at 0x7fcc81c46510>]
Set([('1531', '1530'), ('895', '1530'), ('363', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) 39 para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8d244d50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>])
set([('1530', '1529')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>, <pydotplus.graphviz.Edge object at 0x7fcc8fe6da10>, <pydotplus.graphviz.Edge object at 0x7fcc864a2bd0>, <pydotplus.graphviz.Edge object at 0x7fcc80c984d0>]
Set([('894', '1529'), ('1464', '1529'), ('1530', '1529'), ('255', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe6d110>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai collapsar (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d30ab50>, <pydotplus.graphviz.Node object at 0x7fcc8cadb110>]
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8cadb110>]
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 1147
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=247 e v=1147
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc87101b50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86b25290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b77810>])
set([('1148', '1147')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>, <pydotplus.graphviz.Edge object at 0x7fcc92afbd50>]
Set([('248', '247'), ('187', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86b25290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b77810>])
set([('1148', '1147')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>, <pydotplus.graphviz.Edge object at 0x7fcc92afbd50>]
Set([('248', '247'), ('187', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83bb8110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b4e6d0>])
set([('1135', '1147')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>, <pydotplus.graphviz.Edge object at 0x7fcc92afbd50>, <pydotplus.graphviz.Edge object at 0x7fcc8700bf10>]
Set([('248', '247'), ('187', '247'), ('1148', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83bb8110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b4e6d0>])
set([('1135', '1147')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>, <pydotplus.graphviz.Edge object at 0x7fcc92afbd50>, <pydotplus.graphviz.Edge object at 0x7fcc8700bf10>]
Set([('248', '247'), ('187', '247'), ('1148', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7fcc8d30ab50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b59f50>])
set([('247', '246')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b59f50>, <pydotplus.graphviz.Edge object at 0x7fcc92b62410>, <pydotplus.graphviz.Edge object at 0x7fcc81138ed0>, <pydotplus.graphviz.Edge object at 0x7fcc83478490>]
Set([('247', '246'), ('240', '246'), ('1139', '246'), ('1147', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b59f50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c564550>, <pydotplus.graphviz.Node object at 0x7fcc8c4a20d0>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c4a20d0>]
n = (X4v5 imp q) name= 619
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=683 e v=619
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc83754a90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]27 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc829f5190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e09a50>])
set([('617', '619')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9205e510>, <pydotplus.graphviz.Edge object at 0x7fcc921f5b50>]
Set([('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc829f5190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e09a50>])
set([('617', '619')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9205e510>, <pydotplus.graphviz.Edge object at 0x7fcc921f5b50>]
Set([('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]27 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82d6bc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e1e9d0>])
set([('618', '619')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9205e510>, <pydotplus.graphviz.Edge object at 0x7fcc921f5b50>, <pydotplus.graphviz.Edge object at 0x7fcc80a8d750>]
Set([('617', '683'), ('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82d6bc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e1e9d0>])
set([('618', '619')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9205e510>, <pydotplus.graphviz.Edge object at 0x7fcc921f5b50>, <pydotplus.graphviz.Edge object at 0x7fcc80a8d750>]
Set([('617', '683'), ('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c564550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91c74750>])
set([('683', '684')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91d04c10>, <pydotplus.graphviz.Edge object at 0x7fcc91c74750>, <pydotplus.graphviz.Edge object at 0x7fcc82c2cd90>]
Set([('685', '684'), ('683', '684'), ('619', '684')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc91c74750>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d272990>, <pydotplus.graphviz.Node object at 0x7fcc8cad3710>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8cad3710>]
n = (ORX4 imp q) name= 1124
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=176 e v=1124
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89d70cd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86690410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c3b290>])
set([('1125', '1124')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>, <pydotplus.graphviz.Edge object at 0x7fcc92dca390>]
Set([('177', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86690410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c3b290>])
set([('1125', '1124')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>, <pydotplus.graphviz.Edge object at 0x7fcc92dca390>]
Set([('177', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82b25c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c40710>])
set([('1123', '1124')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>, <pydotplus.graphviz.Edge object at 0x7fcc92dca390>, <pydotplus.graphviz.Edge object at 0x7fcc81ecf490>]
Set([('177', '176'), ('1125', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82b25c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c40710>])
set([('1123', '1124')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>, <pydotplus.graphviz.Edge object at 0x7fcc92dca390>, <pydotplus.graphviz.Edge object at 0x7fcc81ecf490>]
Set([('177', '176'), ('1125', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8d272990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc85a03790>])
set([('176', '1287')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90647890>, <pydotplus.graphviz.Edge object at 0x7fcc9064ed10>, <pydotplus.graphviz.Edge object at 0x7fcc85faf9d0>, <pydotplus.graphviz.Edge object at 0x7fcc8630fd10>, <pydotplus.graphviz.Edge object at 0x7fcc85a03790>, <pydotplus.graphviz.Edge object at 0x7fcc868e79d0>, <pydotplus.graphviz.Edge object at 0x7fcc80d476d0>]
Set([('1124', '1287'), ('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc85a03790>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= ORX3
vai collapsar ORX3 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d244d10>, <pydotplus.graphviz.Node object at 0x7fcc8d260110>]
labels = ORX3
labels = ORX3
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX3 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d260110>]
n = ORX3 name= 126
vai identificar n=ORX3 e v=ORX3
vai identificar n=1286 e v=126
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82b8e810>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= ORX4
vai collapsar ORX4 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d259310>, <pydotplus.graphviz.Node object at 0x7fcc8cadba50>]
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8cadba50>]
n = ORX4 name= 1130
vai identificar n=ORX4 e v=ORX4
vai identificar n=182 e v=1130
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc83aec690>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= q
vai collapsar q 7 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8d260990>, <pydotplus.graphviz.Node object at 0x7fcc8d2d2410>, <pydotplus.graphviz.Node object at 0x7fcc8d2f6050>, <pydotplus.graphviz.Node object at 0x7fcc8caee150>, <pydotplus.graphviz.Node object at 0x7fcc8cad6dd0>, <pydotplus.graphviz.Node object at 0x7fcc8d055610>, <pydotplus.graphviz.Node object at 0x7fcc8c53c850>]
labels = q
labels = q
labels = q
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8d2d2410>, <pydotplus.graphviz.Node object at 0x7fcc8d2f6050>, <pydotplus.graphviz.Node object at 0x7fcc8caee150>, <pydotplus.graphviz.Node object at 0x7fcc8cad6dd0>, <pydotplus.graphviz.Node object at 0x7fcc8d055610>, <pydotplus.graphviz.Node object at 0x7fcc8c53c850>]
n = q name= 1515
vai identificar n=q e v=q
vai identificar n=1411 e v=1515
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc833fde50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87bb5250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe3d510>])
set([('1514', '1515')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>]
Set([('1410', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87bb5250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe3d510>])
set([('1514', '1515')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>]
Set([('1410', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc858feed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe44990>])
set([('1508', '1515')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>]
Set([('1410', '1411'), ('1514', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc858feed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe44990>])
set([('1508', '1515')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>]
Set([('1410', '1411'), ('1514', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7fcc8d260990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc900623d0>])
set([('1411', '1412')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe57d90>, <pydotplus.graphviz.Edge object at 0x7fcc85f95c10>, <pydotplus.graphviz.Edge object at 0x7fcc7f812e50>]
Set([('307', '1516'), ('1515', '1516'), ('831', '1516')])
(X3v2 imp q) 66 13 37
INtersecao ====================
Set([])
delete in_edge_Ancestor
n = q name= 307
vai identificar n=q e v=q
vai identificar n=1411 e v=307
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc81ed3f10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc824f6f10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a23290>])
set([('306', '307')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>]
Set([('1410', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc824f6f10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a23290>])
set([('306', '307')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>]
Set([('1410', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86f64810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a1c710>])
set([('300', '307')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>]
Set([('1410', '1411'), ('306', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86f64810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a1c710>])
set([('300', '307')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>]
Set([('1410', '1411'), ('306', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7fcc8d260990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc900623d0>, <pydotplus.graphviz.Edge object at 0x7fcc864b3b10>])
set([('1411', '1412'), ('1411', '1516')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc85f95c10>, <pydotplus.graphviz.Edge object at 0x7fcc7f812e50>, <pydotplus.graphviz.Edge object at 0x7fcc864b3b10>]
Set([('307', '1516'), ('1411', '1516'), ('831', '1516')])
(X3v2 imp q) 66 13 37
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc864b3b10>])
delete in_edge_Ancestor
n = q name= 831
vai identificar n=q e v=q
vai identificar n=1411 e v=831
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82daa810>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc839ce1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc915f3450>])
set([('830', '831')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc839ce1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc915f3450>])
set([('830', '831')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc88445a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc915798d0>])
set([('824', '831')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc88445a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc915798d0>])
set([('824', '831')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7fcc8d260990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc900623d0>, <pydotplus.graphviz.Edge object at 0x7fcc864b3b10>])
set([('1411', '1412'), ('1411', '1516')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc7f812e50>, <pydotplus.graphviz.Edge object at 0x7fcc864b3b10>]
Set([('1411', '1516'), ('831', '1516')])
(X3v2 imp q) 66 13 37
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc864b3b10>])
delete in_edge_Ancestor
n = q name= 1079
vai identificar n=q e v=q
vai identificar n=1411 e v=1079
e_in_A.has_key(v.get_name())
False
name = 1079
<pydotplus.graphviz.Edge object at 0x7fcc9133ff50>
1078
<pydotplus.graphviz.Node object at 0x7fcc87d16ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9133ff50>])
set([('1078', '1079')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
name = 1079
<pydotplus.graphviz.Edge object at 0x7fcc91360390>
1072
<pydotplus.graphviz.Node object at 0x7fcc84af1490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91360390>])
set([('1072', '1079')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8d260990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc900623d0>, <pydotplus.graphviz.Edge object at 0x7fcc864b3b10>])
set([('1411', '1412'), ('1411', '1516')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91509190>]
Set([('1079', '1080')])
(X3v1 imp q) 47
INtersecao ====================
Set([])
n = q name= 499
vai identificar n=q e v=q
vai identificar n=1411 e v=499
e_in_A.has_key(v.get_name())
False
name = 499
<pydotplus.graphviz.Edge object at 0x7fcc924bc750>
498
<pydotplus.graphviz.Node object at 0x7fcc888e54d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924bc750>])
set([('498', '499')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc7f5c8c90>]
Set([('300', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
name = 499
<pydotplus.graphviz.Edge object at 0x7fcc924df510>
492
<pydotplus.graphviz.Node object at 0x7fcc88b83650>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924df510>])
set([('492', '499')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc7f5c8c90>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>]
Set([('300', '1411'), ('498', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8d260990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc81cd2990>, <pydotplus.graphviz.Edge object at 0x7fcc900623d0>, <pydotplus.graphviz.Edge object at 0x7fcc864b3b10>])
set([('1411', '1412'), ('1411', '1516'), ('1411', '1080')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92316350>]
Set([('499', '500')])
(X3v4 imp q) 22
INtersecao ====================
Set([])
n = q name= 747
vai identificar n=q e v=q
vai identificar n=1411 e v=747
e_in_A.has_key(v.get_name())
False
name = 747
<pydotplus.graphviz.Edge object at 0x7fcc9199d290>
746
<pydotplus.graphviz.Node object at 0x7fcc883a2cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9199d290>])
set([('746', '747')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc7f5c8c90>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>, <pydotplus.graphviz.Edge object at 0x7fcc81cd2b10>]
Set([('300', '1411'), ('498', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
name = 747
<pydotplus.graphviz.Edge object at 0x7fcc919933d0>
740
<pydotplus.graphviz.Node object at 0x7fcc85778110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc919933d0>])
set([('740', '747')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc7f5c8c90>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>, <pydotplus.graphviz.Edge object at 0x7fcc81cd2b10>, <pydotplus.graphviz.Edge object at 0x7fcc7fc1a0d0>]
Set([('300', '1411'), ('498', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411'), ('746', '1411')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8d260990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc81cd2990>, <pydotplus.graphviz.Edge object at 0x7fcc900623d0>, <pydotplus.graphviz.Edge object at 0x7fcc864b3b10>, <pydotplus.graphviz.Edge object at 0x7fcc89d8e810>])
set([('1411', '1412'), ('1411', '1516'), ('1411', '500'), ('1411', '1080')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91a0e410>]
Set([('747', '748')])
(X3v3 imp q) 32
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 14
gravando dot file
nivel 15
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v1 imp (X3v1 imp q))', 'X3v1 imp q', 'X3v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v4 imp (X4v5 imp q))', '(X2v2 imp (X3v2 imp q))', '(X3v2 imp q)', 'X1v1', '(X3v4 imp q)', '(ORX3 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X2v4', '(X3v1 imp (X4v5 imp q))', 'X2v1', 'X2v2', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', 'X1v2', '(ORX4 imp q)', '(X2v4 imp (X3v5 imp q))', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))', 'ORX4', '(X4v2 imp q)', '(X2v4 imp (X3v4 imp q))', '(X3v5 imp q)', 'X3v4', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X1v2 imp (X4v2 imp q))', 'X4v4 imp q', 'q', 'X3v2 imp q', '(X2v1 imp (X3v1 imp q))', '(X3v3 imp q)']
REPEATED_FORMULAS =====> 
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v4 imp q)', 'X2v4', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX4', '(X4v2 imp q)', 'q', '(X3v3 imp q)']
==========
nivel da formula que repete= 15
formula que repete= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai collapsar (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c0b5a50>, <pydotplus.graphviz.Node object at 0x7fcc8bfadd90>]
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bfadd90>]
n = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) name= 1148
vai identificar n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai identificar n=248 e v=1148
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc80a79d90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87bfac90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90be8050>])
set([('1149', '1148')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b16710>, <pydotplus.graphviz.Edge object at 0x7fcc92b10190>]
Set([('249', '248'), ('243', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87bfac90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90be8050>])
set([('1149', '1148')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b16710>, <pydotplus.graphviz.Edge object at 0x7fcc92b10190>]
Set([('249', '248'), ('243', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc856fb090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90bd5810>])
set([('1143', '1148')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b16710>, <pydotplus.graphviz.Edge object at 0x7fcc92b10190>, <pydotplus.graphviz.Edge object at 0x7fcc87c14090>]
Set([('249', '248'), ('243', '248'), ('1149', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc856fb090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90bd5810>])
set([('1143', '1148')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b16710>, <pydotplus.graphviz.Edge object at 0x7fcc92b10190>, <pydotplus.graphviz.Edge object at 0x7fcc87c14090>]
Set([('249', '248'), ('243', '248'), ('1149', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
<pydotplus.graphviz.Node object at 0x7fcc8c0b5a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>])
set([('248', '247')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>, <pydotplus.graphviz.Edge object at 0x7fcc92afbd50>, <pydotplus.graphviz.Edge object at 0x7fcc8700bf10>, <pydotplus.graphviz.Edge object at 0x7fcc88a76cd0>]
Set([('248', '247'), ('1135', '247'), ('187', '247'), ('1148', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v5 imp q) imp ((ORX4 imp q))
vai collapsar (X4v5 imp q) imp ((ORX4 imp q)) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c0372d0>, <pydotplus.graphviz.Node object at 0x7fcc8bfed850>]
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) imp ((ORX4 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bfed850>]
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 1125
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=177 e v=1125
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc868bb790>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87f0c9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c5c0d0>])
set([('1126', '1125')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d46090>, <pydotplus.graphviz.Edge object at 0x7fcc92d4c510>]
Set([('139', '177'), ('178', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87f0c9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c5c0d0>])
set([('1126', '1125')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d46090>, <pydotplus.graphviz.Edge object at 0x7fcc92d4c510>]
Set([('139', '177'), ('178', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f3e7450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c62550>])
set([('1111', '1125')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d46090>, <pydotplus.graphviz.Edge object at 0x7fcc92d4c510>, <pydotplus.graphviz.Edge object at 0x7fcc81d9c110>]
Set([('139', '177'), ('178', '177'), ('1126', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f3e7450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c62550>])
set([('1111', '1125')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d46090>, <pydotplus.graphviz.Edge object at 0x7fcc92d4c510>, <pydotplus.graphviz.Edge object at 0x7fcc81d9c110>]
Set([('139', '177'), ('178', '177'), ('1126', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8c0372d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>])
set([('177', '176')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>, <pydotplus.graphviz.Edge object at 0x7fcc92dca390>, <pydotplus.graphviz.Edge object at 0x7fcc81ecf490>, <pydotplus.graphviz.Edge object at 0x7fcc82b25d50>]
Set([('177', '176'), ('1125', '176'), ('1123', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v4 imp q)
vai collapsar (X3v4 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c01d250>, <pydotplus.graphviz.Node object at 0x7fcc8c05a890>]
labels = (X3v4 imp q)
labels = (X3v4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c05a890>]
n = (X3v4 imp q) name= 363
vai identificar n=(X3v4 imp q) e v=(X3v4 imp q)
vai identificar n=1523 e v=363
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8334bc50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X2v4]12 e v = (X3v4 imp q) n=(X3v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc820a2190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b7a450>])
set([('361', '363')])
[X2v4]12
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe16e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fe257d0>]
Set([('1521', '1523'), ('1522', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc820a2190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b7a450>])
set([('361', '363')])
[X2v4]12
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe16e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fe257d0>]
Set([('1521', '1523'), ('1522', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X2v4]12 para (X3v4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X2v4 imp (X3v4 imp q)) e v = (X3v4 imp q) n=(X3v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc801c8f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9273a210>])
set([('362', '363')])
(X2v4 imp (X3v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe16e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fe257d0>, <pydotplus.graphviz.Edge object at 0x7fcc8a0a6a90>]
Set([('1521', '1523'), ('1522', '1523'), ('361', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc801c8f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9273a210>])
set([('362', '363')])
(X2v4 imp (X3v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe16e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fe257d0>, <pydotplus.graphviz.Edge object at 0x7fcc8a0a6a90>]
Set([('1521', '1523'), ('1522', '1523'), ('361', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X2v4 imp (X3v4 imp q)) para (X3v4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c01d250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>])
set([('1523', '1530')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>, <pydotplus.graphviz.Edge object at 0x7fcc7fe4bb10>, <pydotplus.graphviz.Edge object at 0x7fcc81c46510>, <pydotplus.graphviz.Edge object at 0x7fcc81a7bbd0>]
Set([('1531', '1530'), ('1523', '1530'), ('888', '1530'), ('363', '1530'), ('371', '1530'), ('895', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= X2v4
vai collapsar X2v4 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bf8b0d0>, <pydotplus.graphviz.Node object at 0x7fcc8bf78250>]
labels = [X2v4]46
labels = [X2v4]29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bf78250>]
n = [X2v4]29 name= 753
vai identificar n=[X2v4]46 e v=[X2v4]29
vai identificar n=1137 e v=753
e_in_A.has_key(v.get_name())
False
<pydotplus.graphviz.Node object at 0x7fcc8bf8b0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90bec890>])
set([('1137', '1139')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc918e9790>, <pydotplus.graphviz.Edge object at 0x7fcc9187e710>]
Set([('753', '755'), ('754', '755')])
(X3v5 imp q)
INtersecao ====================
Set([])
v ====> [X2v4]29 =29
n ======> [X2v4]46 =46
APAGANDO ARESTA [X2v4]29==> (X2v4 imp q) 29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai collapsar (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) 3 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c09d990>, <pydotplus.graphviz.Node object at 0x7fcc8c04c910>, <pydotplus.graphviz.Node object at 0x7fcc8bff01d0>]
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c04c910>, <pydotplus.graphviz.Node object at 0x7fcc8bff01d0>]
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 371
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=1531 e v=371
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc83e8f310>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8385efd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92604750>])
set([('372', '371')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>]
Set([('1532', '1531'), ('1519', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8385efd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92604750>])
set([('372', '371')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>]
Set([('1532', '1531'), ('1519', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) 15 e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f374190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92600290>])
set([('360', '371')])
(X3v3 imp q) 15
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc805ee810>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f374190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92600290>])
set([('360', '371')])
(X3v3 imp q) 15
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc805ee810>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) 15 para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7fcc8c09d990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>])
set([('1531', '1530')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc8453a050>, <pydotplus.graphviz.Edge object at 0x7fcc81c46510>, <pydotplus.graphviz.Edge object at 0x7fcc81a7bbd0>]
Set([('888', '1530'), ('895', '1530'), ('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>])
delete in_edge_Ancestor
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 895
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=1531 e v=895
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc84af1090>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc813c2dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc913fe310>])
set([('896', '895')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc805ee810>, <pydotplus.graphviz.Edge object at 0x7fcc7f446150>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531'), ('360', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc813c2dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc913fe310>])
set([('896', '895')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc805ee810>, <pydotplus.graphviz.Edge object at 0x7fcc7f446150>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531'), ('360', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87eb2e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc914a25d0>])
set([('835', '895')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc805ee810>, <pydotplus.graphviz.Edge object at 0x7fcc7f446150>, <pydotplus.graphviz.Edge object at 0x7fcc892771d0>]
Set([('1532', '1531'), ('360', '1531'), ('1519', '1531'), ('372', '1531'), ('896', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87eb2e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc914a25d0>])
set([('835', '895')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc805ee810>, <pydotplus.graphviz.Edge object at 0x7fcc7f446150>, <pydotplus.graphviz.Edge object at 0x7fcc892771d0>]
Set([('1532', '1531'), ('360', '1531'), ('1519', '1531'), ('372', '1531'), ('896', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7fcc8c09d990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>])
set([('1531', '1530')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>, <pydotplus.graphviz.Edge object at 0x7fcc8fde2c90>, <pydotplus.graphviz.Edge object at 0x7fcc81c46510>, <pydotplus.graphviz.Edge object at 0x7fcc81a7bbd0>]
Set([('888', '1530'), ('895', '1530'), ('1531', '1530'), ('1523', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fddd810>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai collapsar (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bf33d90>, <pydotplus.graphviz.Node object at 0x7fcc8bf27250>]
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bf27250>]
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 622
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=686 e v=622
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8884c250>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82a0c290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91dbca50>])
set([('623', '622')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>, <pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>]
Set([('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82a0c290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91dbca50>])
set([('623', '622')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>, <pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>]
Set([('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc88d89c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e63390>])
set([('615', '622')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>, <pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>, <pydotplus.graphviz.Edge object at 0x7fcc80f8ef10>]
Set([('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc88d89c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e63390>])
set([('615', '622')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>, <pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>, <pydotplus.graphviz.Edge object at 0x7fcc80f8ef10>]
Set([('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8bf33d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91c48150>])
set([('686', '685')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91c48150>, <pydotplus.graphviz.Edge object at 0x7fcc91c48d10>, <pydotplus.graphviz.Edge object at 0x7fcc85e4b510>, <pydotplus.graphviz.Edge object at 0x7fcc80937450>]
Set([('686', '685'), ('607', '685'), ('622', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc91c48150>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c08ca10>, <pydotplus.graphviz.Node object at 0x7fcc8c07b950>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c07b950>]
n = (X4v5 imp q) name= 1123
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=175 e v=1123
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8485fe50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]49 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc898825d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90d17510>])
set([('1121', '1123')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc93091990>, <pydotplus.graphviz.Edge object at 0x7fcc92de8b50>]
Set([('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc898825d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90d17510>])
set([('1121', '1123')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc93091990>, <pydotplus.graphviz.Edge object at 0x7fcc92de8b50>]
Set([('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]49 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc89a90a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90ca0850>])
set([('1122', '1123')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc93091990>, <pydotplus.graphviz.Edge object at 0x7fcc92de8b50>, <pydotplus.graphviz.Edge object at 0x7fcc8987e690>]
Set([('1121', '175'), ('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc89a90a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90ca0850>])
set([('1122', '1123')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc93091990>, <pydotplus.graphviz.Edge object at 0x7fcc92de8b50>, <pydotplus.graphviz.Edge object at 0x7fcc8987e690>]
Set([('1121', '175'), ('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c08ca10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92dca390>])
set([('175', '176')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcf250>, <pydotplus.graphviz.Edge object at 0x7fcc92dca390>, <pydotplus.graphviz.Edge object at 0x7fcc82b25d50>]
Set([('177', '176'), ('1123', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92dca390>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 6 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c022b90>, <pydotplus.graphviz.Node object at 0x7fcc8c064950>, <pydotplus.graphviz.Node object at 0x7fcc8bf3b6d0>, <pydotplus.graphviz.Node object at 0x7fcc8bff7290>, <pydotplus.graphviz.Node object at 0x7fcc8bf69890>, <pydotplus.graphviz.Node object at 0x7fcc8bf1ff10>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c064950>, <pydotplus.graphviz.Node object at 0x7fcc8bf3b6d0>, <pydotplus.graphviz.Node object at 0x7fcc8bff7290>, <pydotplus.graphviz.Node object at 0x7fcc8bf69890>, <pydotplus.graphviz.Node object at 0x7fcc8bf1ff10>]
n = (ORX4 imp q) name= 300
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=300
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc880e7b50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82fd7890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a5d190>])
set([('301', '300')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>]
Set([('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82fd7890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a5d190>])
set([('301', '300')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>]
Set([('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc802c7d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a62b90>])
set([('299', '300')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc802c7d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a62b90>])
set([('299', '300')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c022b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc86d1f990>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc7f5c8c90>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>, <pydotplus.graphviz.Edge object at 0x7fcc81cd2b10>, <pydotplus.graphviz.Edge object at 0x7fcc7fc1a0d0>, <pydotplus.graphviz.Edge object at 0x7fcc81a56a90>]
Set([('300', '1411'), ('498', '1411'), ('740', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411'), ('746', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 824
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=824
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc891f9f10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86964a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc916a09d0>])
set([('825', '824')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86964a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc916a09d0>])
set([('825', '824')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8753fc10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9169abd0>])
set([('823', '824')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8753fc10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9169abd0>])
set([('823', '824')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c022b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc863bb850>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc7f5c8c90>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>, <pydotplus.graphviz.Edge object at 0x7fcc81cd2b10>, <pydotplus.graphviz.Edge object at 0x7fcc7fc1a0d0>, <pydotplus.graphviz.Edge object at 0x7fcc81a56a90>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 1072
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=1072
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc83cd3110>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81862b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91780210>])
set([('1073', '1072')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81862b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91780210>])
set([('1073', '1072')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc84f54950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9118ec50>])
set([('1071', '1072')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc84f54950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9118ec50>])
set([('1071', '1072')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c022b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc7f5c8c90>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>, <pydotplus.graphviz.Edge object at 0x7fcc81cd2b10>, <pydotplus.graphviz.Edge object at 0x7fcc7fc1a0d0>, <pydotplus.graphviz.Edge object at 0x7fcc81a56a90>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 492
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=492
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc80261fd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87a36750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924bfe50>])
set([('493', '492')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87a36750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924bfe50>])
set([('493', '492')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc89e582d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924e5050>])
set([('491', '492')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc89e582d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924e5050>])
set([('491', '492')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c022b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>, <pydotplus.graphviz.Edge object at 0x7fcc81cd2b10>, <pydotplus.graphviz.Edge object at 0x7fcc7fc1a0d0>, <pydotplus.graphviz.Edge object at 0x7fcc81a56a90>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 740
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=740
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc868c04d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc85e80b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9193e750>])
set([('741', '740')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc85e80b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9193e750>])
set([('741', '740')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc882dc190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91946bd0>])
set([('739', '740')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc882dc190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91946bd0>])
set([('739', '740')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c022b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90027d90>, <pydotplus.graphviz.Edge object at 0x7fcc90030250>, <pydotplus.graphviz.Edge object at 0x7fcc8929b150>, <pydotplus.graphviz.Edge object at 0x7fcc83769910>, <pydotplus.graphviz.Edge object at 0x7fcc84ad7550>, <pydotplus.graphviz.Edge object at 0x7fcc89c5a250>, <pydotplus.graphviz.Edge object at 0x7fcc898df110>, <pydotplus.graphviz.Edge object at 0x7fcc888e5f10>, <pydotplus.graphviz.Edge object at 0x7fcc7fc1a0d0>, <pydotplus.graphviz.Edge object at 0x7fcc81a56a90>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc83769910>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v2 imp q) imp ((ORX3 imp q))
vai collapsar (X3v2 imp q) imp ((ORX3 imp q)) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c09d690>, <pydotplus.graphviz.Node object at 0x7fcc8c082610>]
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) imp ((ORX3 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c082610>]
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 121
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=1281 e v=121
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc7f84bf90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83350890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92e8a8d0>])
set([('122', '121')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906cf990>, <pydotplus.graphviz.Edge object at 0x7fcc906d7e10>]
Set([('1282', '1281'), ('1167', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83350890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92e8a8d0>])
set([('122', '121')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906cf990>, <pydotplus.graphviz.Edge object at 0x7fcc906d7e10>]
Set([('1282', '1281'), ('1167', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f769550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92e91d50>])
set([('7', '121')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906cf990>, <pydotplus.graphviz.Edge object at 0x7fcc906d7e10>, <pydotplus.graphviz.Edge object at 0x7fcc882c9190>]
Set([('1282', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f769550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92e91d50>])
set([('7', '121')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906cf990>, <pydotplus.graphviz.Edge object at 0x7fcc906d7e10>, <pydotplus.graphviz.Edge object at 0x7fcc882c9190>]
Set([('1282', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8c09d690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90733050>])
set([('1281', '1280')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90733050>, <pydotplus.graphviz.Edge object at 0x7fcc90736fd0>, <pydotplus.graphviz.Edge object at 0x7fcc80bbbc90>, <pydotplus.graphviz.Edge object at 0x7fcc81863510>]
Set([('1281', '1280'), ('121', '1280'), ('1220', '1280'), ('11', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc90733050>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= ORX4
vai collapsar ORX4 6 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c0242d0>, <pydotplus.graphviz.Node object at 0x7fcc8c05a990>, <pydotplus.graphviz.Node object at 0x7fcc8bfadd10>, <pydotplus.graphviz.Node object at 0x7fcc8bf91f50>, <pydotplus.graphviz.Node object at 0x7fcc8bf5bed0>, <pydotplus.graphviz.Node object at 0x7fcc8bf13590>]
labels = ORX4
labels = ORX4
labels = ORX4
labels = ORX4
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c05a990>, <pydotplus.graphviz.Node object at 0x7fcc8bfadd10>, <pydotplus.graphviz.Node object at 0x7fcc8bf91f50>, <pydotplus.graphviz.Node object at 0x7fcc8bf5bed0>, <pydotplus.graphviz.Node object at 0x7fcc8bf13590>]
n = ORX4 name= 306
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=306
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8891b910>]
n = ORX4 name= 830
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=830
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc884d7550>]
n = ORX4 name= 1078
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=1078
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc85a25750>]
n = ORX4 name= 498
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=498
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc88b83510>]
n = ORX4 name= 746
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=746
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc81138890>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v2 imp q)
vai collapsar (X4v2 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bec8c10>, <pydotplus.graphviz.Node object at 0x7fcc8bf2e990>]
labels = (X4v2 imp q)
labels = (X4v2 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bf2e990>]
n = (X4v2 imp q) name= 607
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=647 e v=607
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89cf8d10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v2]18 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc85f1f450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91f9f4d0>])
set([('605', '607')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91fe1990>, <pydotplus.graphviz.Edge object at 0x7fcc91e9f9d0>]
Set([('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc85f1f450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91f9f4d0>])
set([('605', '607')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91fe1990>, <pydotplus.graphviz.Edge object at 0x7fcc91e9f9d0>]
Set([('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v2]18 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc80daf250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91ea3f10>])
set([('606', '607')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91fe1990>, <pydotplus.graphviz.Edge object at 0x7fcc91e9f9d0>, <pydotplus.graphviz.Edge object at 0x7fcc8492cbd0>]
Set([('605', '647'), ('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc80daf250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91ea3f10>])
set([('606', '607')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91fe1990>, <pydotplus.graphviz.Edge object at 0x7fcc91e9f9d0>, <pydotplus.graphviz.Edge object at 0x7fcc8492cbd0>]
Set([('605', '647'), ('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bec8c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91c48d10>])
set([('647', '685')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91c48150>, <pydotplus.graphviz.Edge object at 0x7fcc91c48d10>, <pydotplus.graphviz.Edge object at 0x7fcc80937450>]
Set([('686', '685'), ('607', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc91c48d10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= q
vai collapsar q 3 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bffd310>, <pydotplus.graphviz.Node object at 0x7fcc8c08b350>, <pydotplus.graphviz.Node object at 0x7fcc8bf4f550>]
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8c08b350>, <pydotplus.graphviz.Node object at 0x7fcc8bf4f550>]
n = q name= 239
vai identificar n=q e v=q
vai identificar n=1463 e v=239
e_in_A.has_key(v.get_name())
False
name = 239
<pydotplus.graphviz.Edge object at 0x7fcc92c2f510>
238
<pydotplus.graphviz.Node object at 0x7fcc875e5910>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c2f510>])
set([('238', '239')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc908b37d0>, <pydotplus.graphviz.Edge object at 0x7fcc9087fb10>]
Set([('1462', '1463'), ('1456', '1463')])
q
INtersecao ====================
Set([])
name = 239
<pydotplus.graphviz.Edge object at 0x7fcc92c13e50>
232
<pydotplus.graphviz.Node object at 0x7fcc83f56590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c13e50>])
set([('232', '239')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc908b37d0>, <pydotplus.graphviz.Edge object at 0x7fcc9087fb10>, <pydotplus.graphviz.Edge object at 0x7fcc84b6a510>]
Set([('1462', '1463'), ('1456', '1463'), ('238', '1463')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8bffd310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90611f10>])
set([('1463', '1464')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92bfa290>]
Set([('239', '240')])
(X3v4 imp q) 10
INtersecao ====================
Set([])
n = q name= 447
vai identificar n=q e v=q
vai identificar n=1463 e v=447
e_in_A.has_key(v.get_name())
False
name = 447
<pydotplus.graphviz.Edge object at 0x7fcc923ef990>
446
<pydotplus.graphviz.Node object at 0x7fcc83f56890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc923ef990>])
set([('446', '447')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc908b37d0>, <pydotplus.graphviz.Edge object at 0x7fcc9087fb10>, <pydotplus.graphviz.Edge object at 0x7fcc84b6a510>, <pydotplus.graphviz.Edge object at 0x7fcc85708f90>]
Set([('1462', '1463'), ('1456', '1463'), ('238', '1463'), ('232', '1463')])
q
INtersecao ====================
Set([])
name = 447
<pydotplus.graphviz.Edge object at 0x7fcc923f4e10>
440
<pydotplus.graphviz.Node object at 0x7fcc81d965d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc923f4e10>])
set([('440', '447')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc908b37d0>, <pydotplus.graphviz.Edge object at 0x7fcc9087fb10>, <pydotplus.graphviz.Edge object at 0x7fcc84b6a510>, <pydotplus.graphviz.Edge object at 0x7fcc85708f90>, <pydotplus.graphviz.Edge object at 0x7fcc8a05a610>]
Set([('446', '1463'), ('1462', '1463'), ('1456', '1463'), ('238', '1463'), ('232', '1463')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8bffd310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc88652ed0>, <pydotplus.graphviz.Edge object at 0x7fcc90611f10>])
set([('1463', '1464'), ('1463', '240')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9238a250>]
Set([('447', '448')])
(X3v3 imp q) 20
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v3 imp q)
vai collapsar (X3v3 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8c05acd0>, <pydotplus.graphviz.Node object at 0x7fcc8bf91b90>]
labels = (X3v3 imp q)
labels = (X3v3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bf91b90>]
n = (X3v3 imp q) name= 1135
vai identificar n=(X3v3 imp q) e v=(X3v3 imp q)
vai identificar n=187 e v=1135
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc87e73b10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v3]35 e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8414b790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90ded950>])
set([('1133', '1135')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcce10>, <pydotplus.graphviz.Edge object at 0x7fcc92d444d0>]
Set([('186', '187'), ('185', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8414b790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90ded950>])
set([('1133', '1135')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcce10>, <pydotplus.graphviz.Edge object at 0x7fcc92d444d0>]
Set([('186', '187'), ('185', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v3]35 para (X3v3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v3 imp (X3v3 imp q)) e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7ee75050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c59690>])
set([('1134', '1135')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcce10>, <pydotplus.graphviz.Edge object at 0x7fcc92d444d0>, <pydotplus.graphviz.Edge object at 0x7fcc80a80650>]
Set([('186', '187'), ('185', '187'), ('1133', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7ee75050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c59690>])
set([('1134', '1135')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92dcce10>, <pydotplus.graphviz.Edge object at 0x7fcc92d444d0>, <pydotplus.graphviz.Edge object at 0x7fcc80a80650>]
Set([('186', '187'), ('185', '187'), ('1133', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v3 imp (X3v3 imp q)) para (X3v3 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8c05acd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92afbd50>])
set([('187', '247')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b758d0>, <pydotplus.graphviz.Edge object at 0x7fcc92afbd50>, <pydotplus.graphviz.Edge object at 0x7fcc88a76cd0>]
Set([('248', '247'), ('1135', '247'), ('187', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92afbd50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 15
gravando dot file
nivel 16
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))', '(X1v4 imp (X3v4 imp q))', '(X4v1 imp q)', 'X3v4 imp q', '(X2v2 imp (X3v2 imp q))', 'X1v3', '(X3v2 imp q)', 'X1v4', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X4v4 imp q)', '(X2v1 imp (X3v5 imp q))', '(X1v3 imp (X3v3 imp q))', 'X2v4', 'X2v1', 'X2v2', 'X2v3', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', 'X1v2', '(ORX4 imp q)', '(X2v3 imp (X3v3 imp q))', '(X3v2 imp q) imp ((ORX3 imp q))', '(X3v2 imp (X4v5 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))', 'ORX4', '(X4v2 imp q)', '(X2v4 imp (X3v4 imp q))', 'X3v2', '(X3v5 imp q)', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X1v2 imp (X4v2 imp q))', '(X4v5 imp q) imp ((ORX4 imp q))', 'q', 'X3v3 imp q', '(X3v3 imp q)']
REPEATED_FORMULAS =====> 
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X4v4 imp q)', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', 'X1v2', '(ORX4 imp q)', '(X3v2 imp (X4v5 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))', 'ORX4', '(X4v2 imp q)', 'X3v2', '(X3v5 imp q)', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X1v2 imp (X4v2 imp q))', '(X4v5 imp q) imp ((ORX4 imp q))', 'q', '(X3v3 imp q)']
==========
nivel da formula que repete= 16
formula que repete= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai collapsar (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) 3 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8beaf9d0>, <pydotplus.graphviz.Node object at 0x7fcc8be5d590>, <pydotplus.graphviz.Node object at 0x7fcc8bd9bb50>]
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8be5d590>, <pydotplus.graphviz.Node object at 0x7fcc8bd9bb50>]
n = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) name= 372
vai identificar n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai identificar n=1532 e v=372
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82bb01d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc827bb4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9261e0d0>])
set([('373', '372')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>]
Set([('1533', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc827bb4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9261e0d0>])
set([('373', '372')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>]
Set([('1533', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81ff8510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92626550>])
set([('367', '372')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>, <pydotplus.graphviz.Edge object at 0x7fcc8159c250>]
Set([('1533', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81ff8510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92626550>])
set([('367', '372')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>, <pydotplus.graphviz.Edge object at 0x7fcc8159c250>]
Set([('1533', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
<pydotplus.graphviz.Node object at 0x7fcc8beaf9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>])
set([('1532', '1531')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc805ee810>, <pydotplus.graphviz.Edge object at 0x7fcc7f446150>, <pydotplus.graphviz.Edge object at 0x7fcc892771d0>, <pydotplus.graphviz.Edge object at 0x7fcc813c2ad0>]
Set([('1519', '1531'), ('1532', '1531'), ('360', '1531'), ('896', '1531'), ('835', '1531'), ('372', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>])
delete in_edge_Ancestor
n = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) name= 896
vai identificar n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai identificar n=1532 e v=896
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89f21310>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8811c890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc914999d0>])
set([('897', '896')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>, <pydotplus.graphviz.Edge object at 0x7fcc8159c250>, <pydotplus.graphviz.Edge object at 0x7fcc844c1fd0>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8811c890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc914999d0>])
set([('897', '896')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>, <pydotplus.graphviz.Edge object at 0x7fcc8159c250>, <pydotplus.graphviz.Edge object at 0x7fcc844c1fd0>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc85ab3450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc914e5210>])
set([('891', '896')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>, <pydotplus.graphviz.Edge object at 0x7fcc8159c250>, <pydotplus.graphviz.Edge object at 0x7fcc844c1fd0>, <pydotplus.graphviz.Edge object at 0x7fcc8582a2d0>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('897', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc85ab3450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc914e5210>])
set([('891', '896')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fd90ad0>, <pydotplus.graphviz.Edge object at 0x7fcc8fd95f50>, <pydotplus.graphviz.Edge object at 0x7fcc8159c250>, <pydotplus.graphviz.Edge object at 0x7fcc844c1fd0>, <pydotplus.graphviz.Edge object at 0x7fcc8582a2d0>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('897', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
<pydotplus.graphviz.Node object at 0x7fcc8beaf9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>])
set([('1532', '1531')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc7f446150>, <pydotplus.graphviz.Edge object at 0x7fcc892771d0>, <pydotplus.graphviz.Edge object at 0x7fcc813c2ad0>]
Set([('1532', '1531'), ('835', '1531'), ('360', '1531'), ('1519', '1531'), ('896', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v1 imp q)
vai collapsar (X3v1 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bf78a90>, <pydotplus.graphviz.Node object at 0x7fcc8beae390>]
labels = (X3v1 imp q)
labels = (X3v1 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8beae390>]
n = (X3v1 imp q) name= 7
vai identificar n=(X3v1 imp q) e v=(X3v1 imp q)
vai identificar n=1167 e v=7
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc84b29150>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v1]1 e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc851ba950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9341b090>])
set([('5', '7')])
[X1v1]1
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90acf150>, <pydotplus.graphviz.Edge object at 0x7fcc90915c10>]
Set([('1165', '1167'), ('1166', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc851ba950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9341b090>])
set([('5', '7')])
[X1v1]1
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90acf150>, <pydotplus.graphviz.Edge object at 0x7fcc90915c10>]
Set([('1165', '1167'), ('1166', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v1]1 para (X3v1 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v1 imp (X3v1 imp q)) e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc881c4c90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9344aed0>])
set([('6', '7')])
(X1v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90acf150>, <pydotplus.graphviz.Edge object at 0x7fcc90915c10>, <pydotplus.graphviz.Edge object at 0x7fcc851d94d0>]
Set([('1165', '1167'), ('1166', '1167'), ('5', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc881c4c90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9344aed0>])
set([('6', '7')])
(X1v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90acf150>, <pydotplus.graphviz.Edge object at 0x7fcc90915c10>, <pydotplus.graphviz.Edge object at 0x7fcc851d94d0>]
Set([('1165', '1167'), ('1166', '1167'), ('5', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v1 imp (X3v1 imp q)) para (X3v1 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bf78a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc906d7e10>])
set([('1167', '1281')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906cf990>, <pydotplus.graphviz.Edge object at 0x7fcc906d7e10>, <pydotplus.graphviz.Edge object at 0x7fcc882c9190>, <pydotplus.graphviz.Edge object at 0x7fcc89f25e50>]
Set([('1282', '1281'), ('7', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc906d7e10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai collapsar (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be0bf50>, <pydotplus.graphviz.Node object at 0x7fcc8be7fd90>]
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8be7fd90>]
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 122
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=1282 e v=122
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8a17bb50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82ca2e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ead710>])
set([('123', '122')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906f17d0>, <pydotplus.graphviz.Edge object at 0x7fcc906eb2d0>]
Set([('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82ca2e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ead710>])
set([('123', '122')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906f17d0>, <pydotplus.graphviz.Edge object at 0x7fcc906eb2d0>]
Set([('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) 5 e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc88f6f8d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ea8250>])
set([('116', '122')])
(X3v4 imp q) 5
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906f17d0>, <pydotplus.graphviz.Edge object at 0x7fcc906eb2d0>, <pydotplus.graphviz.Edge object at 0x7fcc88646990>]
Set([('123', '1282'), ('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc88f6f8d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ea8250>])
set([('116', '122')])
(X3v4 imp q) 5
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906f17d0>, <pydotplus.graphviz.Edge object at 0x7fcc906eb2d0>, <pydotplus.graphviz.Edge object at 0x7fcc88646990>]
Set([('123', '1282'), ('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) 5 para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8be0bf50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc906cf990>])
set([('1282', '1281')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906cf990>, <pydotplus.graphviz.Edge object at 0x7fcc906d7e10>, <pydotplus.graphviz.Edge object at 0x7fcc882c9190>]
Set([('1282', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc906cf990>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v4 imp q)
vai collapsar (X4v4 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bcee310>, <pydotplus.graphviz.Node object at 0x7fcc8bcb8810>]
labels = (X4v4 imp q)
labels = (X4v4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bcb8810>]
n = (X4v4 imp q) name= 615
vai identificar n=(X4v4 imp q) e v=(X4v4 imp q)
vai identificar n=679 e v=615
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82195a10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]27 e v = (X4v4 imp q) n=(X4v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8573ed50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e606d0>])
set([('613', '615')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91e48bd0>, <pydotplus.graphviz.Edge object at 0x7fcc9219ea90>]
Set([('678', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8573ed50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e606d0>])
set([('613', '615')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91e48bd0>, <pydotplus.graphviz.Edge object at 0x7fcc9219ea90>]
Set([('678', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]27 para (X4v4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v4 imp q)) e v = (X4v4 imp q) n=(X4v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc870eea50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e75650>])
set([('614', '615')])
(X3v4 imp (X4v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91e48bd0>, <pydotplus.graphviz.Edge object at 0x7fcc9219ea90>, <pydotplus.graphviz.Edge object at 0x7fcc838aa390>]
Set([('678', '679'), ('613', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc870eea50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e75650>])
set([('614', '615')])
(X3v4 imp (X4v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91e48bd0>, <pydotplus.graphviz.Edge object at 0x7fcc9219ea90>, <pydotplus.graphviz.Edge object at 0x7fcc838aa390>]
Set([('678', '679'), ('613', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v4 imp q)) para (X4v4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bcee310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>])
set([('679', '686')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>, <pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>, <pydotplus.graphviz.Edge object at 0x7fcc80f8ef10>, <pydotplus.graphviz.Edge object at 0x7fcc7fb8b410>]
Set([('615', '686'), ('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai collapsar (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bd9bd50>, <pydotplus.graphviz.Node object at 0x7fcc8bcbf150>]
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bcbf150>]
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 1126
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=178 e v=1126
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc864e2150>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc84afce10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90bfced0>])
set([('1127', '1126')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d64e90>, <pydotplus.graphviz.Edge object at 0x7fcc92d6d350>]
Set([('172', '178'), ('179', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc84afce10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90bfced0>])
set([('1127', '1126')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d64e90>, <pydotplus.graphviz.Edge object at 0x7fcc92d6d350>]
Set([('172', '178'), ('179', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8824ec50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c759d0>])
set([('1119', '1126')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d64e90>, <pydotplus.graphviz.Edge object at 0x7fcc92d6d350>, <pydotplus.graphviz.Edge object at 0x7fcc80a55050>]
Set([('172', '178'), ('179', '178'), ('1127', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8824ec50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90c759d0>])
set([('1119', '1126')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d64e90>, <pydotplus.graphviz.Edge object at 0x7fcc92d6d350>, <pydotplus.graphviz.Edge object at 0x7fcc80a55050>]
Set([('172', '178'), ('179', '178'), ('1127', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8bd9bd50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92d46090>])
set([('178', '177')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d46090>, <pydotplus.graphviz.Edge object at 0x7fcc92d4c510>, <pydotplus.graphviz.Edge object at 0x7fcc81d9c110>, <pydotplus.graphviz.Edge object at 0x7fcc81d97390>]
Set([('139', '177'), ('1111', '177'), ('178', '177'), ('1126', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92d46090>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 6 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be5dc90>, <pydotplus.graphviz.Node object at 0x7fcc8be3fe10>, <pydotplus.graphviz.Node object at 0x7fcc8bd68f10>, <pydotplus.graphviz.Node object at 0x7fcc8bd2a2d0>, <pydotplus.graphviz.Node object at 0x7fcc8bd06b10>, <pydotplus.graphviz.Node object at 0x7fcc8bd11490>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8be3fe10>, <pydotplus.graphviz.Node object at 0x7fcc8bd68f10>, <pydotplus.graphviz.Node object at 0x7fcc8bd2a2d0>, <pydotplus.graphviz.Node object at 0x7fcc8bd06b10>, <pydotplus.graphviz.Node object at 0x7fcc8bd11490>]
n = (X4v5 imp q) name= 299
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=299
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8a375c10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]13 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc806a0110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a44810>])
set([('297', '299')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>]
Set([('1506', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc806a0110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a44810>])
set([('297', '299')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>]
Set([('1506', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]13 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc876b4b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a419d0>])
set([('298', '299')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc876b4b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92a419d0>])
set([('298', '299')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be5dc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc87d29290>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>, <pydotplus.graphviz.Edge object at 0x7fcc83740390>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 823
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=823
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc7fc7de50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]37 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83f83f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc920fb910>])
set([('821', '823')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83f83f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc920fb910>])
set([('821', '823')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]37 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f365550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91600d10>])
set([('822', '823')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('821', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f365550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91600d10>])
set([('822', '823')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('821', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be5dc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc869647d0>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>, <pydotplus.graphviz.Edge object at 0x7fcc83740390>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 1071
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=1071
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc81e9fe10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v1]47 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7fdb9790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9118c690>])
set([('1069', '1071')])
[X3v1]47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>]
Set([('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7fdb9790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9118c690>])
set([('1069', '1071')])
[X3v1]47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>]
Set([('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v1]47 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82eff990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91787c90>])
set([('1070', '1071')])
(X3v1 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82eff990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91787c90>])
set([('1070', '1071')])
(X3v1 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be5dc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc86964d90>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>, <pydotplus.graphviz.Edge object at 0x7fcc83740390>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 491
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=491
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc85868f10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]22 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8734f090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92854cd0>])
set([('489', '491')])
[X3v4]22
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8734f090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92854cd0>])
set([('489', '491')])
[X3v4]22
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]22 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc806aae50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92303210>])
set([('490', '491')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>, <pydotplus.graphviz.Edge object at 0x7fcc88f480d0>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc806aae50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92303210>])
set([('490', '491')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>, <pydotplus.graphviz.Edge object at 0x7fcc88f480d0>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be5dc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc810cf7d0>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>, <pydotplus.graphviz.Edge object at 0x7fcc83740390>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('491', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 739
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=739
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82fee510>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v3]32 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc84f85610>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9198ed90>])
set([('737', '739')])
[X3v3]32
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>, <pydotplus.graphviz.Edge object at 0x7fcc88f480d0>, <pydotplus.graphviz.Edge object at 0x7fcc84139ed0>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('490', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc84f85610>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9198ed90>])
set([('737', '739')])
[X3v3]32
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>, <pydotplus.graphviz.Edge object at 0x7fcc88f480d0>, <pydotplus.graphviz.Edge object at 0x7fcc84139ed0>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('490', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v3]32 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86dd7a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc919a2d10>])
set([('738', '739')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>, <pydotplus.graphviz.Edge object at 0x7fcc88f480d0>, <pydotplus.graphviz.Edge object at 0x7fcc84139ed0>, <pydotplus.graphviz.Edge object at 0x7fcc84f85f50>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('298', '1507'), ('490', '1507'), ('1505', '1507'), ('489', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('737', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86dd7a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc919a2d10>])
set([('738', '739')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>, <pydotplus.graphviz.Edge object at 0x7fcc8fefd450>, <pydotplus.graphviz.Edge object at 0x7fcc8a14db90>, <pydotplus.graphviz.Edge object at 0x7fcc891cf1d0>, <pydotplus.graphviz.Edge object at 0x7fcc814b8550>, <pydotplus.graphviz.Edge object at 0x7fcc81c62090>, <pydotplus.graphviz.Edge object at 0x7fcc89386a10>, <pydotplus.graphviz.Edge object at 0x7fcc87eaa350>, <pydotplus.graphviz.Edge object at 0x7fcc88f480d0>, <pydotplus.graphviz.Edge object at 0x7fcc84139ed0>, <pydotplus.graphviz.Edge object at 0x7fcc84f85f50>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('298', '1507'), ('490', '1507'), ('1505', '1507'), ('489', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('737', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be5dc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>, <pydotplus.graphviz.Edge object at 0x7fcc83740390>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff20310>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= X1v2
vai collapsar X1v2 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bc82190>, <pydotplus.graphviz.Node object at 0x7fcc8bc461d0>]
labels = [X1v2]18
labels = [X1v2]18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X1v2]18 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bc461d0>]
n = [X1v2]18 name= 605
vai identificar n=[X1v2]18 e v=[X1v2]18
vai identificar n=645 e v=605
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X1v2]18 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc836e2b90>]
v ====> [X1v2]18 =18
n ======> [X1v2]18 =18
SAO IGUAIS
APAGANDO ARESTA [X1v2]18==> (X1v2 imp q) 18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 3 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be72690>, <pydotplus.graphviz.Node object at 0x7fcc8bd87ed0>, <pydotplus.graphviz.Node object at 0x7fcc8bd22e10>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bd87ed0>, <pydotplus.graphviz.Node object at 0x7fcc8bd22e10>]
n = (ORX4 imp q) name= 232
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1456 e v=232
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc820772d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc88538250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c8a910>])
set([('233', '232')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>]
Set([('1455', '1456'), ('1457', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc88538250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c8a910>])
set([('233', '232')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>]
Set([('1455', '1456'), ('1457', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8093e790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c3fdd0>])
set([('231', '232')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>]
Set([('1455', '1456'), ('1457', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8093e790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c3fdd0>])
set([('231', '232')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>]
Set([('1455', '1456'), ('1457', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be72690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9087fb10>])
set([('1456', '1463')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc908b37d0>, <pydotplus.graphviz.Edge object at 0x7fcc9087fb10>, <pydotplus.graphviz.Edge object at 0x7fcc84b6a510>, <pydotplus.graphviz.Edge object at 0x7fcc85708f90>, <pydotplus.graphviz.Edge object at 0x7fcc8a05a610>, <pydotplus.graphviz.Edge object at 0x7fcc841f0210>]
Set([('440', '1463'), ('238', '1463'), ('232', '1463'), ('446', '1463'), ('1462', '1463'), ('1456', '1463')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc9087fb10>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 440
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1456 e v=440
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8735fbd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83b6b9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92418c90>])
set([('441', '440')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>, <pydotplus.graphviz.Edge object at 0x7fcc8086d950>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83b6b9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92418c90>])
set([('441', '440')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>, <pydotplus.graphviz.Edge object at 0x7fcc8086d950>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8380d0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92420150>])
set([('439', '440')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>, <pydotplus.graphviz.Edge object at 0x7fcc8086d950>, <pydotplus.graphviz.Edge object at 0x7fcc8163e090>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456'), ('441', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8380d0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92420150>])
set([('439', '440')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>, <pydotplus.graphviz.Edge object at 0x7fcc8086d950>, <pydotplus.graphviz.Edge object at 0x7fcc8163e090>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456'), ('441', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be72690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9087fb10>])
set([('1456', '1463')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc908b37d0>, <pydotplus.graphviz.Edge object at 0x7fcc9087fb10>, <pydotplus.graphviz.Edge object at 0x7fcc84b6a510>, <pydotplus.graphviz.Edge object at 0x7fcc8a05a610>, <pydotplus.graphviz.Edge object at 0x7fcc841f0210>]
Set([('446', '1463'), ('1462', '1463'), ('1456', '1463'), ('238', '1463'), ('440', '1463')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc9087fb10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v2 imp (X4v5 imp q))
vai collapsar (X3v2 imp (X4v5 imp q)) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bd4af10>, <pydotplus.graphviz.Node object at 0x7fcc8bce6e10>]
labels = (X3v2 imp (X4v5 imp q))
labels = (X3v2 imp (X4v5 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp (X4v5 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bce6e10>]
n = (X3v2 imp (X4v5 imp q)) name= 1122
vai identificar n=(X3v2 imp (X4v5 imp q)) e v=(X3v2 imp (X4v5 imp q))
vai identificar n=174 e v=1122
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp (X4v5 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8873f890>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
vai collapsar (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bcbee10>, <pydotplus.graphviz.Node object at 0x7fcc8bca4990>]
labels = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
labels = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bca4990>]
n = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) name= 623
vai identificar n=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
vai identificar n=687 e v=623
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc856e5c50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) e v = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) n=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8177c250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91dc7fd0>])
set([('624', '623')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bd2e90>, <pydotplus.graphviz.Edge object at 0x7fcc91bda450>]
Set([('688', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8177c250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91dc7fd0>])
set([('624', '623')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bd2e90>, <pydotplus.graphviz.Edge object at 0x7fcc91bda450>]
Set([('688', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) para (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v1 imp q) 28 e v = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) n=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc85d69490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91dce490>])
set([('604', '623')])
(X4v1 imp q) 28
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bd2e90>, <pydotplus.graphviz.Edge object at 0x7fcc91bda450>, <pydotplus.graphviz.Edge object at 0x7fcc89fc3650>]
Set([('688', '687'), ('624', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc85d69490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91dce490>])
set([('604', '623')])
(X4v1 imp q) 28
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bd2e90>, <pydotplus.graphviz.Edge object at 0x7fcc91bda450>, <pydotplus.graphviz.Edge object at 0x7fcc89fc3650>]
Set([('688', '687'), ('624', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v1 imp q) 28 para (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
<pydotplus.graphviz.Node object at 0x7fcc8bcbee10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>])
set([('687', '686')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>, <pydotplus.graphviz.Edge object at 0x7fcc91bbfa90>, <pydotplus.graphviz.Edge object at 0x7fcc80f8ef10>]
Set([('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bb9610>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= ORX4
vai collapsar ORX4 3 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be00f90>, <pydotplus.graphviz.Node object at 0x7fcc8bd7a550>, <pydotplus.graphviz.Node object at 0x7fcc8bd2ac50>]
labels = ORX4
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bd7a550>, <pydotplus.graphviz.Node object at 0x7fcc8bd2ac50>]
n = ORX4 name= 238
vai identificar n=ORX4 e v=ORX4
vai identificar n=1462 e v=238
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc886521d0>]
n = ORX4 name= 446
vai identificar n=ORX4 e v=ORX4
vai identificar n=1462 e v=446
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc826fe950>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v2 imp q)
vai collapsar (X4v2 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bdb0bd0>, <pydotplus.graphviz.Node object at 0x7fcc8bcd2f90>]
labels = (X4v2 imp q)
labels = (X4v2 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bcd2f90>]
n = (X4v2 imp q) name= 1111
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=139 e v=1111
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82385850>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]49 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8601d210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90d52910>])
set([('1109', '1111')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc932c2110>, <pydotplus.graphviz.Edge object at 0x7fcc93027710>]
Set([('137', '139'), ('138', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8601d210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90d52910>])
set([('1109', '1111')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc932c2110>, <pydotplus.graphviz.Edge object at 0x7fcc93027710>]
Set([('137', '139'), ('138', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]49 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82ed98d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90d47f50>])
set([('1110', '1111')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc932c2110>, <pydotplus.graphviz.Edge object at 0x7fcc93027710>, <pydotplus.graphviz.Edge object at 0x7fcc84ed2450>]
Set([('137', '139'), ('138', '139'), ('1109', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82ed98d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90d47f50>])
set([('1110', '1111')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc932c2110>, <pydotplus.graphviz.Edge object at 0x7fcc93027710>, <pydotplus.graphviz.Edge object at 0x7fcc84ed2450>]
Set([('137', '139'), ('138', '139'), ('1109', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bdb0bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92d4c510>])
set([('139', '177')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92d46090>, <pydotplus.graphviz.Edge object at 0x7fcc92d4c510>, <pydotplus.graphviz.Edge object at 0x7fcc81d97390>]
Set([('139', '177'), ('1111', '177'), ('178', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92d4c510>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= X3v2
vai collapsar X3v2 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bd3e590>, <pydotplus.graphviz.Node object at 0x7fcc8bcccd10>]
labels = [X3v2]8
labels = [X3v2]49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X3v2]8 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bcccd10>]
n = [X3v2]49 name= 1121
vai identificar n=[X3v2]8 e v=[X3v2]49
vai identificar n=173 e v=1121
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X3v2]49 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89943e50>]
v ====> [X3v2]49 =49
n ======> [X3v2]8 =8
APAGANDO ARESTA [X3v2]49==> (X3v2 imp q) 8 49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v5 imp q)
vai collapsar (X3v5 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be8c850>, <pydotplus.graphviz.Node object at 0x7fcc8bdac450>]
labels = (X3v5 imp q)
labels = (X3v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bdac450>]
n = (X3v5 imp q) name= 1143
vai identificar n=(X3v5 imp q) e v=(X3v5 imp q)
vai identificar n=243 e v=1143
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8476b790>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X2v4]46 e v = (X3v5 imp q) n=(X3v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81d21150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b94c10>])
set([('1141', '1143')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7e090>, <pydotplus.graphviz.Edge object at 0x7fcc92bf1610>]
Set([('242', '243'), ('241', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81d21150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90b94c10>])
set([('1141', '1143')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7e090>, <pydotplus.graphviz.Edge object at 0x7fcc92bf1610>]
Set([('242', '243'), ('241', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X2v4]46 para (X3v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X2v4 imp (X3v5 imp q)) e v = (X3v5 imp q) n=(X3v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc88f030d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90ba25d0>])
set([('1142', '1143')])
(X2v4 imp (X3v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7e090>, <pydotplus.graphviz.Edge object at 0x7fcc92bf1610>, <pydotplus.graphviz.Edge object at 0x7fcc8615d950>]
Set([('242', '243'), ('241', '243'), ('1141', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc88f030d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90ba25d0>])
set([('1142', '1143')])
(X2v4 imp (X3v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7e090>, <pydotplus.graphviz.Edge object at 0x7fcc92bf1610>, <pydotplus.graphviz.Edge object at 0x7fcc8615d950>]
Set([('242', '243'), ('241', '243'), ('1141', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X2v4 imp (X3v5 imp q)) para (X3v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be8c850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b10190>])
set([('243', '248')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b16710>, <pydotplus.graphviz.Edge object at 0x7fcc92b10190>, <pydotplus.graphviz.Edge object at 0x7fcc87c14090>, <pydotplus.graphviz.Edge object at 0x7fcc81801550>]
Set([('249', '248'), ('1143', '248'), ('243', '248'), ('1149', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b10190>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
vai collapsar (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be6ae90>, <pydotplus.graphviz.Node object at 0x7fcc8bd758d0>]
labels = (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
labels = (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bd758d0>]
n = (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) name= 1149
vai identificar n=(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v=(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
vai identificar n=249 e v=1149
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8012bdd0>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X1v2 imp (X4v2 imp q))
vai collapsar (X1v2 imp (X4v2 imp q)) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bc8eb10>, <pydotplus.graphviz.Node object at 0x7fcc8bc53b50>]
labels = (X1v2 imp (X4v2 imp q))
labels = (X1v2 imp (X4v2 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X1v2 imp (X4v2 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bc53b50>]
n = (X1v2 imp (X4v2 imp q)) name= 606
vai identificar n=(X1v2 imp (X4v2 imp q)) e v=(X1v2 imp (X4v2 imp q))
vai identificar n=646 e v=606
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X1v2 imp (X4v2 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc841817d0>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v5 imp q) imp ((ORX4 imp q))
vai collapsar (X4v5 imp q) imp ((ORX4 imp q)) 6 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be62810>, <pydotplus.graphviz.Node object at 0x7fcc8be3dcd0>, <pydotplus.graphviz.Node object at 0x7fcc8bd80790>, <pydotplus.graphviz.Node object at 0x7fcc8bd16450>, <pydotplus.graphviz.Node object at 0x7fcc8bd162d0>, <pydotplus.graphviz.Node object at 0x7fcc8bcea610>]
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) imp ((ORX4 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8be3dcd0>, <pydotplus.graphviz.Node object at 0x7fcc8bd80790>, <pydotplus.graphviz.Node object at 0x7fcc8bd16450>, <pydotplus.graphviz.Node object at 0x7fcc8bd162d0>, <pydotplus.graphviz.Node object at 0x7fcc8bcea610>]
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 301
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=301
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8a342ed0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81acb1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92aa14d0>])
set([('302', '301')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>]
Set([('1510', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81acb1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92aa14d0>])
set([('302', '301')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>]
Set([('1510', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87005ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92aa5510>])
set([('263', '301')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>]
Set([('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87005ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92aa5510>])
set([('263', '301')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>]
Set([('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8be62810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc809e4950>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 825
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=825
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc81083690>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8d408f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91738690>])
set([('826', '825')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8d408f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91738690>])
set([('826', '825')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc84dd8fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91738750>])
set([('787', '825')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('826', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc84dd8fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91738750>])
set([('787', '825')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('826', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8be62810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc84f54b50>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>]
Set([('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 1073
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=1073
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc863e6310>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8171b050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9156df90>])
set([('1074', '1073')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8171b050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9156df90>])
set([('1074', '1073')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) 48 e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81b50390>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90fbc1d0>])
set([('1060', '1073')])
(X4v2 imp q) 48
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81b50390>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90fbc1d0>])
set([('1060', '1073')])
(X4v2 imp q) 48
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) 48 para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8be62810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc83ae1550>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>]
Set([('741', '1508'), ('1507', '1508'), ('1509', '1508'), ('1073', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 493
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=493
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8832d190>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81fba1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924ba390>])
set([('494', '493')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81fba1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924ba390>])
set([('494', '493')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc88928190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924cc510>])
set([('455', '493')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc88928190>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc924cc510>])
set([('455', '493')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8be62810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc87531710>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>]
Set([('741', '1508'), ('1509', '1508'), ('1507', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 741
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=741
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8687c890>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8d0e5d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91960590>])
set([('742', '741')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8d0e5d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91960590>])
set([('742', '741')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81269d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91966a10>])
set([('727', '741')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc8302bf50>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81269d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91966a10>])
set([('727', '741')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc8302bf50>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7fcc8be62810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>, <pydotplus.graphviz.Edge object at 0x7fcc8ff20310>, <pydotplus.graphviz.Edge object at 0x7fcc88932f10>]
Set([('741', '1508'), ('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ff17e50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= q
vai collapsar q 4 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be012d0>, <pydotplus.graphviz.Node object at 0x7fcc8bdb0410>, <pydotplus.graphviz.Node object at 0x7fcc8bd7ac10>, <pydotplus.graphviz.Node object at 0x7fcc8bcb8910>]
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bdb0410>, <pydotplus.graphviz.Node object at 0x7fcc8bd7ac10>, <pydotplus.graphviz.Node object at 0x7fcc8bcb8910>]
n = q name= 951
vai identificar n=q e v=q
vai identificar n=1219 e v=951
e_in_A.has_key(v.get_name())
False
name = 951
<pydotplus.graphviz.Edge object at 0x7fcc9120b950>
950
<pydotplus.graphviz.Node object at 0x7fcc7fa09d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9120b950>])
set([('950', '951')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>]
Set([('1212', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([])
name = 951
<pydotplus.graphviz.Edge object at 0x7fcc91212dd0>
944
<pydotplus.graphviz.Node object at 0x7fcc7f443150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91212dd0>])
set([('944', '951')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>, <pydotplus.graphviz.Edge object at 0x7fcc7ee46650>]
Set([('1212', '1219'), ('950', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8be012d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90972c10>])
set([('1219', '1220')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91226210>]
Set([('951', '952')])
(X3v1 imp q) 42
INtersecao ====================
Set([])
n = q name= 887
vai identificar n=q e v=q
vai identificar n=1219 e v=887
e_in_A.has_key(v.get_name())
False
name = 887
<pydotplus.graphviz.Edge object at 0x7fcc912e2150>
886
<pydotplus.graphviz.Node object at 0x7fcc8545c3d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc912e2150>])
set([('886', '887')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>, <pydotplus.graphviz.Edge object at 0x7fcc7ee46650>, <pydotplus.graphviz.Edge object at 0x7fcc7fa36cd0>]
Set([('1218', '1219'), ('1212', '1219'), ('950', '1219'), ('944', '1219')])
q
INtersecao ====================
Set([])
name = 887
<pydotplus.graphviz.Edge object at 0x7fcc912e85d0>
880
<pydotplus.graphviz.Node object at 0x7fcc877d2910>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc912e85d0>])
set([('880', '887')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>, <pydotplus.graphviz.Edge object at 0x7fcc7ee46650>, <pydotplus.graphviz.Edge object at 0x7fcc7fa36cd0>, <pydotplus.graphviz.Edge object at 0x7fcc8545c490>]
Set([('1218', '1219'), ('1212', '1219'), ('950', '1219'), ('944', '1219'), ('886', '1219')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8be012d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90972c10>, <pydotplus.graphviz.Edge object at 0x7fcc89610690>])
set([('1219', '1220'), ('1219', '952')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9127b9d0>]
Set([('887', '888')])
(X3v4 imp q) 39
INtersecao ====================
Set([])
n = q name= 555
vai identificar n=q e v=q
vai identificar n=1219 e v=555
e_in_A.has_key(v.get_name())
False
name = 555
<pydotplus.graphviz.Edge object at 0x7fcc92284f90>
554
<pydotplus.graphviz.Node object at 0x7fcc81854a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92284f90>])
set([('554', '555')])
ORX5
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>, <pydotplus.graphviz.Edge object at 0x7fcc7ee46650>, <pydotplus.graphviz.Edge object at 0x7fcc7fa36cd0>, <pydotplus.graphviz.Edge object at 0x7fcc8545c490>, <pydotplus.graphviz.Edge object at 0x7fcc84654190>]
Set([('1218', '1219'), ('886', '1219'), ('880', '1219'), ('1212', '1219'), ('950', '1219'), ('944', '1219')])
q
INtersecao ====================
Set([])
name = 555
<pydotplus.graphviz.Edge object at 0x7fcc92290490>
548
<pydotplus.graphviz.Node object at 0x7fcc8314ba90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92290490>])
set([('548', '555')])
(ORX5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>, <pydotplus.graphviz.Edge object at 0x7fcc7ee46650>, <pydotplus.graphviz.Edge object at 0x7fcc7fa36cd0>, <pydotplus.graphviz.Edge object at 0x7fcc8545c490>, <pydotplus.graphviz.Edge object at 0x7fcc84654190>, <pydotplus.graphviz.Edge object at 0x7fcc81854e10>]
Set([('944', '1219'), ('886', '1219'), ('880', '1219'), ('554', '1219'), ('1212', '1219'), ('950', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8be012d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90972c10>, <pydotplus.graphviz.Edge object at 0x7fcc879810d0>, <pydotplus.graphviz.Edge object at 0x7fcc89610690>])
set([('1219', '1220'), ('1219', '888'), ('1219', '952')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc921ab5d0>]
Set([('555', '556')])
(X4v4 imp q) 26
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v3 imp q)
vai collapsar (X3v3 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8be0ac90>, <pydotplus.graphviz.Node object at 0x7fcc8bd80910>]
labels = (X3v3 imp q)
labels = (X3v3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bd80910>]
n = (X3v3 imp q) name= 835
vai identificar n=(X3v3 imp q) e v=(X3v3 imp q)
vai identificar n=1519 e v=835
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8a2dacd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v3]35 e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82a39810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e37890>])
set([('833', '835')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6ea90>, <pydotplus.graphviz.Edge object at 0x7fcc8fdfd450>]
Set([('1518', '1519'), ('1517', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82a39810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91e37890>])
set([('833', '835')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6ea90>, <pydotplus.graphviz.Edge object at 0x7fcc8fdfd450>]
Set([('1518', '1519'), ('1517', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v3]35 para (X3v3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v3 imp (X3v3 imp q)) e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8968d090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc915b3390>])
set([('834', '835')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6ea90>, <pydotplus.graphviz.Edge object at 0x7fcc8fdfd450>, <pydotplus.graphviz.Edge object at 0x7fcc83133090>]
Set([('1518', '1519'), ('1517', '1519'), ('833', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8968d090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc915b3390>])
set([('834', '835')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe6ea90>, <pydotplus.graphviz.Edge object at 0x7fcc8fdfd450>, <pydotplus.graphviz.Edge object at 0x7fcc83133090>]
Set([('1518', '1519'), ('1517', '1519'), ('833', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v3 imp (X3v3 imp q)) para (X3v3 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8be0ac90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>])
set([('1519', '1531')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fdf5190>, <pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>, <pydotplus.graphviz.Edge object at 0x7fcc7f446150>, <pydotplus.graphviz.Edge object at 0x7fcc813c2ad0>]
Set([('1532', '1531'), ('835', '1531'), ('1519', '1531'), ('360', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fdf2750>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 16
gravando dot file
nivel 17
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v1 imp (X3v1 imp q))', '(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))', 'X3v1 imp q', '(X4v1 imp q)', 'X3v4 imp q', 'X4v2 imp q', '(X3v4 imp (X4v5 imp q))', '(X2v2 imp (X3v2 imp q))', 'X1v3', 'q', 'X1v1', '(X3v4 imp q)', '(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))))', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X4v4 imp q)', '(X1v3 imp (X3v3 imp q))', '(X3v4 imp (X4v4 imp q))', 'X2v4', '(X2v4 imp (X4v4 imp q))', '(X3v1 imp (X4v5 imp q))', 'X2v1', 'X2v2', 'X2v3', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v3 imp q)', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(X3v1 imp (X4v1 imp q))', '(ORX4 imp q)', 'X4v1 imp q', '(X2v3 imp (X3v3 imp q))', '(X2v4 imp (X3v5 imp q))', '(X3v2 imp (X4v5 imp q))', '(X2v3 imp (X3v5 imp q))', 'ORX5', 'ORX4', '(X4v2 imp q)', 'X3v3', 'X3v2', '(X3v5 imp q)', 'X3v4', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', 'X4v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v2 imp (X4v2 imp q))', '(X3v3 imp q)', '(X2v1 imp (X3v1 imp q))', '(ORX5 imp q)', '(X3v3 imp (X4v5 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))']
REPEATED_FORMULAS =====> 
['(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))', 'q', 'X2v4', 'X2v3', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(ORX4 imp q)', '(X3v2 imp (X4v5 imp q))', 'ORX4', '(X4v2 imp q)', 'X3v2', '(X3v5 imp q)', 'X3v4', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v2 imp (X4v2 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))']
==========
nivel da formula que repete= 17
formula que repete= (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
vai collapsar (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8b9bd290>, <pydotplus.graphviz.Node object at 0x7fcc8b9f8dd0>]
labels = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
labels = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8b9f8dd0>]
n = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) name= 624
vai identificar n=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) e v=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
vai identificar n=688 e v=624
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8355c210>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))) e v = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) n=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc836d44d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91de6e10>])
set([('625', '624')])
(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bf2d90>, <pydotplus.graphviz.Edge object at 0x7fcc91bf2650>]
Set([('689', '688'), ('676', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc836d44d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91de6e10>])
set([('625', '624')])
(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bf2d90>, <pydotplus.graphviz.Edge object at 0x7fcc91bf2650>]
Set([('689', '688'), ('676', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))) para (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v3 imp q) e v = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) n=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87ad3950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91de0890>])
set([('611', '624')])
(X4v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bf2d90>, <pydotplus.graphviz.Edge object at 0x7fcc91bf2650>, <pydotplus.graphviz.Edge object at 0x7fcc81524210>]
Set([('689', '688'), ('676', '688'), ('625', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87ad3950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91de0890>])
set([('611', '624')])
(X4v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bf2d90>, <pydotplus.graphviz.Edge object at 0x7fcc91bf2650>, <pydotplus.graphviz.Edge object at 0x7fcc81524210>]
Set([('689', '688'), ('676', '688'), ('625', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v3 imp q) para (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
<pydotplus.graphviz.Node object at 0x7fcc8b9bd290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bd2e90>])
set([('688', '687')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91bd2e90>, <pydotplus.graphviz.Edge object at 0x7fcc91bda450>, <pydotplus.graphviz.Edge object at 0x7fcc89fc3650>, <pydotplus.graphviz.Edge object at 0x7fcc84a45a50>]
Set([('604', '687'), ('688', '687'), ('624', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bd2e90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= q
vai collapsar q 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bb05490>, <pydotplus.graphviz.Node object at 0x7fcc8baf21d0>]
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8baf21d0>]
n = q name= 1011
vai identificar n=q e v=q
vai identificar n=359 e v=1011
e_in_A.has_key(v.get_name())
False
name = 1011
<pydotplus.graphviz.Edge object at 0x7fcc90f34ad0>
1010
<pydotplus.graphviz.Node object at 0x7fcc8385c1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90f34ad0>])
set([('1010', '1011')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc926cc190>, <pydotplus.graphviz.Edge object at 0x7fcc926d2610>]
Set([('352', '359'), ('358', '359')])
q
INtersecao ====================
Set([])
name = 1011
<pydotplus.graphviz.Edge object at 0x7fcc90ebaf50>
1004
<pydotplus.graphviz.Node object at 0x7fcc86f9cfd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc90ebaf50>])
set([('1004', '1011')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc926cc190>, <pydotplus.graphviz.Edge object at 0x7fcc926d2610>, <pydotplus.graphviz.Edge object at 0x7fcc884e8990>]
Set([('352', '359'), ('358', '359'), ('1010', '359')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8bb05490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc926dc850>])
set([('359', '360')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90ed1390>]
Set([('1011', '1012')])
(X3v4 imp q) 44
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X2v4
vai collapsar X2v4 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bad5890>, <pydotplus.graphviz.Node object at 0x7fcc8b9d85d0>]
labels = [X2v4]46
labels = [X2v4]29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X2v4]46 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8b9d85d0>]
n = [X2v4]29 name= 677
vai identificar n=[X2v4]46 e v=[X2v4]29
vai identificar n=1141 e v=677
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X2v4]29 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc87e52750>]
<pydotplus.graphviz.Node object at 0x7fcc8bad5890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8615d950>])
set([('1141', '243')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91e48bd0>, <pydotplus.graphviz.Edge object at 0x7fcc9219ea90>, <pydotplus.graphviz.Edge object at 0x7fcc838aa390>, <pydotplus.graphviz.Edge object at 0x7fcc83c02e90>]
Set([('678', '679'), ('613', '679'), ('614', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
v ====> [X2v4]29 =29
n ======> [X2v4]46 =46
APAGANDO ARESTA [X2v4]29==> (X2v4 imp q) 29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X2v3
vai collapsar X2v3 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bbf4f50>, <pydotplus.graphviz.Node object at 0x7fcc8bb5c810>]
labels = [X2v3]63
labels = [X2v3]7
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X2v3]63 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bb5c810>]
n = [X2v3]7 name= 241
vai identificar n=[X2v3]63 e v=[X2v3]7
vai identificar n=1517 e v=241
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X2v3]7 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89e58510>]
<pydotplus.graphviz.Node object at 0x7fcc8bbf4f50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe6ea90>])
set([('1517', '1519')])
[X2v3]63
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc92b7e090>, <pydotplus.graphviz.Edge object at 0x7fcc92bf1610>, <pydotplus.graphviz.Edge object at 0x7fcc8615d950>, <pydotplus.graphviz.Edge object at 0x7fcc80993550>]
Set([('1142', '243'), ('242', '243'), ('241', '243'), ('1141', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
v ====> [X2v3]7 =7
n ======> [X2v3]63 =63
APAGANDO ARESTA [X2v3]7==> (X2v3 imp q) 7
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X3v1
vai collapsar X3v1 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8ba42b90>, <pydotplus.graphviz.Node object at 0x7fcc8b9a1690>]
labels = [X3v1]47
labels = [X3v1]25
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X3v1]47 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8b9a1690>]
n = [X3v1]25 name= 517
vai identificar n=[X3v1]47 e v=[X3v1]25
vai identificar n=1069 e v=517
e_in_A.has_key(v.get_name())
False
<pydotplus.graphviz.Node object at 0x7fcc8ba42b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc89386a10>])
set([('1069', '1507')])
[X3v1]47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc920883d0>, <pydotplus.graphviz.Edge object at 0x7fcc92049e10>]
Set([('518', '519'), ('517', '519')])
(X4v1 imp q)
INtersecao ====================
Set([])
v ====> [X3v1]25 =25
n ======> [X3v1]47 =47
APAGANDO ARESTA [X3v1]25==> (X3v1 imp q) 25
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai collapsar (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bbd7d90>, <pydotplus.graphviz.Node object at 0x7fcc8bbd18d0>]
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bbd18d0>]
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 123
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=1283 e v=123
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8709bb90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86a98f50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92eee510>])
set([('124', '123')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9068d150>, <pydotplus.graphviz.Edge object at 0x7fcc906935d0>]
Set([('1272', '1283'), ('1284', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86a98f50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92eee510>])
set([('124', '123')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9068d150>, <pydotplus.graphviz.Edge object at 0x7fcc906935d0>]
Set([('1272', '1283'), ('1284', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) 3 e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f51e110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ec69d0>])
set([('64', '123')])
(X3v3 imp q) 3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9068d150>, <pydotplus.graphviz.Edge object at 0x7fcc906935d0>, <pydotplus.graphviz.Edge object at 0x7fcc7f1aa250>]
Set([('1272', '1283'), ('1284', '1283'), ('124', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f51e110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92ec69d0>])
set([('64', '123')])
(X3v3 imp q) 3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9068d150>, <pydotplus.graphviz.Edge object at 0x7fcc906935d0>, <pydotplus.graphviz.Edge object at 0x7fcc7f1aa250>]
Set([('1272', '1283'), ('1284', '1283'), ('124', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) 3 para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7fcc8bbd7d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc906f17d0>])
set([('1283', '1282')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc906f17d0>, <pydotplus.graphviz.Edge object at 0x7fcc906eb2d0>, <pydotplus.graphviz.Edge object at 0x7fcc88646990>, <pydotplus.graphviz.Edge object at 0x7fcc88f6f0d0>]
Set([('123', '1282'), ('1275', '1282'), ('1283', '1282'), ('116', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc906f17d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai collapsar (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) 6 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bc7ca10>, <pydotplus.graphviz.Node object at 0x7fcc8bb1a310>, <pydotplus.graphviz.Node object at 0x7fcc8ba7fcd0>, <pydotplus.graphviz.Node object at 0x7fcc8bab6390>, <pydotplus.graphviz.Node object at 0x7fcc8ba05650>, <pydotplus.graphviz.Node object at 0x7fcc8ba6b490>]
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bb1a310>, <pydotplus.graphviz.Node object at 0x7fcc8ba7fcd0>, <pydotplus.graphviz.Node object at 0x7fcc8bab6390>, <pydotplus.graphviz.Node object at 0x7fcc8ba05650>, <pydotplus.graphviz.Node object at 0x7fcc8ba6b490>]
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 302
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=302
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc87a334d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc861405d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9297c290>])
set([('303', '302')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>]
Set([('1511', '1510'), ('1503', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc861405d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9297c290>])
set([('303', '302')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>]
Set([('1511', '1510'), ('1503', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc85b3f810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92aa2750>])
set([('295', '302')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc85b3f810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92aa2750>])
set([('295', '302')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8bc7ca10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc87dc39d0>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc8302bf50>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 826
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=826
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc83a72b50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc88107b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91614dd0>])
set([('827', '826')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc88107b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91614dd0>])
set([('827', '826')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) 38 e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc84736890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91616110>])
set([('820', '826')])
(X4v4 imp q) 38
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>]
Set([('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc84736890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91616110>])
set([('820', '826')])
(X4v4 imp q) 38
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>]
Set([('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) 38 para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8bc7ca10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc82d99650>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc8302bf50>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('1074', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 1074
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=1074
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82b75a90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc893cd590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91563510>])
set([('1075', '1074')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc893cd590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91563510>])
set([('1075', '1074')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f67fb50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91563e10>])
set([('1067', '1074')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f67fb50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91563e10>])
set([('1067', '1074')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8bc7ca10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc889b9210>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc8302bf50>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1060', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('1074', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 494
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=494
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc88fb4a50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc800d8a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9234e9d0>])
set([('495', '494')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc800d8a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9234e9d0>])
set([('495', '494')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86265390>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9235c050>])
set([('487', '494')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>, <pydotplus.graphviz.Edge object at 0x7fcc87b43c50>]
Set([('495', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86265390>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9235c050>])
set([('487', '494')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>, <pydotplus.graphviz.Edge object at 0x7fcc87b43c50>]
Set([('495', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8bc7ca10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc8d253550>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc8302bf50>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1060', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 742
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=742
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc82529a50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc896bd250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc918faed0>])
set([('743', '742')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>, <pydotplus.graphviz.Edge object at 0x7fcc87b43c50>, <pydotplus.graphviz.Edge object at 0x7fcc84d79f50>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc896bd250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc918faed0>])
set([('743', '742')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>, <pydotplus.graphviz.Edge object at 0x7fcc87b43c50>, <pydotplus.graphviz.Edge object at 0x7fcc84d79f50>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc7f5eb450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91902390>])
set([('735', '742')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>, <pydotplus.graphviz.Edge object at 0x7fcc87b43c50>, <pydotplus.graphviz.Edge object at 0x7fcc84d79f50>, <pydotplus.graphviz.Edge object at 0x7fcc86265a90>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('743', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc7f5eb450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91902390>])
set([('735', '742')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8ffb6e10>, <pydotplus.graphviz.Edge object at 0x7fcc8fecb950>, <pydotplus.graphviz.Edge object at 0x7fcc873a1d90>, <pydotplus.graphviz.Edge object at 0x7fcc87015b50>, <pydotplus.graphviz.Edge object at 0x7fcc85fa8190>, <pydotplus.graphviz.Edge object at 0x7fcc84331910>, <pydotplus.graphviz.Edge object at 0x7fcc882602d0>, <pydotplus.graphviz.Edge object at 0x7fcc84e65490>, <pydotplus.graphviz.Edge object at 0x7fcc87b43c50>, <pydotplus.graphviz.Edge object at 0x7fcc84d79f50>, <pydotplus.graphviz.Edge object at 0x7fcc86265a90>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('743', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7fcc8bc7ca10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc8302bf50>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1060', '1509'), ('1495', '1509'), ('455', '1509'), ('263', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bc318d0>, <pydotplus.graphviz.Node object at 0x7fcc8bb057d0>, <pydotplus.graphviz.Node object at 0x7fcc8ba0ed50>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bb057d0>, <pydotplus.graphviz.Node object at 0x7fcc8ba0ed50>]
n = (X4v5 imp q) name= 231
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1455 e v=231
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc860dbdd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]10 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8383b210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9343ded0>])
set([('229', '231')])
[X3v4]10
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>]
Set([('1454', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8383b210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9343ded0>])
set([('229', '231')])
[X3v4]10
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>]
Set([('1454', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]10 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc81afbc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c57290>])
set([('230', '231')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>, <pydotplus.graphviz.Edge object at 0x7fcc7f04e810>]
Set([('1454', '1455'), ('229', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc81afbc90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92c57290>])
set([('230', '231')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>, <pydotplus.graphviz.Edge object at 0x7fcc7f04e810>]
Set([('1454', '1455'), ('229', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bc318d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc908bcc10>])
set([('1455', '1456')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>, <pydotplus.graphviz.Edge object at 0x7fcc8086d950>, <pydotplus.graphviz.Edge object at 0x7fcc8163e090>, <pydotplus.graphviz.Edge object at 0x7fcc88b58a10>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456'), ('441', '1456'), ('439', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc908bcc10>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 439
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1455 e v=439
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc80c45210>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v3]20 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86e2d4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc928d5e50>])
set([('437', '439')])
[X3v3]20
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>, <pydotplus.graphviz.Edge object at 0x7fcc7f04e810>, <pydotplus.graphviz.Edge object at 0x7fcc7f8a3dd0>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86e2d4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc928d5e50>])
set([('437', '439')])
[X3v3]20
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>, <pydotplus.graphviz.Edge object at 0x7fcc7f04e810>, <pydotplus.graphviz.Edge object at 0x7fcc7f8a3dd0>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v3]20 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8055e890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc923fd290>])
set([('438', '439')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>, <pydotplus.graphviz.Edge object at 0x7fcc7f04e810>, <pydotplus.graphviz.Edge object at 0x7fcc7f8a3dd0>, <pydotplus.graphviz.Edge object at 0x7fcc80cd7190>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('437', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8055e890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc923fd290>])
set([('438', '439')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90fa8f10>, <pydotplus.graphviz.Edge object at 0x7fcc8ffd6750>, <pydotplus.graphviz.Edge object at 0x7fcc7f04e810>, <pydotplus.graphviz.Edge object at 0x7fcc7f8a3dd0>, <pydotplus.graphviz.Edge object at 0x7fcc80cd7190>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('437', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bc318d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc908bcc10>])
set([('1455', '1456')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc91484f90>, <pydotplus.graphviz.Edge object at 0x7fcc908bcc10>, <pydotplus.graphviz.Edge object at 0x7fcc868a2b90>, <pydotplus.graphviz.Edge object at 0x7fcc8163e090>, <pydotplus.graphviz.Edge object at 0x7fcc88b58a10>]
Set([('1455', '1456'), ('1457', '1456'), ('233', '1456'), ('439', '1456'), ('441', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc908bcc10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bb8a610>, <pydotplus.graphviz.Node object at 0x7fcc8ba8d510>, <pydotplus.graphviz.Node object at 0x7fcc8baf2e50>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8ba8d510>, <pydotplus.graphviz.Node object at 0x7fcc8baf2e50>]
n = (ORX4 imp q) name= 944
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1212 e v=944
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc802a6710>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc874adad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9178be50>])
set([('945', '944')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>]
Set([('1211', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc874adad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9178be50>])
set([('945', '944')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>]
Set([('1211', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc86e99b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc917823d0>])
set([('943', '944')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>, <pydotplus.graphviz.Edge object at 0x7fcc82810550>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc86e99b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc917823d0>])
set([('943', '944')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>, <pydotplus.graphviz.Edge object at 0x7fcc82810550>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bb8a610>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc909b45d0>])
set([('1212', '1219')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>, <pydotplus.graphviz.Edge object at 0x7fcc7ee46650>, <pydotplus.graphviz.Edge object at 0x7fcc7fa36cd0>, <pydotplus.graphviz.Edge object at 0x7fcc8545c490>, <pydotplus.graphviz.Edge object at 0x7fcc84654190>, <pydotplus.graphviz.Edge object at 0x7fcc81854e10>, <pydotplus.graphviz.Edge object at 0x7fcc88b29cd0>]
Set([('944', '1219'), ('886', '1219'), ('880', '1219'), ('554', '1219'), ('1212', '1219'), ('950', '1219'), ('548', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc909b45d0>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 880
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1212 e v=880
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc840a2590>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82f3e510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc913af550>])
set([('881', '880')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>, <pydotplus.graphviz.Edge object at 0x7fcc82810550>, <pydotplus.graphviz.Edge object at 0x7fcc8993e090>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82f3e510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc913af550>])
set([('881', '880')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>, <pydotplus.graphviz.Edge object at 0x7fcc82810550>, <pydotplus.graphviz.Edge object at 0x7fcc8993e090>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc886b44d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9138c550>])
set([('879', '880')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>, <pydotplus.graphviz.Edge object at 0x7fcc82810550>, <pydotplus.graphviz.Edge object at 0x7fcc8993e090>, <pydotplus.graphviz.Edge object at 0x7fcc83e48a90>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212'), ('881', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc886b44d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9138c550>])
set([('879', '880')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc9073e110>, <pydotplus.graphviz.Edge object at 0x7fcc90745590>, <pydotplus.graphviz.Edge object at 0x7fcc82810550>, <pydotplus.graphviz.Edge object at 0x7fcc8993e090>, <pydotplus.graphviz.Edge object at 0x7fcc83e48a90>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212'), ('881', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bb8a610>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc909b45d0>])
set([('1212', '1219')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc90935050>, <pydotplus.graphviz.Edge object at 0x7fcc909b45d0>, <pydotplus.graphviz.Edge object at 0x7fcc7ee46650>, <pydotplus.graphviz.Edge object at 0x7fcc8545c490>, <pydotplus.graphviz.Edge object at 0x7fcc84654190>, <pydotplus.graphviz.Edge object at 0x7fcc81854e10>, <pydotplus.graphviz.Edge object at 0x7fcc88b29cd0>]
Set([('1218', '1219'), ('886', '1219'), ('880', '1219'), ('1212', '1219'), ('554', '1219'), ('548', '1219'), ('950', '1219')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc909b45d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X3v2 imp (X4v5 imp q))
vai collapsar (X3v2 imp (X4v5 imp q)) 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bca5c10>, <pydotplus.graphviz.Node object at 0x7fcc8bb6a850>, <pydotplus.graphviz.Node object at 0x7fcc8ba93510>]
labels = (X3v2 imp (X4v5 imp q))
labels = (X3v2 imp (X4v5 imp q))
labels = (X3v2 imp (X4v5 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp (X4v5 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bb6a850>, <pydotplus.graphviz.Node object at 0x7fcc8ba93510>]
n = (X3v2 imp (X4v5 imp q)) name= 298
vai identificar n=(X3v2 imp (X4v5 imp q)) e v=(X3v2 imp (X4v5 imp q))
vai identificar n=1506 e v=298
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp (X4v5 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc7f30f9d0>]
n = (X3v2 imp (X4v5 imp q)) name= 822
vai identificar n=(X3v2 imp (X4v5 imp q)) e v=(X3v2 imp (X4v5 imp q))
vai identificar n=1506 e v=822
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp (X4v5 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc7f1a63d0>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= ORX4
vai collapsar ORX4 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bb48910>, <pydotplus.graphviz.Node object at 0x7fcc8ba7fb50>, <pydotplus.graphviz.Node object at 0x7fcc8ba84990>]
labels = ORX4
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8ba7fb50>, <pydotplus.graphviz.Node object at 0x7fcc8ba84990>]
n = ORX4 name= 950
vai identificar n=ORX4 e v=ORX4
vai identificar n=1218 e v=950
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc86af4650>]
n = ORX4 name= 886
vai identificar n=ORX4 e v=ORX4
vai identificar n=1218 e v=886
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc8198d210>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X4v2 imp q)
vai collapsar (X4v2 imp q) 5 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bca4350>, <pydotplus.graphviz.Node object at 0x7fcc8bb05fd0>, <pydotplus.graphviz.Node object at 0x7fcc8bae8b50>, <pydotplus.graphviz.Node object at 0x7fcc8ba76490>, <pydotplus.graphviz.Node object at 0x7fcc8ba614d0>]
labels = (X4v2 imp q)
labels = (X4v2 imp q)
labels = (X4v2 imp q)
labels = (X4v2 imp q)
labels = (X4v2 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bb05fd0>, <pydotplus.graphviz.Node object at 0x7fcc8bae8b50>, <pydotplus.graphviz.Node object at 0x7fcc8ba76490>, <pydotplus.graphviz.Node object at 0x7fcc8ba614d0>]
n = (X4v2 imp q) name= 263
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=263
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc809d9c50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]13 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83302790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b5bb10>])
set([('261', '263')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>]
Set([('1494', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83302790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc92b5bb10>])
set([('261', '263')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>]
Set([('1494', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]13 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8713e850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc929bb1d0>])
set([('262', '263')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>]
Set([('1494', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8713e850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc929bb1d0>])
set([('262', '263')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>]
Set([('1494', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bca4350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc81788c10>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1060', '1509'), ('1495', '1509'), ('455', '1509'), ('263', '1509'), ('727', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
delete in_edge_Ancestor
n = (X4v2 imp q) name= 787
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=787
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc85e87f10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]37 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc83416750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9175ca10>])
set([('785', '787')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc83416750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc9175ca10>])
set([('785', '787')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]37 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc8951d0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91f52d90>])
set([('786', '787')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495'), ('785', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc8951d0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91f52d90>])
set([('786', '787')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495'), ('785', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bca4350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc84ca8d90>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1060', '1509'), ('1495', '1509'), ('455', '1509'), ('727', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
delete in_edge_Ancestor
n = (X4v2 imp q) name= 455
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=455
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc882db610>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v2]18 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc82ad0cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc922a4050>])
set([('453', '455')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc82ad0cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc922a4050>])
set([('453', '455')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v2]18 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc826e16d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc922b6f90>])
set([('454', '455')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>, <pydotplus.graphviz.Edge object at 0x7fcc81c292d0>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc826e16d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc922b6f90>])
set([('454', '455')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>, <pydotplus.graphviz.Edge object at 0x7fcc81c292d0>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bca4350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc88928910>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1510', '1509'), ('1060', '1509'), ('455', '1509'), ('727', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
delete in_edge_Ancestor
n = (X4v2 imp q) name= 727
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=727
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89378a50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v2]18 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc884bc210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bb1f90>])
set([('725', '727')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>, <pydotplus.graphviz.Edge object at 0x7fcc81c292d0>, <pydotplus.graphviz.Edge object at 0x7fcc83f102d0>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc884bc210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc91bb1f90>])
set([('725', '727')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>, <pydotplus.graphviz.Edge object at 0x7fcc81c292d0>, <pydotplus.graphviz.Edge object at 0x7fcc83f102d0>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v2]18 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7fcc87744bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc919f4790>])
set([('726', '727')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>, <pydotplus.graphviz.Edge object at 0x7fcc81c292d0>, <pydotplus.graphviz.Edge object at 0x7fcc83f102d0>, <pydotplus.graphviz.Edge object at 0x7fcc80d01c90>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495'), ('725', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7fcc87744bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc919f4790>])
set([('726', '727')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc905a9e50>, <pydotplus.graphviz.Edge object at 0x7fcc8fef8990>, <pydotplus.graphviz.Edge object at 0x7fcc7f39cad0>, <pydotplus.graphviz.Edge object at 0x7fcc7f38fd50>, <pydotplus.graphviz.Edge object at 0x7fcc806ab0d0>, <pydotplus.graphviz.Edge object at 0x7fcc8017f750>, <pydotplus.graphviz.Edge object at 0x7fcc81c292d0>, <pydotplus.graphviz.Edge object at 0x7fcc83f102d0>, <pydotplus.graphviz.Edge object at 0x7fcc80d01c90>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495'), ('725', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7fcc8bca4350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc8fe79c90>, <pydotplus.graphviz.Edge object at 0x7fcc8fe82150>, <pydotplus.graphviz.Edge object at 0x7fcc808a5310>, <pydotplus.graphviz.Edge object at 0x7fcc84822250>]
Set([('1510', '1509'), ('1060', '1509'), ('727', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7fcc8fe82150>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X3v2
vai collapsar X3v2 5 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7fcc8bd6dd10>, <pydotplus.graphviz.Node object at 0x7fcc8bafdc50>, <pydotplus.graphviz.Node object at 0x7fcc8bb35650>, <pydotplus.graphviz.Node object at 0x7fcc8bae94d0>, <pydotplus.graphviz.Node object at 0x7fcc8ba00710>]
labels = [X3v2]66
labels = [X3v2]13
labels = [X3v2]8
labels = [X3v2]37
labels = [X3v2]49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X3v2]66 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7fcc8bafdc50>, <pydotplus.graphviz.Node object at 0x7fcc8bb35650>, <pydotplus.graphviz.Node object at 0x7fcc8bae94d0>, <pydotplus.graphviz.Node object at 0x7fcc8ba00710>]
n = [X3v2]13 name= 297
vai identificar n=[X3v2]66 e v=[X3v2]13
vai identificar n=1505 e v=297
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X3v2]13 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc89f1d5d0>]
v ====> [X3v2]13 =13
n ======> [X3v2]66 =66
APAGANDO ARESTA [X3v2]13==> (X3v2 imp q) 66 13 37
n = [X3v2]8 name= 137
vai identificar n=[X3v2]6613 e v=[X3v2]8
vai identificar n=1505 e v=137
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X3v2]8 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7fcc81327a90>]
<pydotplus.graphviz.Node object at 0x7fcc8bd6dd10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7fcc8ffa08d0>])
set([('1505', '1507')])
[X3v2]6613
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7fcc932c2110>, <pydotplus.graphviz.Edge object at 0x7fcc93027710>, <pydotplus.graphviz.Edge object at 0x7fcc84ed2450>, <pydotplus.graphviz.Edge object at 0x7fcc8601d3d0>]
Set([('1110', '139'), ('137', '139'), ('138', '139'), ('1109', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
v ====> [X3v2]8 =8
n ======> [X3v2]6613 =6613
