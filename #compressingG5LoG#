Grafo com 1652n√≥s
{'56': [<pydotplus.graphviz.Node object at 0x7f708d4139d0>, <pydotplus.graphviz.Node object at 0x7f708cf69cd0>, <pydotplus.graphviz.Node object at 0x7f708f870fd0>], '28': [<pydotplus.graphviz.Node object at 0x7f708f7943d0>, <pydotplus.graphviz.Node object at 0x7f708f25c8d0>], '22': [<pydotplus.graphviz.Node object at 0x7f7090331e90>, <pydotplus.graphviz.Node object at 0x7f709031f810>, <pydotplus.graphviz.Node object at 0x7f708f1f3310>], '29': [<pydotplus.graphviz.Node object at 0x7f70905ceed0>, <pydotplus.graphviz.Node object at 0x7f70901ab250>, <pydotplus.graphviz.Node object at 0x7f708fa17e10>, <pydotplus.graphviz.Node object at 0x7f708f7c8e90>, <pydotplus.graphviz.Node object at 0x7f708f4d9e50>, <pydotplus.graphviz.Node object at 0x7f708f23bc50>], '60': [<pydotplus.graphviz.Node object at 0x7f7090097b10>, <pydotplus.graphviz.Node object at 0x7f708fcded10>], '61': [<pydotplus.graphviz.Node object at 0x7f708d7d2c90>, <pydotplus.graphviz.Node object at 0x7f708d542450>, <pydotplus.graphviz.Node object at 0x7f708f1f87d0>], '62': [<pydotplus.graphviz.Node object at 0x7f708f4042d0>, <pydotplus.graphviz.Node object at 0x7f708ed11f50>], '63': [<pydotplus.graphviz.Node object at 0x7f708d116fd0>, <pydotplus.graphviz.Node object at 0x7f708d0bf890>, <pydotplus.graphviz.Node object at 0x7f709024a210>, <pydotplus.graphviz.Node object at 0x7f70900e1490>, <pydotplus.graphviz.Node object at 0x7f708f20ca90>, <pydotplus.graphviz.Node object at 0x7f708f14b1d0>], '64': [<pydotplus.graphviz.Node object at 0x7f70904786d0>, <pydotplus.graphviz.Node object at 0x7f708f9e3350>, <pydotplus.graphviz.Node object at 0x7f708f9f71d0>], '35': [<pydotplus.graphviz.Node object at 0x7f708d372910>, <pydotplus.graphviz.Node object at 0x7f708d2df650>, <pydotplus.graphviz.Node object at 0x7f708ccd1410>, <pydotplus.graphviz.Node object at 0x7f708cb09d90>, <pydotplus.graphviz.Node object at 0x7f708cb37f50>, <pydotplus.graphviz.Node object at 0x7f708ca9d7d0>, <pydotplus.graphviz.Node object at 0x7f7090641490>, <pydotplus.graphviz.Node object at 0x7f7090e45a90>, <pydotplus.graphviz.Node object at 0x7f709020f350>, <pydotplus.graphviz.Node object at 0x7f708ff0b490>, <pydotplus.graphviz.Node object at 0x7f708fde3a90>, <pydotplus.graphviz.Node object at 0x7f708fbd2ad0>, <pydotplus.graphviz.Node object at 0x7f708f84f7d0>, <pydotplus.graphviz.Node object at 0x7f708f7d7850>, <pydotplus.graphviz.Node object at 0x7f708f758410>, <pydotplus.graphviz.Node object at 0x7f708f2c7e90>, <pydotplus.graphviz.Node object at 0x7f708f101410>], '66': [<pydotplus.graphviz.Node object at 0x7f708d611b10>, <pydotplus.graphviz.Node object at 0x7f708d0aba10>, <pydotplus.graphviz.Node object at 0x7f708fd7a4d0>], '67': [<pydotplus.graphviz.Node object at 0x7f708cdb5510>, <pydotplus.graphviz.Node object at 0x7f708fd80990>], '69': [<pydotplus.graphviz.Node object at 0x7f708d295cd0>, <pydotplus.graphviz.Node object at 0x7f708d2b7510>, <pydotplus.graphviz.Node object at 0x7f708d2be9d0>, <pydotplus.graphviz.Node object at 0x7f708f031190>, <pydotplus.graphviz.Node object at 0x7f708ed98890>], '32': [<pydotplus.graphviz.Node object at 0x7f708f4e1350>, <pydotplus.graphviz.Node object at 0x7f708f1d0ad0>, <pydotplus.graphviz.Node object at 0x7f708ee53c90>], '24': [<pydotplus.graphviz.Node object at 0x7f708d27b550>, <pydotplus.graphviz.Node object at 0x7f708cfd62d0>, <pydotplus.graphviz.Node object at 0x7f708cc31350>, <pydotplus.graphviz.Node object at 0x7f70903d86d0>, <pydotplus.graphviz.Node object at 0x7f708f45ba10>, <pydotplus.graphviz.Node object at 0x7f708f248a50>], '25': [<pydotplus.graphviz.Node object at 0x7f708da28110>, <pydotplus.graphviz.Node object at 0x7f708cfb3650>, <pydotplus.graphviz.Node object at 0x7f708cc66e10>], '26': [<pydotplus.graphviz.Node object at 0x7f708d56a590>, <pydotplus.graphviz.Node object at 0x7f708d57e410>], '27': [<pydotplus.graphviz.Node object at 0x7f70901322d0>, <pydotplus.graphviz.Node object at 0x7f70900cd610>, <pydotplus.graphviz.Node object at 0x7f708f474d50>], '20': [<pydotplus.graphviz.Node object at 0x7f708d837950>, <pydotplus.graphviz.Node object at 0x7f708d527110>, <pydotplus.graphviz.Node object at 0x7f708cf129d0>], '21': [<pydotplus.graphviz.Node object at 0x7f708d0630d0>, <pydotplus.graphviz.Node object at 0x7f708fd71fd0>], '48': [<pydotplus.graphviz.Node object at 0x7f708dbb06d0>, <pydotplus.graphviz.Node object at 0x7f708fdfedd0>], '49': [<pydotplus.graphviz.Node object at 0x7f708d011290>, <pydotplus.graphviz.Node object at 0x7f7090526090>, <pydotplus.graphviz.Node object at 0x7f708fff0590>], '46': [<pydotplus.graphviz.Node object at 0x7f708d62be50>, <pydotplus.graphviz.Node object at 0x7f708ccec750>, <pydotplus.graphviz.Node object at 0x7f70902f4550>, <pydotplus.graphviz.Node object at 0x7f708fdf8910>, <pydotplus.graphviz.Node object at 0x7f708fa7dad0>, <pydotplus.graphviz.Node object at 0x7f708f7f1b90>], '23': [<pydotplus.graphviz.Node object at 0x7f709075a0d0>, <pydotplus.graphviz.Node object at 0x7f708f8fedd0>], '44': [<pydotplus.graphviz.Node object at 0x7f708daa1090>, <pydotplus.graphviz.Node object at 0x7f708ff98290>, <pydotplus.graphviz.Node object at 0x7f708f335050>], '45': [<pydotplus.graphviz.Node object at 0x7f7090004410>, <pydotplus.graphviz.Node object at 0x7f708fc3dc50>], '42': [<pydotplus.graphviz.Node object at 0x7f709094ce90>, <pydotplus.graphviz.Node object at 0x7f70902b2fd0>, <pydotplus.graphviz.Node object at 0x7f708f51e310>], '43': [<pydotplus.graphviz.Node object at 0x7f708cb838d0>, <pydotplus.graphviz.Node object at 0x7f708cb1cc10>], '40': [<pydotplus.graphviz.Node object at 0x7f7090c343d0>, <pydotplus.graphviz.Node object at 0x7f70902241d0>], '41': [<pydotplus.graphviz.Node object at 0x7f708cfc0fd0>, <pydotplus.graphviz.Node object at 0x7f7090c84250>, <pydotplus.graphviz.Node object at 0x7f7090206e50>, <pydotplus.graphviz.Node object at 0x7f708fc29dd0>, <pydotplus.graphviz.Node object at 0x7f708f8b4490>, <pydotplus.graphviz.Node object at 0x7f708efcc4d0>], '1': [<pydotplus.graphviz.Node object at 0x7f708d7686d0>, <pydotplus.graphviz.Node object at 0x7f708d436210>, <pydotplus.graphviz.Node object at 0x7f708d3cb090>, <pydotplus.graphviz.Node object at 0x7f708ceb4d90>, <pydotplus.graphviz.Node object at 0x7f708ce48c10>, <pydotplus.graphviz.Node object at 0x7f708cbe0510>, <pydotplus.graphviz.Node object at 0x7f709049b490>, <pydotplus.graphviz.Node object at 0x7f7090354c50>, <pydotplus.graphviz.Node object at 0x7f7090026090>, <pydotplus.graphviz.Node object at 0x7f708ff83f90>, <pydotplus.graphviz.Node object at 0x7f708fe358d0>, <pydotplus.graphviz.Node object at 0x7f708fca1d50>, <pydotplus.graphviz.Node object at 0x7f708f9c16d0>, <pydotplus.graphviz.Node object at 0x7f708f925f10>, <pydotplus.graphviz.Node object at 0x7f708f5247d0>, <pydotplus.graphviz.Node object at 0x7f708f2b4bd0>, <pydotplus.graphviz.Node object at 0x7f708f00e950>], '3': [<pydotplus.graphviz.Node object at 0x7f708d26cb90>, <pydotplus.graphviz.Node object at 0x7f7090039ed0>, <pydotplus.graphviz.Node object at 0x7f708f651690>], '2': [<pydotplus.graphviz.Node object at 0x7f708cbf5390>, <pydotplus.graphviz.Node object at 0x7f70909d8d90>, <pydotplus.graphviz.Node object at 0x7f708ffccd50>, <pydotplus.graphviz.Node object at 0x7f708fe20a50>, <pydotplus.graphviz.Node object at 0x7f708fb9bfd0>, <pydotplus.graphviz.Node object at 0x7f708efb0d10>], '5': [<pydotplus.graphviz.Node object at 0x7f708db48f50>, <pydotplus.graphviz.Node object at 0x7f708da99b90>, <pydotplus.graphviz.Node object at 0x7f708f4b1d10>], '4': [<pydotplus.graphviz.Node object at 0x7f708f666510>, <pydotplus.graphviz.Node object at 0x7f708edeeb90>], '7': [<pydotplus.graphviz.Node object at 0x7f708d6f4c10>, <pydotplus.graphviz.Node object at 0x7f708d14dad0>, <pydotplus.graphviz.Node object at 0x7f708d166e10>, <pydotplus.graphviz.Node object at 0x7f708ce5ca90>, <pydotplus.graphviz.Node object at 0x7f708cb89210>, <pydotplus.graphviz.Node object at 0x7f708ff7dad0>], '6': [<pydotplus.graphviz.Node object at 0x7f708f48b050>, <pydotplus.graphviz.Node object at 0x7f708f49ce90>], '9': [<pydotplus.graphviz.Node object at 0x7f708d3a1f10>, <pydotplus.graphviz.Node object at 0x7f708d17bc90>], '8': [<pydotplus.graphviz.Node object at 0x7f708d662950>, <pydotplus.graphviz.Node object at 0x7f708ce63f50>, <pydotplus.graphviz.Node object at 0x7f708f538650>], '33': [<pydotplus.graphviz.Node object at 0x7f708f836050>, <pydotplus.graphviz.Node object at 0x7f708f6be810>], '39': [<pydotplus.graphviz.Node object at 0x7f708d8822d0>, <pydotplus.graphviz.Node object at 0x7f7090239050>, <pydotplus.graphviz.Node object at 0x7f708fbede10>], '65': [<pydotplus.graphviz.Node object at 0x7f708f41da50>, <pydotplus.graphviz.Node object at 0x7f708f276c10>], '47': [<pydotplus.graphviz.Node object at 0x7f708dbac2d0>, <pydotplus.graphviz.Node object at 0x7f708f7d0390>, <pydotplus.graphviz.Node object at 0x7f708f0ec590>], '38': [<pydotplus.graphviz.Node object at 0x7f708d35ea90>, <pydotplus.graphviz.Node object at 0x7f708d307790>], '59': [<pydotplus.graphviz.Node object at 0x7f708d8dfed0>, <pydotplus.graphviz.Node object at 0x7f708f9bb210>, <pydotplus.graphviz.Node object at 0x7f708edac710>], '58': [<pydotplus.graphviz.Node object at 0x7f7090d35b10>, <pydotplus.graphviz.Node object at 0x7f70900ac990>, <pydotplus.graphviz.Node object at 0x7f708f780110>, <pydotplus.graphviz.Node object at 0x7f708f3cdc10>, <pydotplus.graphviz.Node object at 0x7f708f3e8f50>, <pydotplus.graphviz.Node object at 0x7f708f014e10>], '11': [<pydotplus.graphviz.Node object at 0x7f708cbb1ed0>, <pydotplus.graphviz.Node object at 0x7f709038add0>], '10': [<pydotplus.graphviz.Node object at 0x7f708d1a3dd0>, <pydotplus.graphviz.Node object at 0x7f708d1b8c50>, <pydotplus.graphviz.Node object at 0x7f708cb9e090>], '13': [<pydotplus.graphviz.Node object at 0x7f708db0b650>, <pydotplus.graphviz.Node object at 0x7f708f07aad0>, <pydotplus.graphviz.Node object at 0x7f708f01d310>], '12': [<pydotplus.graphviz.Node object at 0x7f708db48610>, <pydotplus.graphviz.Node object at 0x7f708db27990>, <pydotplus.graphviz.Node object at 0x7f708dade050>, <pydotplus.graphviz.Node object at 0x7f708d492e10>, <pydotplus.graphviz.Node object at 0x7f708d4af190>, <pydotplus.graphviz.Node object at 0x7f708f312810>], '15': [<pydotplus.graphviz.Node object at 0x7f708db62950>, <pydotplus.graphviz.Node object at 0x7f708db777d0>, <pydotplus.graphviz.Node object at 0x7f708f37e990>], '14': [<pydotplus.graphviz.Node object at 0x7f708dac91d0>, <pydotplus.graphviz.Node object at 0x7f708f09c750>], '16': [<pydotplus.graphviz.Node object at 0x7f708fcb6bd0>, <pydotplus.graphviz.Node object at 0x7f708f318cd0>], '19': [<pydotplus.graphviz.Node object at 0x7f708d7edfd0>, <pydotplus.graphviz.Node object at 0x7f708d789350>, <pydotplus.graphviz.Node object at 0x7f708d716890>, <pydotplus.graphviz.Node object at 0x7f708d40c510>, <pydotplus.graphviz.Node object at 0x7f708dba0e90>, <pydotplus.graphviz.Node object at 0x7f708f744150>], '54': [<pydotplus.graphviz.Node object at 0x7f708d94a4d0>, <pydotplus.graphviz.Node object at 0x7f708f271750>, <pydotplus.graphviz.Node object at 0x7f708ee90c50>], '57': [<pydotplus.graphviz.Node object at 0x7f708cc3ecd0>, <pydotplus.graphviz.Node object at 0x7f708ffd5250>], '30': [<pydotplus.graphviz.Node object at 0x7f708d84ac10>, <pydotplus.graphviz.Node object at 0x7f708f67b390>, <pydotplus.graphviz.Node object at 0x7f708f63e3d0>], '37': [<pydotplus.graphviz.Node object at 0x7f708cd8e810>, <pydotplus.graphviz.Node object at 0x7f708cd80a10>, <pydotplus.graphviz.Node object at 0x7f708caf6ad0>], '36': [<pydotplus.graphviz.Node object at 0x7f708cd14890>, <pydotplus.graphviz.Node object at 0x7f708caccdd0>, <pydotplus.graphviz.Node object at 0x7f708ca89950>, <pydotplus.graphviz.Node object at 0x7f7090629b90>, <pydotplus.graphviz.Node object at 0x7f708febb210>, <pydotplus.graphviz.Node object at 0x7f708fe56550>], '53': [<pydotplus.graphviz.Node object at 0x7f708d9b6650>, <pydotplus.graphviz.Node object at 0x7f708d816150>, <pydotplus.graphviz.Node object at 0x7f708cd025d0>, <pydotplus.graphviz.Node object at 0x7f708cc08650>, <pydotplus.graphviz.Node object at 0x7f708ee61650>, <pydotplus.graphviz.Node object at 0x7f708ee17cd0>], '52': [<pydotplus.graphviz.Node object at 0x7f708d5b3ed0>, <pydotplus.graphviz.Node object at 0x7f708d1d98d0>, <pydotplus.graphviz.Node object at 0x7f708cf54e50>, <pydotplus.graphviz.Node object at 0x7f708ca75190>, <pydotplus.graphviz.Node object at 0x7f70902cc150>, <pydotplus.graphviz.Node object at 0x7f709033fbd0>, <pydotplus.graphviz.Node object at 0x7f70900f6310>, <pydotplus.graphviz.Node object at 0x7f70900c0810>, <pydotplus.graphviz.Node object at 0x7f708fbd7f90>, <pydotplus.graphviz.Node object at 0x7f708f9b2d10>, <pydotplus.graphviz.Node object at 0x7f708f94f090>, <pydotplus.graphviz.Node object at 0x7f708f9693d0>, <pydotplus.graphviz.Node object at 0x7f708f3abf90>, <pydotplus.graphviz.Node object at 0x7f708f220910>, <pydotplus.graphviz.Node object at 0x7f708f1a8990>, <pydotplus.graphviz.Node object at 0x7f708eee7f50>, <pydotplus.graphviz.Node object at 0x7f708ed46a50>], '55': [<pydotplus.graphviz.Node object at 0x7f708d98d950>, <pydotplus.graphviz.Node object at 0x7f708eefbdd0>], '18': [<pydotplus.graphviz.Node object at 0x7f708d97a690>, <pydotplus.graphviz.Node object at 0x7f708d782a10>, <pydotplus.graphviz.Node object at 0x7f708d53af50>, <pydotplus.graphviz.Node object at 0x7f708d216890>, <pydotplus.graphviz.Node object at 0x7f708cff6ad0>, <pydotplus.graphviz.Node object at 0x7f7090c6ee50>, <pydotplus.graphviz.Node object at 0x7f708db9b3d0>, <pydotplus.graphviz.Node object at 0x7f708faf4a50>, <pydotplus.graphviz.Node object at 0x7f708f6df490>, <pydotplus.graphviz.Node object at 0x7f708f6166d0>, <pydotplus.graphviz.Node object at 0x7f708f4f61d0>, <pydotplus.graphviz.Node object at 0x7f708f46f890>, <pydotplus.graphviz.Node object at 0x7f708f3f5910>, <pydotplus.graphviz.Node object at 0x7f708f3b9950>, <pydotplus.graphviz.Node object at 0x7f708f193b10>, <pydotplus.graphviz.Node object at 0x7f708ef110d0>, <pydotplus.graphviz.Node object at 0x7f708eeaaf90>], '31': [<pydotplus.graphviz.Node object at 0x7f708fdbc950>, <pydotplus.graphviz.Node object at 0x7f708f39f610>], '50': [<pydotplus.graphviz.Node object at 0x7f708ff9f750>, <pydotplus.graphviz.Node object at 0x7f708fa68c50>]}
{'56': <pydotplus.graphviz.Node object at 0x7f708cd3e590>, '42': <pydotplus.graphviz.Node object at 0x7f708f8bb950>, '45': <pydotplus.graphviz.Node object at 0x7f708f044fd0>, '36': <pydotplus.graphviz.Node object at 0x7f70902adb10>, '60': <pydotplus.graphviz.Node object at 0x7f708f9ad850>, '61': <pydotplus.graphviz.Node object at 0x7f708d1e0d90>, '62': <pydotplus.graphviz.Node object at 0x7f708d83de10>, '63': <pydotplus.graphviz.Node object at 0x7f708fbe6950>, '64': <pydotplus.graphviz.Node object at 0x7f708fd06e50>, '65': <pydotplus.graphviz.Node object at 0x7f7090246d90>, '66': <pydotplus.graphviz.Node object at 0x7f708f150690>, '67': <pydotplus.graphviz.Node object at 0x7f708d0a5550>, '69': <pydotplus.graphviz.Node object at 0x7f708cb6da50>, '23': <pydotplus.graphviz.Node object at 0x7f708ef83710>, '24': <pydotplus.graphviz.Node object at 0x7f708f681850>, '25': <pydotplus.graphviz.Node object at 0x7f708ef08bd0>, '26': <pydotplus.graphviz.Node object at 0x7f708da2f5d0>, '27': <pydotplus.graphviz.Node object at 0x7f708cc37810>, '20': <pydotplus.graphviz.Node object at 0x7f708f6cb610>, '21': <pydotplus.graphviz.Node object at 0x7f708cf0c510>, '22': <pydotplus.graphviz.Node object at 0x7f7090ab5490>, '49': <pydotplus.graphviz.Node object at 0x7f708ccd88d0>, '46': <pydotplus.graphviz.Node object at 0x7f708d2e5b10>, '47': <pydotplus.graphviz.Node object at 0x7f708ffb45d0>, '44': <pydotplus.graphviz.Node object at 0x7f708cfbab10>, '48': <pydotplus.graphviz.Node object at 0x7f708f7dcd10>, '28': <pydotplus.graphviz.Node object at 0x7f708db93ad0>, '29': <pydotplus.graphviz.Node object at 0x7f708faef590>, '40': <pydotplus.graphviz.Node object at 0x7f708ff12950>, '41': <pydotplus.graphviz.Node object at 0x7f7090e4fdd0>, '1': <pydotplus.graphviz.Node object at 0x7f708d407050>, '35': <pydotplus.graphviz.Node object at 0x7f708ee5c190>, '3': <pydotplus.graphviz.Node object at 0x7f709049b350>, '2': <pydotplus.graphviz.Node object at 0x7f708f2ae710>, '5': <pydotplus.graphviz.Node object at 0x7f708efb8210>, '4': <pydotplus.graphviz.Node object at 0x7f708d275090>, '7': <pydotplus.graphviz.Node object at 0x7f708d42ed10>, '6': <pydotplus.graphviz.Node object at 0x7f708db4c0d0>, '9': <pydotplus.graphviz.Node object at 0x7f708d668e10>, '8': <pydotplus.graphviz.Node object at 0x7f708ff77610>, '18': <pydotplus.graphviz.Node object at 0x7f708fe5da10>, '33': <pydotplus.graphviz.Node object at 0x7f708eea4ad0>, '43': <pydotplus.graphviz.Node object at 0x7f708f516e10>, '13': <pydotplus.graphviz.Node object at 0x7f708f91fa50>, '38': <pydotplus.graphviz.Node object at 0x7f708cd93cd0>, '59': <pydotplus.graphviz.Node object at 0x7f708f3201d0>, '58': <pydotplus.graphviz.Node object at 0x7f708f9dae50>, '11': <pydotplus.graphviz.Node object at 0x7f708d152f90>, '10': <pydotplus.graphviz.Node object at 0x7f708d6fc110>, '39': <pydotplus.graphviz.Node object at 0x7f708fec26d0>, '12': <pydotplus.graphviz.Node object at 0x7f708d76eb90>, '15': <pydotplus.graphviz.Node object at 0x7f708d4a6c90>, '14': <pydotplus.graphviz.Node object at 0x7f708db204d0>, '16': <pydotplus.graphviz.Node object at 0x7f708db5d490>, '19': <pydotplus.graphviz.Node object at 0x7f708d91ae90>, '54': <pydotplus.graphviz.Node object at 0x7f708cc28e50>, '31': <pydotplus.graphviz.Node object at 0x7f708fa10950>, '30': <pydotplus.graphviz.Node object at 0x7f708d5f7390>, '37': <pydotplus.graphviz.Node object at 0x7f708cb31a90>, '50': <pydotplus.graphviz.Node object at 0x7f709054a490>, '53': <pydotplus.graphviz.Node object at 0x7f708d8e63d0>, '52': <pydotplus.graphviz.Node object at 0x7f708d29d1d0>, '55': <pydotplus.graphviz.Node object at 0x7f708ca7a650>, '32': <pydotplus.graphviz.Node object at 0x7f70901a2d50>, '57': <pydotplus.graphviz.Node object at 0x7f708f962ed0>}
 TERMINOU A GERACAO. VAI INICIAR A COMPRESSAO 107 
nr1585
 LISTANDO v_oc[n][formula_f] 
seqnode=1586
num_oc_formulas=1652
COLLAPSING THE REPEATED FORMULAS
Gerando graph_from_dot_data ANTES-COMPRESSAO 
gravando dot file
GRAVOU
nivel 1
['ORX1', '(ORX1 imp q)']
nivel 2
['X1v2 imp q', '(X1v2 imp q) imp ((ORX1 imp q))']
nivel 3
['q', 'X1v5 imp q', '(X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q)))']
nivel 4
['q', '(X1v3 imp q) imp ((X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q))))', '(ORX2 imp q)', 'X1v3 imp q', 'ORX2']
nivel 5
['(X2v5 imp q) imp ((ORX2 imp q))', '(X2v5 imp q)', '(ORX2 imp q)', 'q', '(X1v1 imp q) imp ((X1v3 imp q) imp ((X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q)))))', 'ORX2', 'X1v1 imp q']
nivel 6
['(X2v5 imp q) imp ((ORX2 imp q))', '(X1v4 imp q) imp ((X1v1 imp q) imp ((X1v3 imp q) imp ((X1v5 imp q) imp ((X1v2 imp q) imp ((ORX1 imp q))))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v2', '(ORX2 imp q)', 'q', 'X1v4 imp q', 'ORX2', 'X2v3 imp q', '(X2v5 imp q)', '(X1v2 imp (X2v5 imp q))']
nivel 7
['(X2v5 imp q) imp ((ORX2 imp q))', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v5', '(ORX2 imp q)', 'X2v4 imp q', 'q', '(X1v5 imp (X2v5 imp q))', 'ORX2', '(X2v5 imp q)', '(X2v3 imp q)']
REPEATED_FORMULAS =====> 
['q']
==========
nivel da formula que repete= 7
formula que repete= q
vai collapsar q 2 vezes, no nivel 7
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f7090200f50>, <pydotplus.graphviz.Node object at 0x7f708fb38dd0>]
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708fb38dd0>]
n = q name= 639
vai identificar n=q e v=q
vai identificar n=1551 e v=639
e_in_A.has_key(v.get_name())
False
name = 639
<pydotplus.graphviz.Edge object at 0x7f7092646250>
638
<pydotplus.graphviz.Node object at 0x7f7082612410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092646250>])
set([('638', '639')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709060a8d0>, <pydotplus.graphviz.Edge object at 0x7f7090611d50>]
Set([('1544', '1551'), ('1550', '1551')])
q
INtersecao ====================
Set([])
name = 639
<pydotplus.graphviz.Edge object at 0x7f709264e6d0>
632
<pydotplus.graphviz.Node object at 0x7f708932fe50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709264e6d0>])
set([('632', '639')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709060a8d0>, <pydotplus.graphviz.Edge object at 0x7f7090611d50>, <pydotplus.graphviz.Edge object at 0x7f7083715190>]
Set([('1544', '1551'), ('1550', '1551'), ('638', '1551')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f7090200f50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090626190>])
set([('1551', '1552')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092661ad0>]
Set([('639', '640')])
(X2v3 imp q) 24
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 7
gravando dot file
nivel 8
['X1v3', 'q', 'ORX3', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v5', '(ORX3 imp q)', '(ORX2 imp q)', '(X2v5 imp q) imp ((ORX2 imp q))', '(X1v5 imp (X2v3 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', '(X2v4 imp q)', 'ORX2', '(X2v5 imp q)', 'X2v1 imp q', '(X2v3 imp q)', '(X1v3 imp (X2v5 imp q))']
nivel 9
['X1v3', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', 'X1v1', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', 'X1v5', '(X3v2 imp q)', '(ORX3 imp q)', '(X2v2 imp q)', 'X2v4 imp q', '(X3v2 imp q) imp ((ORX3 imp q))', '(X2v1 imp q)', '(X2v5 imp q) imp ((ORX2 imp q))', '(X1v1 imp (X2v5 imp q))', '(X1v5 imp (X2v4 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', 'ORX3', 'X2v3 imp q', '(X2v5 imp q)', 'q	', '(X1v3 imp (X2v3 imp q))']
nivel 10
['(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', 'X3v1 imp q', '(X2v2 imp q)', 'X1v2', 'X1v5', 'X1v4', '(ORX3 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X2v3 imp q', '(X1v5 imp (X2v1 imp q))', '(X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))', '(X3v2 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', 'ORX3', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', '(X1v2 imp (X2v2 imp q))', 'X2v4 imp q', '(X1v4 imp (X2v5 imp q))', 'q', '(X1v2 imp (X3v2 imp q))', 'X2v1 imp q']
REPEATED_FORMULAS =====> 
['X1v2', 'q']
==========
nivel da formula que repete= 10
formula que repete= X1v2
vai collapsar X1v2 2 vezes, no nivel 10
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708d8b6110>, <pydotplus.graphviz.Node object at 0x7f708d89e5d0>]
labels = [X1v2]18
labels = [X1v2]18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708d89e5d0>]
n = [X1v2]18 name= 569
vai identificar n=[X1v2]18 e v=[X1v2]18
vai identificar n=513 e v=569
e_in_A.has_key(v.get_name())
False
<pydotplus.graphviz.Node object at 0x7f708d8b6110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fb8410>])
set([('513', '515')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092aa3f50>, <pydotplus.graphviz.Edge object at 0x7f7092a85d10>]
Set([('569', '571'), ('570', '571')])
(X3v2 imp q)
INtersecao ====================
Set([])
v ====> [X1v2]18 =18
n ======> [X1v2]18 =18
SAO IGUAIS
APAGANDO ARESTA [X1v2]18==> (X1v2 imp q) 18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 10
formula que repete= q
vai collapsar q 2 vezes, no nivel 10
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708cd84a10>, <pydotplus.graphviz.Node object at 0x7f708da5f0d0>]
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708da5f0d0>]
n = q name= 1151
vai identificar n=q e v=q
vai identificar n=251 e v=1151
e_in_A.has_key(v.get_name())
False
name = 1151
<pydotplus.graphviz.Edge object at 0x7f70914edd50>
1150
<pydotplus.graphviz.Node object at 0x7f708ad7c5d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914edd50>])
set([('1150', '1151')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934bcfd0>, <pydotplus.graphviz.Edge object at 0x7f7093445490>]
Set([('244', '251'), ('250', '251')])
q
INtersecao ====================
Set([])
name = 1151
<pydotplus.graphviz.Edge object at 0x7f70914ad610>
1144
<pydotplus.graphviz.Node object at 0x7f708656ac10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914ad610>])
set([('1144', '1151')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934bcfd0>, <pydotplus.graphviz.Edge object at 0x7f7093445490>, <pydotplus.graphviz.Edge object at 0x7f70806f16d0>]
Set([('244', '251'), ('250', '251'), ('1150', '251')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708cd84a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093457890>])
set([('251', '252')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70914c0a10>]
Set([('1151', '1152')])
(X2v4 imp q) 46
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 10
gravando dot file
nivel 11
['(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', '(X1v5 imp (X2v2 imp q))', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X1v5', 'X2v2 imp q', '(ORX3 imp q)', '(X3v2 imp q)', '(X2v1 imp q)', 'q', 'ORX3', '(X3v2 imp q) imp ((ORX3 imp q))', 'X3v4 imp q', 'X1v2', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', '(X2v4 imp q)', '(X1v2 imp (X3v2 imp q))', 'X3v1 imp q']
REPEATED_FORMULAS =====> 
['(ORX3 imp q)', 'q', 'ORX3']
==========
nivel da formula que repete= 11
formula que repete= (ORX3 imp q)
vai collapsar (ORX3 imp q) 2 vezes, no nivel 11
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708fb68350>, <pydotplus.graphviz.Node object at 0x7f708faae850>]
labels = (ORX3 imp q)
labels = (ORX3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708faae850>]
n = (ORX3 imp q) name= 1144
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=244 e v=1144
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7087b3c510>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085342850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914c7f90>])
set([('1145', '1144')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093506b90>, <pydotplus.graphviz.Edge object at 0x7f70935b9c10>]
Set([('245', '244'), ('184', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085342850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914c7f90>])
set([('1145', '1144')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093506b90>, <pydotplus.graphviz.Edge object at 0x7f70935b9c10>]
Set([('245', '244'), ('184', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) 49 e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708ab7dcd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914d0450>])
set([('1132', '1144')])
(X3v2 imp q) 49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093506b90>, <pydotplus.graphviz.Edge object at 0x7f70935b9c10>, <pydotplus.graphviz.Edge object at 0x7f7089802e10>]
Set([('245', '244'), ('184', '244'), ('1145', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708ab7dcd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914d0450>])
set([('1132', '1144')])
(X3v2 imp q) 49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093506b90>, <pydotplus.graphviz.Edge object at 0x7f70935b9c10>, <pydotplus.graphviz.Edge object at 0x7f7089802e10>]
Set([('245', '244'), ('184', '244'), ('1145', '244')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) 49 para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7f708fb68350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093445490>])
set([('244', '251')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934bcfd0>, <pydotplus.graphviz.Edge object at 0x7f7093445490>, <pydotplus.graphviz.Edge object at 0x7f70806f16d0>, <pydotplus.graphviz.Edge object at 0x7f70806d9110>]
Set([('1144', '251'), ('244', '251'), ('250', '251'), ('1150', '251')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7093445490>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 11
formula que repete= q
vai collapsar q 4 vezes, no nivel 11
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708fabd950>, <pydotplus.graphviz.Node object at 0x7f708fb5ad90>, <pydotplus.graphviz.Node object at 0x7f708fb541d0>, <pydotplus.graphviz.Node object at 0x7f708f59efd0>]
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708fb5ad90>, <pydotplus.graphviz.Node object at 0x7f708fb541d0>, <pydotplus.graphviz.Node object at 0x7f708f59efd0>]
n = q name= 375
vai identificar n=q e v=q
vai identificar n=1535 e v=375
e_in_A.has_key(v.get_name())
False
name = 375
<pydotplus.graphviz.Edge object at 0x7f7092fc9810>
374
<pydotplus.graphviz.Node object at 0x7f7083545c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fc9810>])
set([('374', '375')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>]
Set([('1528', '1535'), ('1534', '1535')])
q
INtersecao ====================
Set([])
name = 375
<pydotplus.graphviz.Edge object at 0x7f709302eb50>
368
<pydotplus.graphviz.Node object at 0x7f708ab53750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709302eb50>])
set([('368', '375')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>, <pydotplus.graphviz.Edge object at 0x7f70825fc210>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708fabd950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70906d9150>])
set([('1535', '1536')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709307bcd0>]
Set([('375', '376')])
(X2v4 imp q) 12
INtersecao ====================
Set([])
n = q name= 899
vai identificar n=q e v=q
vai identificar n=1535 e v=899
e_in_A.has_key(v.get_name())
False
name = 899
<pydotplus.graphviz.Edge object at 0x7f7091f86e50>
898
<pydotplus.graphviz.Node object at 0x7f708885a350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f86e50>])
set([('898', '899')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>, <pydotplus.graphviz.Edge object at 0x7f70825fc210>, <pydotplus.graphviz.Edge object at 0x7f7083625b50>]
Set([('1528', '1535'), ('1534', '1535'), ('368', '1535'), ('374', '1535')])
q
INtersecao ====================
Set([])
name = 899
<pydotplus.graphviz.Edge object at 0x7f7091fee850>
892
<pydotplus.graphviz.Node object at 0x7f70850b1f50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091fee850>])
set([('892', '899')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>, <pydotplus.graphviz.Edge object at 0x7f70825fc210>, <pydotplus.graphviz.Edge object at 0x7f7083625b50>, <pydotplus.graphviz.Edge object at 0x7f7089c36310>]
Set([('1528', '1535'), ('1534', '1535'), ('368', '1535'), ('374', '1535'), ('898', '1535')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708fabd950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70856d3590>, <pydotplus.graphviz.Edge object at 0x7f70906d9150>])
set([('1535', '376'), ('1535', '1536')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70920771d0>]
Set([('899', '900')])
(X2v1 imp q) 36
INtersecao ====================
Set([])
n = q name= 567
vai identificar n=q e v=q
vai identificar n=1535 e v=567
e_in_A.has_key(v.get_name())
False
name = 567
<pydotplus.graphviz.Edge object at 0x7f70929bfd90>
566
<pydotplus.graphviz.Node object at 0x7f7086219410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70929bfd90>])
set([('566', '567')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>, <pydotplus.graphviz.Edge object at 0x7f70825fc210>, <pydotplus.graphviz.Edge object at 0x7f7083625b50>, <pydotplus.graphviz.Edge object at 0x7f7089c36310>, <pydotplus.graphviz.Edge object at 0x7f70854adc90>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('368', '1535'), ('898', '1535')])
q
INtersecao ====================
Set([])
name = 567
<pydotplus.graphviz.Edge object at 0x7f7092a1b290>
560
<pydotplus.graphviz.Node object at 0x7f7087342450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092a1b290>])
set([('560', '567')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>, <pydotplus.graphviz.Edge object at 0x7f70825fc210>, <pydotplus.graphviz.Edge object at 0x7f7083625b50>, <pydotplus.graphviz.Edge object at 0x7f7089c36310>, <pydotplus.graphviz.Edge object at 0x7f70854adc90>, <pydotplus.graphviz.Edge object at 0x7f70862190d0>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('566', '1535'), ('368', '1535'), ('898', '1535')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708fabd950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70856d3590>, <pydotplus.graphviz.Edge object at 0x7f70906d9150>, <pydotplus.graphviz.Edge object at 0x7f7088b31510>])
set([('1535', '376'), ('1535', '1536'), ('1535', '900')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092a0d690>]
Set([('567', '568')])
(X3v1 imp q) 25
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 11
formula que repete= ORX3
vai collapsar ORX3 2 vezes, no nivel 11
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708fb54ad0>, <pydotplus.graphviz.Node object at 0x7f708fb7cb50>]
labels = ORX3
labels = ORX3
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX3 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708fb7cb50>]
n = ORX3 name= 1150
vai identificar n=ORX3 e v=ORX3
vai identificar n=250 e v=1150
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7080114490>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 11
gravando dot file
nivel 12
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v4 imp (X2v4 imp q))', 'X1v2', 'X1v1', 'X1v4', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', '(X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q)))))', 'ORX3', 'ORX4', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', 'X2v2 imp q', '(X3v4 imp q)', '(X1v1 imp (X2v1 imp q))', 'q', 'X3v2 imp q', '(X1v2 imp (X3v2 imp q))', 'X2v1 imp q', '(X3v3 imp q)']
REPEATED_FORMULAS =====> 
['(ORX3 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', 'q', 'X3v2 imp q']
==========
nivel da formula que repete= 12
formula que repete= (ORX3 imp q)
vai collapsar (ORX3 imp q) 3 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dde5990>, <pydotplus.graphviz.Node object at 0x7f708f55af10>, <pydotplus.graphviz.Node object at 0x7f708ddfe290>]
labels = (ORX3 imp q)
labels = (ORX3 imp q)
labels = (ORX3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708f55af10>, <pydotplus.graphviz.Node object at 0x7f708ddfe290>]
n = (ORX3 imp q) name= 368
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=1528 e v=368
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70816f2510>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70835a1e10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709302bc50>])
set([('369', '368')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>]
Set([('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70835a1e10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709302bc50>])
set([('369', '368')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>]
Set([('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) 13 e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708522bc10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093033110>])
set([('308', '368')])
(X3v2 imp q) 13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083210fd0>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708522bc10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093033110>])
set([('308', '368')])
(X3v2 imp q) 13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083210fd0>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) 13 para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7f708dde5990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70906c5d10>])
set([('1528', '1535')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>, <pydotplus.graphviz.Edge object at 0x7f70825fc210>, <pydotplus.graphviz.Edge object at 0x7f7083625b50>, <pydotplus.graphviz.Edge object at 0x7f7089c36310>, <pydotplus.graphviz.Edge object at 0x7f70854adc90>, <pydotplus.graphviz.Edge object at 0x7f70862190d0>, <pydotplus.graphviz.Edge object at 0x7f7080363c50>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('566', '1535'), ('368', '1535'), ('898', '1535'), ('560', '1535')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70906c5d10>])
delete in_edge_Ancestor
n = (ORX3 imp q) name= 892
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=1528 e v=892
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7086e3ef90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085e29090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091bc8a50>])
set([('893', '892')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083210fd0>, <pydotplus.graphviz.Edge object at 0x7f7083207290>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085e29090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091bc8a50>])
set([('893', '892')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083210fd0>, <pydotplus.graphviz.Edge object at 0x7f7083207290>]
Set([('369', '1528'), ('1529', '1528'), ('1516', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) 37 e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080b45bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c25c50>])
set([('832', '892')])
(X3v2 imp q) 37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083210fd0>, <pydotplus.graphviz.Edge object at 0x7f7083207290>, <pydotplus.graphviz.Edge object at 0x7f70814c4450>]
Set([('369', '1528'), ('1516', '1528'), ('1529', '1528'), ('893', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080b45bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c25c50>])
set([('832', '892')])
(X3v2 imp q) 37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083210fd0>, <pydotplus.graphviz.Edge object at 0x7f7083207290>, <pydotplus.graphviz.Edge object at 0x7f70814c4450>]
Set([('369', '1528'), ('1516', '1528'), ('1529', '1528'), ('893', '1528'), ('308', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) 37 para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7f708dde5990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70906c5d10>])
set([('1528', '1535')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709073d890>, <pydotplus.graphviz.Edge object at 0x7f70906c5d10>, <pydotplus.graphviz.Edge object at 0x7f70825fc210>, <pydotplus.graphviz.Edge object at 0x7f7089c36310>, <pydotplus.graphviz.Edge object at 0x7f70854adc90>, <pydotplus.graphviz.Edge object at 0x7f70862190d0>, <pydotplus.graphviz.Edge object at 0x7f7080363c50>]
Set([('1528', '1535'), ('1534', '1535'), ('374', '1535'), ('892', '1535'), ('566', '1535'), ('898', '1535'), ('560', '1535')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70906c5d10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= (X3v2 imp q) imp ((ORX3 imp q))
vai collapsar (X3v2 imp q) imp ((ORX3 imp q)) 2 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708f547ed0>, <pydotplus.graphviz.Node object at 0x7f708f565c90>]
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) imp ((ORX3 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708f565c90>]
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 1145
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=245 e v=1145
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708ab792d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7081229cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914e9dd0>])
set([('1146', '1145')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934c8050>, <pydotplus.graphviz.Edge object at 0x7f70934c6350>]
Set([('246', '245'), ('131', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7081229cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914e9dd0>])
set([('1146', '1145')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934c8050>, <pydotplus.graphviz.Edge object at 0x7f70934c6350>]
Set([('246', '245'), ('131', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) 47 e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70835d0790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914e94d0>])
set([('1080', '1145')])
(X3v1 imp q) 47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934c8050>, <pydotplus.graphviz.Edge object at 0x7f70934c6350>, <pydotplus.graphviz.Edge object at 0x7f7081f26850>]
Set([('246', '245'), ('131', '245'), ('1146', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70835d0790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914e94d0>])
set([('1080', '1145')])
(X3v1 imp q) 47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934c8050>, <pydotplus.graphviz.Edge object at 0x7f70934c6350>, <pydotplus.graphviz.Edge object at 0x7f7081f26850>]
Set([('246', '245'), ('131', '245'), ('1146', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) 47 para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7f708f547ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093506b90>])
set([('245', '244')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093506b90>, <pydotplus.graphviz.Edge object at 0x7f70935b9c10>, <pydotplus.graphviz.Edge object at 0x7f7089802e10>, <pydotplus.graphviz.Edge object at 0x7f70897d20d0>]
Set([('245', '244'), ('184', '244'), ('1132', '244'), ('1145', '244')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7093506b90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= ORX3
vai collapsar ORX3 3 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dde87d0>, <pydotplus.graphviz.Node object at 0x7f708f565590>, <pydotplus.graphviz.Node object at 0x7f708f57b290>]
labels = ORX3
labels = ORX3
labels = ORX3
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX3 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708f565590>, <pydotplus.graphviz.Node object at 0x7f708f57b290>]
n = ORX3 name= 374
vai identificar n=ORX3 e v=ORX3
vai identificar n=1534 e v=374
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708122edd0>]
n = ORX3 name= 898
vai identificar n=ORX3 e v=ORX3
vai identificar n=1534 e v=898
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708ac6fbd0>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= q
vai collapsar q 3 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708f56ff50>, <pydotplus.graphviz.Node object at 0x7f708ddb1f50>, <pydotplus.graphviz.Node object at 0x7f708dd68610>]
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708ddb1f50>, <pydotplus.graphviz.Node object at 0x7f708dd68610>]
n = q name= 691
vai identificar n=q e v=q
vai identificar n=1023 e v=691
e_in_A.has_key(v.get_name())
False
name = 691
<pydotplus.graphviz.Edge object at 0x7f709251a690>
690
<pydotplus.graphviz.Node object at 0x7f7087a4fb90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709251a690>])
set([('690', '691')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70917e6750>, <pydotplus.graphviz.Edge object at 0x7f70917edbd0>]
Set([('1022', '1023'), ('1016', '1023')])
q
INtersecao ====================
Set([])
name = 691
<pydotplus.graphviz.Edge object at 0x7f7092520b10>
684
<pydotplus.graphviz.Node object at 0x7f70875409d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092520b10>])
set([('684', '691')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70917e6750>, <pydotplus.graphviz.Edge object at 0x7f70917edbd0>, <pydotplus.graphviz.Edge object at 0x7f708303ccd0>]
Set([('1022', '1023'), ('1016', '1023'), ('690', '1023')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708f56ff50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091800fd0>])
set([('1023', '1024')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092535f10>]
Set([('691', '692')])
(X3v1 imp q) 30
INtersecao ====================
Set([])
n = q name= 627
vai identificar n=q e v=q
vai identificar n=1023 e v=627
e_in_A.has_key(v.get_name())
False
name = 627
<pydotplus.graphviz.Edge object at 0x7f709270e710>
626
<pydotplus.graphviz.Node object at 0x7f708588d650>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709270e710>])
set([('626', '627')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70917e6750>, <pydotplus.graphviz.Edge object at 0x7f70917edbd0>, <pydotplus.graphviz.Edge object at 0x7f708303ccd0>, <pydotplus.graphviz.Edge object at 0x7f7087fae310>]
Set([('1022', '1023'), ('1016', '1023'), ('684', '1023'), ('690', '1023')])
q
INtersecao ====================
Set([])
name = 627
<pydotplus.graphviz.Edge object at 0x7f7092714b90>
620
<pydotplus.graphviz.Node object at 0x7f70811ad7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092714b90>])
set([('620', '627')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70917e6750>, <pydotplus.graphviz.Edge object at 0x7f70917edbd0>, <pydotplus.graphviz.Edge object at 0x7f708303ccd0>, <pydotplus.graphviz.Edge object at 0x7f7087fae310>, <pydotplus.graphviz.Edge object at 0x7f70899b4850>]
Set([('626', '1023'), ('1022', '1023'), ('1016', '1023'), ('684', '1023'), ('690', '1023')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708f56ff50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7087838c90>, <pydotplus.graphviz.Edge object at 0x7f7091800fd0>])
set([('1023', '1024'), ('1023', '692')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092727f90>]
Set([('627', '628')])
(X3v4 imp q) 27
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 12
formula que repete= X3v2 imp q
vai collapsar X3v2 imp q 2 vezes, no nivel 12
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708f5657d0>, <pydotplus.graphviz.Node object at 0x7f708ddd01d0>]
labels = (X3v2 imp q) 8
labels = (X3v2 imp q) 49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) 8 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708ddd01d0>]
n = (X3v2 imp q) 49 name= 1132
vai identificar n=(X3v2 imp q) 8 e v=(X3v2 imp q) 49
vai identificar n=184 e v=1132
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) 49 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708ab84f50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =q e v = (X3v2 imp q) 49 n=(X3v2 imp q) 8 Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708012cad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915ec350>])
set([('1131', '1132')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093691b90>]
Set([('183', '184')])
(X3v2 imp q) 8
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708012cad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915ec350>])
set([('1131', '1132')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093691b90>]
Set([('183', '184')])
(X3v2 imp q) 8
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE q para (X3v2 imp q) 8
<pydotplus.graphviz.Node object at 0x7f708f5657d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70935b9c10>])
set([('184', '244')])
(X3v2 imp q) 8
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093506b90>, <pydotplus.graphviz.Edge object at 0x7f70935b9c10>, <pydotplus.graphviz.Edge object at 0x7f70897d20d0>]
Set([('245', '244'), ('184', '244'), ('1132', '244')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70935b9c10>])
delete in_edge_Ancestor
COLLAPSO DE REGRA DE INTRODUCAO v ====> (X3v2 imp q) 49 =49
COM REGRA DE INTRODUCAO n ====> 8
collapsing_nodes: atualizando conclusions: 8--> (X3v2 imp q) 8 49
collapsing_nodes: atualizando conclusions: 49--> (X3v2 imp q) 8 49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 12
gravando dot file
nivel 13
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', 'X3v1 imp q', 'X3v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X2v4', 'X2v1', 'X2v3', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v5 imp q)', '(ORX4 imp q)', '(X2v3 imp (X3v3 imp q))', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', 'ORX4', '(X2v2 imp q) imp ((X2v1 imp q) imp ((X2v4 imp q) imp ((X2v3 imp q) imp ((X2v5 imp q) imp ((ORX2 imp q))))))', '(X2v4 imp (X3v4 imp q))', '(X3v5 imp q)', 'X2v2 imp q', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', 'q', '(X2v1 imp (X3v1 imp q))', 'X3v3 imp q', 'X3v2 imp q']
REPEATED_FORMULAS =====> 
['(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX4', 'q', 'X3v2 imp q']
==========
nivel da formula que repete= 13
formula que repete= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai collapsar (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) 2 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708ddfc550>, <pydotplus.graphviz.Node object at 0x7f708dcda910>]
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dcda910>]
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 1146
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=246 e v=1146
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70816b5750>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708431d050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091485750>])
set([('1147', '1146')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934e6f10>, <pydotplus.graphviz.Edge object at 0x7f70934ee3d0>]
Set([('247', '246'), ('240', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708431d050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091485750>])
set([('1147', '1146')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934e6f10>, <pydotplus.graphviz.Edge object at 0x7f70934ee3d0>]
Set([('247', '246'), ('240', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084ae2b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709148dbd0>])
set([('1139', '1146')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934e6f10>, <pydotplus.graphviz.Edge object at 0x7f70934ee3d0>, <pydotplus.graphviz.Edge object at 0x7f7088c96490>]
Set([('240', '246'), ('247', '246'), ('1147', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084ae2b90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709148dbd0>])
set([('1139', '1146')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934e6f10>, <pydotplus.graphviz.Edge object at 0x7f70934ee3d0>, <pydotplus.graphviz.Edge object at 0x7f7088c96490>]
Set([('240', '246'), ('247', '246'), ('1147', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7f708ddfc550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70934c8050>])
set([('246', '245')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934c8050>, <pydotplus.graphviz.Edge object at 0x7f70934c6350>, <pydotplus.graphviz.Edge object at 0x7f7081f26850>, <pydotplus.graphviz.Edge object at 0x7f7081f0b710>]
Set([('246', '245'), ('131', '245'), ('1080', '245'), ('1146', '245')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70934c8050>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 2 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dc8e050>, <pydotplus.graphviz.Node object at 0x7f708dc55ed0>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dc55ed0>]
n = (ORX4 imp q) name= 620
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=684 e v=620
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7087160cd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7087a60cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927453d0>])
set([('621', '620')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926e1e90>, <pydotplus.graphviz.Edge object at 0x7f7092600710>]
Set([('685', '684'), ('683', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7087a60cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927453d0>])
set([('621', '620')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926e1e90>, <pydotplus.graphviz.Edge object at 0x7f7092600710>]
Set([('685', '684'), ('683', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708413f310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927a0250>])
set([('619', '620')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926e1e90>, <pydotplus.graphviz.Edge object at 0x7f7092600710>, <pydotplus.graphviz.Edge object at 0x7f7084d83e90>]
Set([('685', '684'), ('683', '684'), ('621', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708413f310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927a0250>])
set([('619', '620')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926e1e90>, <pydotplus.graphviz.Edge object at 0x7f7092600710>, <pydotplus.graphviz.Edge object at 0x7f7084d83e90>]
Set([('685', '684'), ('683', '684'), ('621', '684')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708dc8e050>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7087fae310>])
set([('684', '1023')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70917e6750>, <pydotplus.graphviz.Edge object at 0x7f70917edbd0>, <pydotplus.graphviz.Edge object at 0x7f708303ccd0>, <pydotplus.graphviz.Edge object at 0x7f7087fae310>, <pydotplus.graphviz.Edge object at 0x7f70899b4850>, <pydotplus.graphviz.Edge object at 0x7f708797f050>]
Set([('690', '1023'), ('626', '1023'), ('1022', '1023'), ('684', '1023'), ('620', '1023'), ('1016', '1023')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7087fae310>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= (X3v2 imp q) imp ((ORX3 imp q))
vai collapsar (X3v2 imp q) imp ((ORX3 imp q)) 3 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dd13a50>, <pydotplus.graphviz.Node object at 0x7f708dcc8090>, <pydotplus.graphviz.Node object at 0x7f708dd56350>]
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) imp ((ORX3 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dcc8090>, <pydotplus.graphviz.Node object at 0x7f708dd56350>]
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 369
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=1529 e v=369
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a6ee290>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70855a8ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fcca90>])
set([('370', '369')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>]
Set([('1464', '1529'), ('1530', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70855a8ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fcca90>])
set([('370', '369')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>]
Set([('1464', '1529'), ('1530', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084af7890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fd3f10>])
set([('255', '369')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>]
Set([('1464', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084af7890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fd3f10>])
set([('255', '369')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>]
Set([('1464', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7f708dd13a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907c6150>])
set([('1529', '1528')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083210fd0>, <pydotplus.graphviz.Edge object at 0x7f7083207290>, <pydotplus.graphviz.Edge object at 0x7f70814c4450>, <pydotplus.graphviz.Edge object at 0x7f70890cb3d0>]
Set([('1529', '1528'), ('369', '1528'), ('893', '1528'), ('308', '1528'), ('1516', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70907c6150>])
delete in_edge_Ancestor
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 893
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=1529 e v=893
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7089de7110>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70876e0850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c50690>])
set([('894', '893')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>, <pydotplus.graphviz.Edge object at 0x7f7087e08550>]
Set([('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70876e0850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c50690>])
set([('894', '893')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>, <pydotplus.graphviz.Edge object at 0x7f7087e08550>]
Set([('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708337b6d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c4a910>])
set([('779', '893')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>, <pydotplus.graphviz.Edge object at 0x7f7087e08550>, <pydotplus.graphviz.Edge object at 0x7f7085f5ca90>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708337b6d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c4a910>])
set([('779', '893')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>, <pydotplus.graphviz.Edge object at 0x7f7087e08550>, <pydotplus.graphviz.Edge object at 0x7f7085f5ca90>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7f708dd13a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907c6150>])
set([('1529', '1528')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083207290>, <pydotplus.graphviz.Edge object at 0x7f70814c4450>, <pydotplus.graphviz.Edge object at 0x7f70890cb3d0>]
Set([('1516', '1528'), ('1529', '1528'), ('308', '1528'), ('893', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70907c6150>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= ORX4
vai collapsar ORX4 2 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dcec910>, <pydotplus.graphviz.Node object at 0x7f708dca5550>]
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dca5550>]
n = ORX4 name= 626
vai identificar n=ORX4 e v=ORX4
vai identificar n=690 e v=626
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70880b88d0>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= q
vai collapsar q 4 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dd32cd0>, <pydotplus.graphviz.Node object at 0x7f708dd3f190>, <pydotplus.graphviz.Node object at 0x7f708dd41250>, <pydotplus.graphviz.Node object at 0x7f708dc92e90>]
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dd3f190>, <pydotplus.graphviz.Node object at 0x7f708dd41250>, <pydotplus.graphviz.Node object at 0x7f708dc92e90>]
n = q name= 127
vai identificar n=q e v=q
vai identificar n=1287 e v=127
e_in_A.has_key(v.get_name())
False
name = 127
<pydotplus.graphviz.Edge object at 0x7f709384bdd0>
126
<pydotplus.graphviz.Node object at 0x7f7086f23ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709384bdd0>])
set([('126', '127')])
ORX3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>]
Set([('1286', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
name = 127
<pydotplus.graphviz.Edge object at 0x7f70937d3bd0>
120
<pydotplus.graphviz.Node object at 0x7f70813ce7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70937d3bd0>])
set([('120', '127')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708dd32cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090ff0110>])
set([('1287', '1288')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70937e6fd0>]
Set([('127', '128')])
(X2v2 imp q) 2
INtersecao ====================
Set([])
n = q name= 183
vai identificar n=q e v=q
vai identificar n=1287 e v=183
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708abb3ad0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70802f5310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093648f10>])
set([('182', '183')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70802f5310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093648f10>])
set([('182', '183')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70898ab9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70936503d0>])
set([('176', '183')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287'), ('182', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70898ab9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70936503d0>])
set([('176', '183')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>]
Set([('1286', '1287'), ('126', '1287'), ('1280', '1287'), ('120', '1287'), ('182', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7f708dd32cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70889f8b50>, <pydotplus.graphviz.Edge object at 0x7f7090ff0110>])
set([('1287', '128'), ('1287', '1288')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093691b90>, <pydotplus.graphviz.Edge object at 0x7f7088bdd650>]
Set([('1131', '184'), ('183', '184')])
(X3v2 imp q) 8 49
INtersecao ====================
Set([])
delete in_edge_Ancestor
n = q name= 1131
vai identificar n=q e v=q
vai identificar n=1287 e v=1131
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7086a7e650>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080484450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091560f50>])
set([('1130', '1131')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>, <pydotplus.graphviz.Edge object at 0x7f70805bbed0>]
Set([('1286', '1287'), ('126', '1287'), ('120', '1287'), ('182', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080484450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091560f50>])
set([('1130', '1131')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>, <pydotplus.graphviz.Edge object at 0x7f70805bbed0>]
Set([('1286', '1287'), ('126', '1287'), ('120', '1287'), ('182', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083137fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915b9ed0>])
set([('1124', '1131')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>, <pydotplus.graphviz.Edge object at 0x7f70805bbed0>, <pydotplus.graphviz.Edge object at 0x7f7080904390>]
Set([('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('120', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083137fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915b9ed0>])
set([('1124', '1131')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>, <pydotplus.graphviz.Edge object at 0x7f70805bbed0>, <pydotplus.graphviz.Edge object at 0x7f7080904390>]
Set([('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('120', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7f708dd32cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7088b96ad0>, <pydotplus.graphviz.Edge object at 0x7f70889f8b50>, <pydotplus.graphviz.Edge object at 0x7f7090ff0110>])
set([('1287', '128'), ('1287', '1288'), ('1287', '184')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7088bdd650>, <pydotplus.graphviz.Edge object at 0x7f7088b96ad0>]
Set([('1131', '184'), ('1287', '184')])
(X3v2 imp q) 8 49
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7088b96ad0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 13
formula que repete= X3v2 imp q
vai collapsar X3v2 imp q 3 vezes, no nivel 13
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dd32f90>, <pydotplus.graphviz.Node object at 0x7f708dd41310>, <pydotplus.graphviz.Node object at 0x7f708dd46810>]
labels = (X3v2 imp q) 66
labels = (X3v2 imp q) 13
labels = (X3v2 imp q) 37
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) 66 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dd41310>, <pydotplus.graphviz.Node object at 0x7f708dd46810>]
n = (X3v2 imp q) 13 name= 308
vai identificar n=(X3v2 imp q) 66 e v=(X3v2 imp q) 13
vai identificar n=1516 e v=308
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) 13 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70881a7ed0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =q e v = (X3v2 imp q) 13 n=(X3v2 imp q) 66 Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708941b750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70932c9ad0>])
set([('307', '308')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907e3d50>]
Set([('1515', '1516')])
(X3v2 imp q) 66
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708941b750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70932c9ad0>])
set([('307', '308')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907e3d50>]
Set([('1515', '1516')])
(X3v2 imp q) 66
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE q para (X3v2 imp q) 66
<pydotplus.graphviz.Node object at 0x7f708dd32f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709082b2d0>])
set([('1516', '1528')])
(X3v2 imp q) 66
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f7083207290>, <pydotplus.graphviz.Edge object at 0x7f70890cb3d0>]
Set([('1529', '1528'), ('308', '1528'), ('1516', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709082b2d0>])
delete in_edge_Ancestor
COLLAPSO DE REGRA DE INTRODUCAO v ====> (X3v2 imp q) 13 =13
COM REGRA DE INTRODUCAO n ====> 66
collapsing_nodes: atualizando conclusions: 66--> (X3v2 imp q) 66 13
collapsing_nodes: atualizando conclusions: 13--> (X3v2 imp q) 66 13
n = (X3v2 imp q) 37 name= 832
vai identificar n=(X3v2 imp q) 66 13 e v=(X3v2 imp q) 37
vai identificar n=1516 e v=832
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) 37 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7082413c90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =q e v = (X3v2 imp q) 37 n=(X3v2 imp q) 66 13 Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085591bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f18c90>])
set([('831', '832')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907e3d50>, <pydotplus.graphviz.Edge object at 0x7f70897350d0>]
Set([('307', '1516'), ('1515', '1516')])
(X3v2 imp q) 66 13
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085591bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f18c90>])
set([('831', '832')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907e3d50>, <pydotplus.graphviz.Edge object at 0x7f70897350d0>]
Set([('307', '1516'), ('1515', '1516')])
(X3v2 imp q) 66 13
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE q para (X3v2 imp q) 66 13
<pydotplus.graphviz.Node object at 0x7f708dd32f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709082b2d0>])
set([('1516', '1528')])
(X3v2 imp q) 66 13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907c6150>, <pydotplus.graphviz.Edge object at 0x7f709082b2d0>, <pydotplus.graphviz.Edge object at 0x7f70890cb3d0>]
Set([('1529', '1528'), ('1516', '1528'), ('832', '1528')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709082b2d0>])
delete in_edge_Ancestor
COLLAPSO DE REGRA DE INTRODUCAO v ====> (X3v2 imp q) 37 =37
COM REGRA DE INTRODUCAO n ====> 66
collapsing_nodes: atualizando conclusions: 66--> (X3v2 imp q) 66 13 37
collapsing_nodes: atualizando conclusions: 37--> (X3v2 imp q) 66 13 37
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 13
gravando dot file
nivel 14
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v1 imp (X3v1 imp q))', 'X3v1 imp q', 'X3v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v2 imp q)', 'X1v1', '(X3v4 imp q)', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X3v1 imp (X4v5 imp q))', 'X2v3', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', '(X2v3 imp (X3v5 imp q))', 'ORX4', '(X4v2 imp q)', '(X3v5 imp q)', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', 'q', 'X3v3 imp q']
REPEATED_FORMULAS =====> 
['(X4v5 imp q) imp ((ORX4 imp q))', '(ORX3 imp q)', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v5 imp q)', '(ORX4 imp q)', 'ORX3', 'ORX4', 'q']
==========
nivel da formula que repete= 14
formula que repete= (X4v5 imp q) imp ((ORX4 imp q))
vai collapsar (X4v5 imp q) imp ((ORX4 imp q)) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708cedc690>, <pydotplus.graphviz.Node object at 0x7f708ce1a210>]
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) imp ((ORX4 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708ce1a210>]
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 621
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=685 e v=621
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70865effd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7081d23890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092829050>])
set([('622', '621')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925d4990>, <pydotplus.graphviz.Edge object at 0x7f70925d4c90>]
Set([('686', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7081d23890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092829050>])
set([('622', '621')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925d4990>, <pydotplus.graphviz.Edge object at 0x7f70925d4c90>]
Set([('686', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089372750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70928204d0>])
set([('607', '621')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925d4990>, <pydotplus.graphviz.Edge object at 0x7f70925d4c90>, <pydotplus.graphviz.Edge object at 0x7f7086ae6b90>]
Set([('686', '685'), ('622', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089372750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70928204d0>])
set([('607', '621')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925d4990>, <pydotplus.graphviz.Edge object at 0x7f70925d4c90>, <pydotplus.graphviz.Edge object at 0x7f7086ae6b90>]
Set([('686', '685'), ('622', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7f708cedc690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70926e1e90>])
set([('685', '684')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926e1e90>, <pydotplus.graphviz.Edge object at 0x7f7092600710>, <pydotplus.graphviz.Edge object at 0x7f7084d83e90>, <pydotplus.graphviz.Edge object at 0x7f7081bdd950>]
Set([('685', '684'), ('683', '684'), ('619', '684'), ('621', '684')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70926e1e90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (ORX3 imp q)
vai collapsar (ORX3 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708d449c90>, <pydotplus.graphviz.Node object at 0x7f708dbd0250>]
labels = (ORX3 imp q)
labels = (ORX3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dbd0250>]
n = (ORX3 imp q) name= 120
vai identificar n=(ORX3 imp q) e v=(ORX3 imp q)
vai identificar n=1280 e v=120
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7089f54750>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) imp ((ORX3 imp q)) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708282a410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093874a50>])
set([('121', '120')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091aa3fd0>, <pydotplus.graphviz.Edge object at 0x7f70910c2f90>]
Set([('1281', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708282a410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093874a50>])
set([('121', '120')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091aa3fd0>, <pydotplus.graphviz.Edge object at 0x7f70910c2f90>]
Set([('1281', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) imp ((ORX3 imp q)) para (ORX3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp q) e v = (ORX3 imp q) n=(ORX3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083398d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709387ced0>])
set([('11', '120')])
(X3v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091aa3fd0>, <pydotplus.graphviz.Edge object at 0x7f70910c2f90>, <pydotplus.graphviz.Edge object at 0x7f70847d0a50>]
Set([('1281', '1280'), ('121', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083398d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709387ced0>])
set([('11', '120')])
(X3v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091aa3fd0>, <pydotplus.graphviz.Edge object at 0x7f70910c2f90>, <pydotplus.graphviz.Edge object at 0x7f70847d0a50>]
Set([('1281', '1280'), ('121', '1280'), ('1220', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp q) para (ORX3 imp q)
<pydotplus.graphviz.Node object at 0x7f708d449c90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090fdacd0>])
set([('1280', '1287')])
(ORX3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f70813ede50>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>, <pydotplus.graphviz.Edge object at 0x7f70805bbed0>, <pydotplus.graphviz.Edge object at 0x7f7080904390>, <pydotplus.graphviz.Edge object at 0x7f7083064610>]
Set([('1124', '1287'), ('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('120', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090fdacd0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X3v1 imp q)
vai collapsar (X3v1 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dbd0290>, <pydotplus.graphviz.Node object at 0x7f708d47ae50>]
labels = (X3v1 imp q)
labels = (X3v1 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708d47ae50>]
n = (X3v1 imp q) name= 779
vai identificar n=(X3v1 imp q) e v=(X3v1 imp q)
vai identificar n=255 e v=779
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70860c42d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X2v1]36 e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708032c0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709216c890>])
set([('777', '779')])
[X2v1]36
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709338bed0>, <pydotplus.graphviz.Edge object at 0x7f70935569d0>]
Set([('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708032c0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709216c890>])
set([('777', '779')])
[X2v1]36
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709338bed0>, <pydotplus.graphviz.Edge object at 0x7f70935569d0>]
Set([('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X2v1]36 para (X3v1 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X2v1 imp (X3v1 imp q)) e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7086528510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70928e2a50>])
set([('778', '779')])
(X2v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709338bed0>, <pydotplus.graphviz.Edge object at 0x7f70935569d0>, <pydotplus.graphviz.Edge object at 0x7f70877c6b90>]
Set([('777', '255'), ('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7086528510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70928e2a50>])
set([('778', '779')])
(X2v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709338bed0>, <pydotplus.graphviz.Edge object at 0x7f70935569d0>, <pydotplus.graphviz.Edge object at 0x7f70877c6b90>]
Set([('777', '255'), ('254', '255'), ('253', '255')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X2v1 imp (X3v1 imp q)) para (X3v1 imp q)
<pydotplus.graphviz.Node object at 0x7f708dbd0290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7087e08550>])
set([('255', '1529')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>, <pydotplus.graphviz.Edge object at 0x7f7087e08550>, <pydotplus.graphviz.Edge object at 0x7f7085f5ca90>, <pydotplus.graphviz.Edge object at 0x7f708337be50>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('370', '1529'), ('1530', '1529'), ('779', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7087e08550>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai collapsar (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) 3 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dbd0310>, <pydotplus.graphviz.Node object at 0x7f708dc0c6d0>, <pydotplus.graphviz.Node object at 0x7f708d465fd0>]
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dc0c6d0>, <pydotplus.graphviz.Node object at 0x7f708d465fd0>]
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 370
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=1530 e v=370
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7080c08890>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708334f690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fee8d0>])
set([('371', '370')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>]
Set([('1531', '1530'), ('1523', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708334f690>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fee8d0>])
set([('371', '370')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>]
Set([('1531', '1530'), ('1523', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708a0550d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092ff4d50>])
set([('363', '370')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>]
Set([('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708a0550d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092ff4d50>])
set([('363', '370')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>]
Set([('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7f708dbd0310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907f90d0>])
set([('1530', '1529')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7081520ad0>, <pydotplus.graphviz.Edge object at 0x7f7087e08550>, <pydotplus.graphviz.Edge object at 0x7f7085f5ca90>]
Set([('894', '1529'), ('1464', '1529'), ('255', '1529'), ('1530', '1529'), ('370', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70907f90d0>])
delete in_edge_Ancestor
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 894
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=1530 e v=894
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7083a456d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7082117150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e6f950>])
set([('895', '894')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>, <pydotplus.graphviz.Edge object at 0x7f708a6cdd50>]
Set([('363', '1530'), ('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7082117150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e6f950>])
set([('895', '894')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>, <pydotplus.graphviz.Edge object at 0x7f708a6cdd50>]
Set([('363', '1530'), ('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) 39 e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085deb4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092be8ad0>])
set([('888', '894')])
(X3v4 imp q) 39
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>, <pydotplus.graphviz.Edge object at 0x7f708a6cdd50>, <pydotplus.graphviz.Edge object at 0x7f708052f3d0>]
Set([('1531', '1530'), ('895', '1530'), ('363', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085deb4d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092be8ad0>])
set([('888', '894')])
(X3v4 imp q) 39
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>, <pydotplus.graphviz.Edge object at 0x7f708a6cdd50>, <pydotplus.graphviz.Edge object at 0x7f708052f3d0>]
Set([('1531', '1530'), ('895', '1530'), ('363', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) 39 para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7f708dbd0310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907f90d0>])
set([('1530', '1529')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907f90d0>, <pydotplus.graphviz.Edge object at 0x7f70907f99d0>, <pydotplus.graphviz.Edge object at 0x7f7087e08550>, <pydotplus.graphviz.Edge object at 0x7f7085f5ca90>]
Set([('894', '1529'), ('1464', '1529'), ('1530', '1529'), ('255', '1529')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70907f90d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai collapsar (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dc96dd0>, <pydotplus.graphviz.Node object at 0x7f708d465390>]
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708d465390>]
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 1147
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=247 e v=1147
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70820dc210>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708219c750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915037d0>])
set([('1148', '1147')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093501890>, <pydotplus.graphviz.Edge object at 0x7f7093487d10>]
Set([('248', '247'), ('187', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708219c750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915037d0>])
set([('1148', '1147')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093501890>, <pydotplus.graphviz.Edge object at 0x7f7093487d10>]
Set([('248', '247'), ('187', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7082c52410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914da690>])
set([('1135', '1147')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093501890>, <pydotplus.graphviz.Edge object at 0x7f7093487d10>, <pydotplus.graphviz.Edge object at 0x7f708708ed10>]
Set([('248', '247'), ('187', '247'), ('1148', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7082c52410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70914da690>])
set([('1135', '1147')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093501890>, <pydotplus.graphviz.Edge object at 0x7f7093487d10>, <pydotplus.graphviz.Edge object at 0x7f708708ed10>]
Set([('248', '247'), ('187', '247'), ('1148', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7f708dc96dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70934e6f10>])
set([('247', '246')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934e6f10>, <pydotplus.graphviz.Edge object at 0x7f70934ee3d0>, <pydotplus.graphviz.Edge object at 0x7f7088c96490>, <pydotplus.graphviz.Edge object at 0x7f708310e750>]
Set([('247', '246'), ('240', '246'), ('1139', '246'), ('1147', '246')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70934e6f10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708cef0510>, <pydotplus.graphviz.Node object at 0x7f708ce2e090>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708ce2e090>]
n = (X4v5 imp q) name= 619
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=683 e v=619
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70838b5110>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]27 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708715f410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092795a10>])
set([('617', '619')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70929de510>, <pydotplus.graphviz.Edge object at 0x7f7092b238d0>]
Set([('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708715f410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092795a10>])
set([('617', '619')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70929de510>, <pydotplus.graphviz.Edge object at 0x7f7092b238d0>]
Set([('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]27 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70845d8750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927aa990>])
set([('618', '619')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70929de510>, <pydotplus.graphviz.Edge object at 0x7f7092b238d0>, <pydotplus.graphviz.Edge object at 0x7f708901dc50>]
Set([('617', '683'), ('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70845d8750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927aa990>])
set([('618', '619')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70929de510>, <pydotplus.graphviz.Edge object at 0x7f7092b238d0>, <pydotplus.graphviz.Edge object at 0x7f708901dc50>]
Set([('617', '683'), ('682', '683'), ('681', '683')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708cef0510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092600710>])
set([('683', '684')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926e1e90>, <pydotplus.graphviz.Edge object at 0x7f7092600710>, <pydotplus.graphviz.Edge object at 0x7f7081bdd950>]
Set([('685', '684'), ('683', '684'), ('619', '684')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7092600710>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dbfe950>, <pydotplus.graphviz.Node object at 0x7f708d45f6d0>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708d45f6d0>]
n = (ORX4 imp q) name= 1124
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=176 e v=1124
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708181bed0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708597cf10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915c7250>])
set([('1125', '1124')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375b210>, <pydotplus.graphviz.Edge object at 0x7f7093756390>]
Set([('177', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708597cf10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915c7250>])
set([('1125', '1124')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375b210>, <pydotplus.graphviz.Edge object at 0x7f7093756390>]
Set([('177', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70892e6f10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915cc6d0>])
set([('1123', '1124')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375b210>, <pydotplus.graphviz.Edge object at 0x7f7093756390>, <pydotplus.graphviz.Edge object at 0x7f708255c450>]
Set([('177', '176'), ('1125', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70892e6f10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915cc6d0>])
set([('1123', '1124')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375b210>, <pydotplus.graphviz.Edge object at 0x7f7093756390>, <pydotplus.graphviz.Edge object at 0x7f708255c450>]
Set([('177', '176'), ('1125', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708dbfe950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70805bbed0>])
set([('176', '1287')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090fd3850>, <pydotplus.graphviz.Edge object at 0x7f7090fdacd0>, <pydotplus.graphviz.Edge object at 0x7f708380c190>, <pydotplus.graphviz.Edge object at 0x7f7089ce1990>, <pydotplus.graphviz.Edge object at 0x7f70805bbed0>, <pydotplus.graphviz.Edge object at 0x7f7080904390>, <pydotplus.graphviz.Edge object at 0x7f7083064610>]
Set([('1124', '1287'), ('1286', '1287'), ('126', '1287'), ('1130', '1287'), ('182', '1287'), ('176', '1287'), ('1280', '1287')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70805bbed0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= ORX3
vai collapsar ORX3 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dbd0c90>, <pydotplus.graphviz.Node object at 0x7f708dbec0d0>]
labels = ORX3
labels = ORX3
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX3 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708dbec0d0>]
n = ORX3 name= 126
vai identificar n=ORX3 e v=ORX3
vai identificar n=1286 e v=126
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX3 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7081391810>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= ORX4
vai collapsar ORX4 2 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dbe5290>, <pydotplus.graphviz.Node object at 0x7f708d9e3e10>]
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708d9e3e10>]
n = ORX4 name= 1130
vai identificar n=ORX4 e v=ORX4
vai identificar n=182 e v=1130
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7080367e90>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 14
formula que repete= q
vai collapsar q 7 vezes, no nivel 14
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708dbec950>, <pydotplus.graphviz.Node object at 0x7f708f56a890>, <pydotplus.graphviz.Node object at 0x7f708dc82b90>, <pydotplus.graphviz.Node object at 0x7f708d47acd0>, <pydotplus.graphviz.Node object at 0x7f708d462bd0>, <pydotplus.graphviz.Node object at 0x7f708dcc8dd0>, <pydotplus.graphviz.Node object at 0x7f708cec8810>]
labels = q
labels = q
labels = q
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708f56a890>, <pydotplus.graphviz.Node object at 0x7f708dc82b90>, <pydotplus.graphviz.Node object at 0x7f708d47acd0>, <pydotplus.graphviz.Node object at 0x7f708d462bd0>, <pydotplus.graphviz.Node object at 0x7f708dcc8dd0>, <pydotplus.graphviz.Node object at 0x7f708cec8810>]
n = q name= 1515
vai identificar n=q e v=q
vai identificar n=1411 e v=1515
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708714ce50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708751c390>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907c94d0>])
set([('1514', '1515')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>]
Set([('1410', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708751c390>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907c94d0>])
set([('1514', '1515')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>]
Set([('1410', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084466d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907d0950>])
set([('1508', '1515')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>]
Set([('1410', '1411'), ('1514', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084466d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907d0950>])
set([('1508', '1515')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>]
Set([('1410', '1411'), ('1514', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7f708dbec950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70909ee390>])
set([('1411', '1412')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907e3d50>, <pydotplus.graphviz.Edge object at 0x7f70897350d0>, <pydotplus.graphviz.Edge object at 0x7f70880c8a10>]
Set([('307', '1516'), ('1515', '1516'), ('831', '1516')])
(X3v2 imp q) 66 13 37
INtersecao ====================
Set([])
delete in_edge_Ancestor
n = q name= 307
vai identificar n=q e v=q
vai identificar n=1411 e v=307
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a7ac5d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708a8ce8d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933b5910>])
set([('306', '307')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>]
Set([('1410', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708a8ce8d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933b5910>])
set([('306', '307')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>]
Set([('1410', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70830dc150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933a76d0>])
set([('300', '307')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>]
Set([('1410', '1411'), ('306', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70830dc150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933a76d0>])
set([('300', '307')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>]
Set([('1410', '1411'), ('306', '1411'), ('1514', '1411'), ('1508', '1411'), ('1404', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7f708dbec950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70909ee390>, <pydotplus.graphviz.Edge object at 0x7f7087b01950>])
set([('1411', '1412'), ('1411', '1516')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70897350d0>, <pydotplus.graphviz.Edge object at 0x7f70880c8a10>, <pydotplus.graphviz.Edge object at 0x7f7087b01950>]
Set([('307', '1516'), ('1411', '1516'), ('831', '1516')])
(X3v2 imp q) 66 13 37
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7087b01950>])
delete in_edge_Ancestor
n = q name= 831
vai identificar n=q e v=q
vai identificar n=1411 e v=831
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= q com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7088e4c210>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =ORX4 e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708299cf90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f7f410>])
set([('830', '831')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708299cf90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f7f410>])
set([('830', '831')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE ORX4 para q
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(ORX4 imp q) e v = q n=q Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080891c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f05890>])
set([('824', '831')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080891c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f05890>])
set([('824', '831')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (ORX4 imp q) para q
<pydotplus.graphviz.Node object at 0x7f708dbec950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70909ee390>, <pydotplus.graphviz.Edge object at 0x7f7087b01950>])
set([('1411', '1412'), ('1411', '1516')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70880c8a10>, <pydotplus.graphviz.Edge object at 0x7f7087b01950>]
Set([('1411', '1516'), ('831', '1516')])
(X3v2 imp q) 66 13 37
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7087b01950>])
delete in_edge_Ancestor
n = q name= 1079
vai identificar n=q e v=q
vai identificar n=1411 e v=1079
e_in_A.has_key(v.get_name())
False
name = 1079
<pydotplus.graphviz.Edge object at 0x7f709186ff10>
1078
<pydotplus.graphviz.Node object at 0x7f708170e950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709186ff10>])
set([('1078', '1079')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
name = 1079
<pydotplus.graphviz.Edge object at 0x7f7092095d10>
1072
<pydotplus.graphviz.Node object at 0x7f70823fa210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092095d10>])
set([('1072', '1079')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>]
Set([('300', '1411'), ('306', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708dbec950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70909ee390>, <pydotplus.graphviz.Edge object at 0x7f7087b01950>])
set([('1411', '1412'), ('1411', '1516')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091e8e2d0>]
Set([('1079', '1080')])
(X3v1 imp q) 47
INtersecao ====================
Set([])
n = q name= 499
vai identificar n=q e v=q
vai identificar n=1411 e v=499
e_in_A.has_key(v.get_name())
False
name = 499
<pydotplus.graphviz.Edge object at 0x7f7092e6b510>
498
<pydotplus.graphviz.Node object at 0x7f7085fba490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e6b510>])
set([('498', '499')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f708219c090>]
Set([('300', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
name = 499
<pydotplus.graphviz.Edge object at 0x7f7092e6f4d0>
492
<pydotplus.graphviz.Node object at 0x7f708abd2990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e6f4d0>])
set([('492', '499')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f708219c090>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>]
Set([('300', '1411'), ('498', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708dbec950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70873dfa10>, <pydotplus.graphviz.Edge object at 0x7f70909ee390>, <pydotplus.graphviz.Edge object at 0x7f7087b01950>])
set([('1411', '1412'), ('1411', '1516'), ('1411', '1080')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092caf350>]
Set([('499', '500')])
(X3v4 imp q) 22
INtersecao ====================
Set([])
n = q name= 747
vai identificar n=q e v=q
vai identificar n=1411 e v=747
e_in_A.has_key(v.get_name())
False
name = 747
<pydotplus.graphviz.Edge object at 0x7f7092329250>
746
<pydotplus.graphviz.Node object at 0x7f70807a5f50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092329250>])
set([('746', '747')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f708219c090>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>, <pydotplus.graphviz.Edge object at 0x7f70873dfe90>]
Set([('300', '1411'), ('498', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([])
name = 747
<pydotplus.graphviz.Edge object at 0x7f709231f390>
740
<pydotplus.graphviz.Node object at 0x7f70866d0550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709231f390>])
set([('740', '747')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f708219c090>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>, <pydotplus.graphviz.Edge object at 0x7f70873dfe90>, <pydotplus.graphviz.Edge object at 0x7f7084fdc890>]
Set([('300', '1411'), ('498', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411'), ('746', '1411')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708dbec950>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70873dfa10>, <pydotplus.graphviz.Edge object at 0x7f70909ee390>, <pydotplus.graphviz.Edge object at 0x7f7087b01950>, <pydotplus.graphviz.Edge object at 0x7f708170ec90>])
set([('1411', '1412'), ('1411', '1516'), ('1411', '500'), ('1411', '1080')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709239a490>]
Set([('747', '748')])
(X3v3 imp q) 32
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 14
gravando dot file
nivel 15
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v1 imp (X3v1 imp q))', 'X3v1 imp q', 'X3v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v4 imp (X4v5 imp q))', '(X2v2 imp (X3v2 imp q))', '(X3v2 imp q)', 'X1v1', '(X3v4 imp q)', '(ORX3 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', 'X2v4', '(X3v1 imp (X4v5 imp q))', 'X2v1', 'X2v2', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', 'X1v2', '(ORX4 imp q)', '(X2v4 imp (X3v5 imp q))', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX3', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))', 'ORX4', '(X4v2 imp q)', '(X2v4 imp (X3v4 imp q))', '(X3v5 imp q)', 'X3v4', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X1v2 imp (X4v2 imp q))', 'X4v4 imp q', 'q', 'X3v2 imp q', '(X2v1 imp (X3v1 imp q))', '(X3v3 imp q)']
REPEATED_FORMULAS =====> 
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v4 imp q)', 'X2v4', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(ORX4 imp q)', '(X3v2 imp q) imp ((ORX3 imp q))', 'ORX4', '(X4v2 imp q)', 'q', '(X3v3 imp q)']
==========
nivel da formula que repete= 15
formula que repete= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai collapsar (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708ca41a10>, <pydotplus.graphviz.Node object at 0x7f708c939fd0>]
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c939fd0>]
n = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) name= 1148
vai identificar n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai identificar n=248 e v=1148
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a449150>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080ace590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091574350>])
set([('1149', '1148')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934a26d0>, <pydotplus.graphviz.Edge object at 0x7f709349c150>]
Set([('249', '248'), ('243', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080ace590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091574350>])
set([('1149', '1148')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934a26d0>, <pydotplus.graphviz.Edge object at 0x7f709349c150>]
Set([('249', '248'), ('243', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085f04790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915617d0>])
set([('1143', '1148')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934a26d0>, <pydotplus.graphviz.Edge object at 0x7f709349c150>, <pydotplus.graphviz.Edge object at 0x7f70869bd050>]
Set([('249', '248'), ('243', '248'), ('1149', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085f04790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915617d0>])
set([('1143', '1148')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934a26d0>, <pydotplus.graphviz.Edge object at 0x7f709349c150>, <pydotplus.graphviz.Edge object at 0x7f70869bd050>]
Set([('249', '248'), ('243', '248'), ('1149', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
<pydotplus.graphviz.Node object at 0x7f708ca41a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093501890>])
set([('248', '247')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093501890>, <pydotplus.graphviz.Edge object at 0x7f7093487d10>, <pydotplus.graphviz.Edge object at 0x7f708708ed10>, <pydotplus.graphviz.Edge object at 0x7f7086c26dd0>]
Set([('248', '247'), ('1135', '247'), ('187', '247'), ('1148', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7093501890>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v5 imp q) imp ((ORX4 imp q))
vai collapsar (X4v5 imp q) imp ((ORX4 imp q)) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c9c37d0>, <pydotplus.graphviz.Node object at 0x7f708c979250>]
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) imp ((ORX4 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c979250>]
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 1125
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=177 e v=1125
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708710c190>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089c0e090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915e8090>])
set([('1126', '1125')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936d2050>, <pydotplus.graphviz.Edge object at 0x7f70936d84d0>]
Set([('139', '177'), ('178', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089c0e090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915e8090>])
set([('1126', '1125')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936d2050>, <pydotplus.graphviz.Edge object at 0x7f70936d84d0>]
Set([('139', '177'), ('178', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707fcdbfd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915ee510>])
set([('1111', '1125')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936d2050>, <pydotplus.graphviz.Edge object at 0x7f70936d84d0>, <pydotplus.graphviz.Edge object at 0x7f7083a21b90>]
Set([('139', '177'), ('178', '177'), ('1126', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707fcdbfd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915ee510>])
set([('1111', '1125')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936d2050>, <pydotplus.graphviz.Edge object at 0x7f70936d84d0>, <pydotplus.graphviz.Edge object at 0x7f7083a21b90>]
Set([('139', '177'), ('178', '177'), ('1126', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7f708c9c37d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709375b210>])
set([('177', '176')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375b210>, <pydotplus.graphviz.Edge object at 0x7f7093756390>, <pydotplus.graphviz.Edge object at 0x7f708255c450>, <pydotplus.graphviz.Edge object at 0x7f70892e6d10>]
Set([('177', '176'), ('1125', '176'), ('1123', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709375b210>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v4 imp q)
vai collapsar (X3v4 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c9a9290>, <pydotplus.graphviz.Node object at 0x7f708c9e6810>]
labels = (X3v4 imp q)
labels = (X3v4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c9e6810>]
n = (X3v4 imp q) name= 363
vai identificar n=(X3v4 imp q) e v=(X3v4 imp q)
vai identificar n=1523 e v=363
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7085b9d1d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X2v4]12 e v = (X3v4 imp q) n=(X3v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080861610>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093506ad0>])
set([('361', '363')])
[X2v4]12
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907a2dd0>, <pydotplus.graphviz.Edge object at 0x7f70907b1790>]
Set([('1521', '1523'), ('1522', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080861610>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093506ad0>])
set([('361', '363')])
[X2v4]12
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907a2dd0>, <pydotplus.graphviz.Edge object at 0x7f70907b1790>]
Set([('1521', '1523'), ('1522', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X2v4]12 para (X3v4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X2v4 imp (X3v4 imp q)) e v = (X3v4 imp q) n=(X3v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089c28ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70930c61d0>])
set([('362', '363')])
(X2v4 imp (X3v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907a2dd0>, <pydotplus.graphviz.Edge object at 0x7f70907b1790>, <pydotplus.graphviz.Edge object at 0x7f70819253d0>]
Set([('1521', '1523'), ('1522', '1523'), ('361', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089c28ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70930c61d0>])
set([('362', '363')])
(X2v4 imp (X3v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907a2dd0>, <pydotplus.graphviz.Edge object at 0x7f70907b1790>, <pydotplus.graphviz.Edge object at 0x7f70819253d0>]
Set([('1521', '1523'), ('1522', '1523'), ('361', '1523')])
(X3v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X2v4 imp (X3v4 imp q)) para (X3v4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c9a9290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709076ec50>])
set([('1523', '1530')])
(X3v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>, <pydotplus.graphviz.Edge object at 0x7f708a6cdd50>, <pydotplus.graphviz.Edge object at 0x7f708052f3d0>, <pydotplus.graphviz.Edge object at 0x7f708217ea90>]
Set([('1531', '1530'), ('1523', '1530'), ('888', '1530'), ('363', '1530'), ('371', '1530'), ('895', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709076ec50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= X2v4
vai collapsar X2v4 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c9170d0>, <pydotplus.graphviz.Node object at 0x7f708c904210>]
labels = [X2v4]46
labels = [X2v4]29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c904210>]
n = [X2v4]29 name= 753
vai identificar n=[X2v4]46 e v=[X2v4]29
vai identificar n=1137 e v=753
e_in_A.has_key(v.get_name())
False
<pydotplus.graphviz.Node object at 0x7f708c9170d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091578850>])
set([('1137', '1139')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092275750>, <pydotplus.graphviz.Edge object at 0x7f709220a6d0>]
Set([('753', '755'), ('754', '755')])
(X3v5 imp q)
INtersecao ====================
Set([])
v ====> [X2v4]29 =29
n ======> [X2v4]46 =46
APAGANDO ARESTA [X2v4]29==> (X2v4 imp q) 29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai collapsar (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) 3 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708ca29c10>, <pydotplus.graphviz.Node object at 0x7f708c9d8950>, <pydotplus.graphviz.Node object at 0x7f708c97c190>]
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c9d8950>, <pydotplus.graphviz.Node object at 0x7f708c97c190>]
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 371
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=1531 e v=371
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7080511ad0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70841f7e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092f90710>])
set([('372', '371')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>]
Set([('1532', '1531'), ('1519', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70841f7e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092f90710>])
set([('372', '371')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>]
Set([('1532', '1531'), ('1519', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) 15 e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707fcfbe90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092f8c250>])
set([('360', '371')])
(X3v3 imp q) 15
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e2f350>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707fcfbe90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092f8c250>])
set([('360', '371')])
(X3v3 imp q) 15
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e2f350>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) 15 para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7f708ca29c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907697d0>])
set([('1531', '1530')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708714cd50>, <pydotplus.graphviz.Edge object at 0x7f708052f3d0>, <pydotplus.graphviz.Edge object at 0x7f708217ea90>]
Set([('888', '1530'), ('895', '1530'), ('1531', '1530'), ('1523', '1530'), ('371', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70907697d0>])
delete in_edge_Ancestor
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 895
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=1531 e v=895
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708094e4d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70850ca8d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091db58d0>])
set([('896', '895')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e2f350>, <pydotplus.graphviz.Edge object at 0x7f7083e187d0>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531'), ('360', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70850ca8d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091db58d0>])
set([('896', '895')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e2f350>, <pydotplus.graphviz.Edge object at 0x7f7083e187d0>]
Set([('1532', '1531'), ('1519', '1531'), ('372', '1531'), ('360', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70800ea9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091e359d0>])
set([('835', '895')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e2f350>, <pydotplus.graphviz.Edge object at 0x7f7083e187d0>, <pydotplus.graphviz.Edge object at 0x7f7084555cd0>]
Set([('1532', '1531'), ('360', '1531'), ('1519', '1531'), ('372', '1531'), ('896', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70800ea9d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091e359d0>])
set([('835', '895')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e2f350>, <pydotplus.graphviz.Edge object at 0x7f7083e187d0>, <pydotplus.graphviz.Edge object at 0x7f7084555cd0>]
Set([('1532', '1531'), ('360', '1531'), ('1519', '1531'), ('372', '1531'), ('896', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7f708ca29c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907697d0>])
set([('1531', '1530')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907697d0>, <pydotplus.graphviz.Edge object at 0x7f709076ec50>, <pydotplus.graphviz.Edge object at 0x7f708052f3d0>, <pydotplus.graphviz.Edge object at 0x7f708217ea90>]
Set([('888', '1530'), ('895', '1530'), ('1531', '1530'), ('1523', '1530')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70907697d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai collapsar (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c8bfd50>, <pydotplus.graphviz.Node object at 0x7f708c8b33d0>]
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c8b33d0>]
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 622
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=686 e v=622
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7082c97890>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70892dd890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092748a10>])
set([('623', '622')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925455d0>, <pydotplus.graphviz.Edge object at 0x7f709254ba50>]
Set([('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70892dd890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092748a10>])
set([('623', '622')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925455d0>, <pydotplus.graphviz.Edge object at 0x7f709254ba50>]
Set([('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70881fcf10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927ef350>])
set([('615', '622')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925455d0>, <pydotplus.graphviz.Edge object at 0x7f709254ba50>, <pydotplus.graphviz.Edge object at 0x7f708917e590>]
Set([('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70881fcf10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927ef350>])
set([('615', '622')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925455d0>, <pydotplus.graphviz.Edge object at 0x7f709254ba50>, <pydotplus.graphviz.Edge object at 0x7f708917e590>]
Set([('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c8bfd50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70925d4990>])
set([('686', '685')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925d4990>, <pydotplus.graphviz.Edge object at 0x7f70925d4c90>, <pydotplus.graphviz.Edge object at 0x7f7086ae6b90>, <pydotplus.graphviz.Edge object at 0x7f7086051390>]
Set([('686', '685'), ('607', '685'), ('622', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70925d4990>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708ca18a90>, <pydotplus.graphviz.Node object at 0x7f708ca07310>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708ca07310>]
n = (X4v5 imp q) name= 1123
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=175 e v=1123
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7080edb090>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]49 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7088278790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70916f04d0>])
set([('1121', '1123')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a26390>, <pydotplus.graphviz.Edge object at 0x7f7093774ad0>]
Set([('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7088278790>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70916f04d0>])
set([('1121', '1123')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a26390>, <pydotplus.graphviz.Edge object at 0x7f7093774ad0>]
Set([('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]49 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083b00bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709162c810>])
set([('1122', '1123')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a26390>, <pydotplus.graphviz.Edge object at 0x7f7093774ad0>, <pydotplus.graphviz.Edge object at 0x7f70882775d0>]
Set([('1121', '175'), ('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083b00bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709162c810>])
set([('1122', '1123')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a26390>, <pydotplus.graphviz.Edge object at 0x7f7093774ad0>, <pydotplus.graphviz.Edge object at 0x7f70882775d0>]
Set([('1121', '175'), ('173', '175'), ('174', '175')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708ca18a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093756390>])
set([('175', '176')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375b210>, <pydotplus.graphviz.Edge object at 0x7f7093756390>, <pydotplus.graphviz.Edge object at 0x7f70892e6d10>]
Set([('177', '176'), ('1123', '176'), ('175', '176')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7093756390>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 6 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c9aeb10>, <pydotplus.graphviz.Node object at 0x7f708c9f0410>, <pydotplus.graphviz.Node object at 0x7f708c8c7690>, <pydotplus.graphviz.Node object at 0x7f708c983290>, <pydotplus.graphviz.Node object at 0x7f708c8f5850>, <pydotplus.graphviz.Node object at 0x7f708c8abed0>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c9f0410>, <pydotplus.graphviz.Node object at 0x7f708c8c7690>, <pydotplus.graphviz.Node object at 0x7f708c983290>, <pydotplus.graphviz.Node object at 0x7f708c8f5850>, <pydotplus.graphviz.Node object at 0x7f708c8abed0>]
n = (ORX4 imp q) name= 300
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=300
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7086a7bc50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7081a8bad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933ef0d0>])
set([('301', '300')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>]
Set([('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7081a8bad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933ef0d0>])
set([('301', '300')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>]
Set([('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085487ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933f8050>])
set([('299', '300')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085487ad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933f8050>])
set([('299', '300')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c9aeb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7081986cd0>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f708219c090>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>, <pydotplus.graphviz.Edge object at 0x7f70873dfe90>, <pydotplus.graphviz.Edge object at 0x7f7084fdc890>, <pydotplus.graphviz.Edge object at 0x7f70880c6c10>]
Set([('300', '1411'), ('498', '1411'), ('740', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411'), ('746', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 824
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=824
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70858c8f90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084a315d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709202c990>])
set([('825', '824')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084a315d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709202c990>])
set([('825', '824')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70878aa450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092026b90>])
set([('823', '824')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70878aa450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092026b90>])
set([('823', '824')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c9aeb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082baf450>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f708219c090>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>, <pydotplus.graphviz.Edge object at 0x7f70873dfe90>, <pydotplus.graphviz.Edge object at 0x7f7084fdc890>, <pydotplus.graphviz.Edge object at 0x7f70880c6c10>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('824', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 1072
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=1072
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70846c8b10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089fe5ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919e3650>])
set([('1073', '1072')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089fe5ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919e3650>])
set([('1073', '1072')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70826bec90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919c9890>])
set([('1071', '1072')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70826bec90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919c9890>])
set([('1071', '1072')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c9aeb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f708219c090>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>, <pydotplus.graphviz.Edge object at 0x7f70873dfe90>, <pydotplus.graphviz.Edge object at 0x7f7084fdc890>, <pydotplus.graphviz.Edge object at 0x7f70880c6c10>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1072', '1411'), ('1514', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 492
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=492
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7083387250>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089d467d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c865d0>])
set([('493', '492')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089d467d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c865d0>])
set([('493', '492')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708090d990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e7b1d0>])
set([('491', '492')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708090d990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e7b1d0>])
set([('491', '492')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c9aeb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>, <pydotplus.graphviz.Edge object at 0x7f70873dfe90>, <pydotplus.graphviz.Edge object at 0x7f7084fdc890>, <pydotplus.graphviz.Edge object at 0x7f70880c6c10>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('492', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 740
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1508 e v=740
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7088b87ad0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70870d92d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922ca710>])
set([('741', '740')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70870d92d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922ca710>])
set([('741', '740')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083c8ed10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922d2b90>])
set([('739', '740')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>, <pydotplus.graphviz.Edge object at 0x7f7081347790>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083c8ed10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922d2b90>])
set([('739', '740')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>, <pydotplus.graphviz.Edge object at 0x7f7081347790>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c9aeb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
set([('1508', '1411')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b3d50>, <pydotplus.graphviz.Edge object at 0x7f70909bc210>, <pydotplus.graphviz.Edge object at 0x7f7085392410>, <pydotplus.graphviz.Edge object at 0x7f70843a9410>, <pydotplus.graphviz.Edge object at 0x7f7081a22490>, <pydotplus.graphviz.Edge object at 0x7f7085f37fd0>, <pydotplus.graphviz.Edge object at 0x7f7082a63350>, <pydotplus.graphviz.Edge object at 0x7f7085fba850>, <pydotplus.graphviz.Edge object at 0x7f7084fdc890>, <pydotplus.graphviz.Edge object at 0x7f70880c6c10>]
Set([('498', '1411'), ('740', '1411'), ('306', '1411'), ('1514', '1411'), ('1410', '1411'), ('746', '1411'), ('1078', '1411'), ('830', '1411'), ('1404', '1411'), ('1508', '1411')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70843a9410>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v2 imp q) imp ((ORX3 imp q))
vai collapsar (X3v2 imp q) imp ((ORX3 imp q)) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708ca29e90>, <pydotplus.graphviz.Node object at 0x7f708ca1d5d0>]
labels = (X3v2 imp q) imp ((ORX3 imp q))
labels = (X3v2 imp q) imp ((ORX3 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp q) imp ((ORX3 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708ca1d5d0>]
n = (X3v2 imp q) imp ((ORX3 imp q)) name= 121
vai identificar n=(X3v2 imp q) imp ((ORX3 imp q)) e v=(X3v2 imp q) imp ((ORX3 imp q))
vai identificar n=1281 e v=121
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp q) imp ((ORX3 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70818d5e50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70828c5bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093816890>])
set([('122', '121')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709105b950>, <pydotplus.graphviz.Edge object at 0x7f7091063dd0>]
Set([('1282', '1281'), ('1167', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70828c5bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093816890>])
set([('122', '121')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709105b950>, <pydotplus.graphviz.Edge object at 0x7f7091063dd0>]
Set([('1282', '1281'), ('1167', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) para (X3v2 imp q) imp ((ORX3 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp q) e v = (X3v2 imp q) imp ((ORX3 imp q)) n=(X3v2 imp q) imp ((ORX3 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708843bf50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709381dd10>])
set([('7', '121')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709105b950>, <pydotplus.graphviz.Edge object at 0x7f7091063dd0>, <pydotplus.graphviz.Edge object at 0x7f70854bda90>]
Set([('1282', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708843bf50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709381dd10>])
set([('7', '121')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709105b950>, <pydotplus.graphviz.Edge object at 0x7f7091063dd0>, <pydotplus.graphviz.Edge object at 0x7f70854bda90>]
Set([('1282', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp q) para (X3v2 imp q) imp ((ORX3 imp q))
<pydotplus.graphviz.Node object at 0x7f708ca29e90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091aa3fd0>])
set([('1281', '1280')])
(X3v2 imp q) imp ((ORX3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091aa3fd0>, <pydotplus.graphviz.Edge object at 0x7f70910c2f90>, <pydotplus.graphviz.Edge object at 0x7f70847d0a50>, <pydotplus.graphviz.Edge object at 0x7f7087da9750>]
Set([('1281', '1280'), ('121', '1280'), ('1220', '1280'), ('11', '1280')])
(ORX3 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7091aa3fd0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= ORX4
vai collapsar ORX4 6 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c9b0250>, <pydotplus.graphviz.Node object at 0x7f708c9e6cd0>, <pydotplus.graphviz.Node object at 0x7f708c939cd0>, <pydotplus.graphviz.Node object at 0x7f708c91ded0>, <pydotplus.graphviz.Node object at 0x7f708c8e7e90>, <pydotplus.graphviz.Node object at 0x7f708c89f550>]
labels = ORX4
labels = ORX4
labels = ORX4
labels = ORX4
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c9e6cd0>, <pydotplus.graphviz.Node object at 0x7f708c939cd0>, <pydotplus.graphviz.Node object at 0x7f708c91ded0>, <pydotplus.graphviz.Node object at 0x7f708c8e7e90>, <pydotplus.graphviz.Node object at 0x7f708c89f550>]
n = ORX4 name= 306
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=306
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7082fd1710>]
n = ORX4 name= 830
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=830
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7084286550>]
n = ORX4 name= 1078
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=1078
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7082307fd0>]
n = ORX4 name= 498
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=498
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708abd2850>]
n = ORX4 name= 746
vai identificar n=ORX4 e v=ORX4
vai identificar n=1514 e v=746
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70850e6150>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X4v2 imp q)
vai collapsar (X4v2 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c854bd0>, <pydotplus.graphviz.Node object at 0x7f708c8ba990>]
labels = (X4v2 imp q)
labels = (X4v2 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c8ba990>]
n = (X4v2 imp q) name= 607
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=647 e v=607
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708aa14210>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v2]18 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70877efa10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c0f950>])
set([('605', '607')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926ed050>, <pydotplus.graphviz.Edge object at 0x7f709282c950>]
Set([('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70877efa10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c0f950>])
set([('605', '607')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926ed050>, <pydotplus.graphviz.Edge object at 0x7f709282c950>]
Set([('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v2]18 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70850bbb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709282fed0>])
set([('606', '607')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926ed050>, <pydotplus.graphviz.Edge object at 0x7f709282c950>, <pydotplus.graphviz.Edge object at 0x7f708540c350>]
Set([('605', '647'), ('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70850bbb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709282fed0>])
set([('606', '607')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70926ed050>, <pydotplus.graphviz.Edge object at 0x7f709282c950>, <pydotplus.graphviz.Edge object at 0x7f708540c350>]
Set([('605', '647'), ('646', '647'), ('645', '647')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7f708c854bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70925d4c90>])
set([('647', '685')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925d4990>, <pydotplus.graphviz.Edge object at 0x7f70925d4c90>, <pydotplus.graphviz.Edge object at 0x7f7086051390>]
Set([('686', '685'), ('607', '685'), ('647', '685')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70925d4c90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= q
vai collapsar q 3 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c989b10>, <pydotplus.graphviz.Node object at 0x7f708ca176d0>, <pydotplus.graphviz.Node object at 0x7f708c8db510>]
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708ca176d0>, <pydotplus.graphviz.Node object at 0x7f708c8db510>]
n = q name= 239
vai identificar n=q e v=q
vai identificar n=1463 e v=239
e_in_A.has_key(v.get_name())
False
name = 239
<pydotplus.graphviz.Edge object at 0x7f70935bb9d0>
238
<pydotplus.graphviz.Node object at 0x7f7083629cd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70935bb9d0>])
set([('238', '239')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b0650>, <pydotplus.graphviz.Edge object at 0x7f709099cad0>]
Set([('1462', '1463'), ('1456', '1463')])
q
INtersecao ====================
Set([])
name = 239
<pydotplus.graphviz.Edge object at 0x7f709359fe10>
232
<pydotplus.graphviz.Node object at 0x7f70897195d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709359fe10>])
set([('232', '239')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b0650>, <pydotplus.graphviz.Edge object at 0x7f709099cad0>, <pydotplus.graphviz.Edge object at 0x7f708690d990>]
Set([('1462', '1463'), ('1456', '1463'), ('238', '1463')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708c989b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090fa4ed0>])
set([('1463', '1464')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093586250>]
Set([('239', '240')])
(X3v4 imp q) 10
INtersecao ====================
Set([])
n = q name= 447
vai identificar n=q e v=q
vai identificar n=1463 e v=447
e_in_A.has_key(v.get_name())
False
name = 447
<pydotplus.graphviz.Edge object at 0x7f7092d7b950>
446
<pydotplus.graphviz.Node object at 0x7f7085cb47d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092d7b950>])
set([('446', '447')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b0650>, <pydotplus.graphviz.Edge object at 0x7f709099cad0>, <pydotplus.graphviz.Edge object at 0x7f708690d990>, <pydotplus.graphviz.Edge object at 0x7f7083609810>]
Set([('1462', '1463'), ('1456', '1463'), ('238', '1463'), ('232', '1463')])
q
INtersecao ====================
Set([])
name = 447
<pydotplus.graphviz.Edge object at 0x7f7092d80dd0>
440
<pydotplus.graphviz.Node object at 0x7f7080fe8510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092d80dd0>])
set([('440', '447')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b0650>, <pydotplus.graphviz.Edge object at 0x7f709099cad0>, <pydotplus.graphviz.Edge object at 0x7f708690d990>, <pydotplus.graphviz.Edge object at 0x7f7083609810>, <pydotplus.graphviz.Edge object at 0x7f70852f89d0>]
Set([('446', '1463'), ('1462', '1463'), ('1456', '1463'), ('238', '1463'), ('232', '1463')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708c989b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7082361d50>, <pydotplus.graphviz.Edge object at 0x7f7090fa4ed0>])
set([('1463', '1464'), ('1463', '240')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092d16210>]
Set([('447', '448')])
(X3v3 imp q) 20
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 15
formula que repete= (X3v3 imp q)
vai collapsar (X3v3 imp q) 2 vezes, no nivel 15
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c9e6a50>, <pydotplus.graphviz.Node object at 0x7f708c91dc90>]
labels = (X3v3 imp q)
labels = (X3v3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c91dc90>]
n = (X3v3 imp q) name= 1135
vai identificar n=(X3v3 imp q) e v=(X3v3 imp q)
vai identificar n=187 e v=1135
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70876b2b50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v3]35 e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085fd1590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709176a910>])
set([('1133', '1135')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375cb50>, <pydotplus.graphviz.Edge object at 0x7f70936d0490>]
Set([('186', '187'), ('185', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085fd1590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709176a910>])
set([('1133', '1135')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375cb50>, <pydotplus.graphviz.Edge object at 0x7f70936d0490>]
Set([('186', '187'), ('185', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v3]35 para (X3v3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v3 imp (X3v3 imp q)) e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707f7ecad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915e5650>])
set([('1134', '1135')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375cb50>, <pydotplus.graphviz.Edge object at 0x7f70936d0490>, <pydotplus.graphviz.Edge object at 0x7f708653e790>]
Set([('186', '187'), ('185', '187'), ('1133', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707f7ecad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70915e5650>])
set([('1134', '1135')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709375cb50>, <pydotplus.graphviz.Edge object at 0x7f70936d0490>, <pydotplus.graphviz.Edge object at 0x7f708653e790>]
Set([('186', '187'), ('185', '187'), ('1133', '187')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v3 imp (X3v3 imp q)) para (X3v3 imp q)
<pydotplus.graphviz.Node object at 0x7f708c9e6a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093487d10>])
set([('187', '247')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093501890>, <pydotplus.graphviz.Edge object at 0x7f7093487d10>, <pydotplus.graphviz.Edge object at 0x7f7086c26dd0>]
Set([('248', '247'), ('1135', '247'), ('187', '247')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7093487d10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 15
gravando dot file
nivel 16
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))', '(X1v4 imp (X3v4 imp q))', '(X4v1 imp q)', 'X3v4 imp q', '(X2v2 imp (X3v2 imp q))', 'X1v3', '(X3v2 imp q)', 'X1v4', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X4v4 imp q)', '(X2v1 imp (X3v5 imp q))', '(X1v3 imp (X3v3 imp q))', 'X2v4', 'X2v1', 'X2v2', 'X2v3', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', 'X1v2', '(ORX4 imp q)', '(X2v3 imp (X3v3 imp q))', '(X3v2 imp q) imp ((ORX3 imp q))', '(X3v2 imp (X4v5 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))', 'ORX4', '(X4v2 imp q)', '(X2v4 imp (X3v4 imp q))', 'X3v2', '(X3v5 imp q)', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X1v2 imp (X4v2 imp q))', '(X4v5 imp q) imp ((ORX4 imp q))', 'q', 'X3v3 imp q', '(X3v3 imp q)']
REPEATED_FORMULAS =====> 
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X3v1 imp q)', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X4v4 imp q)', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', 'X1v2', '(ORX4 imp q)', '(X3v2 imp (X4v5 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))', 'ORX4', '(X4v2 imp q)', 'X3v2', '(X3v5 imp q)', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X1v2 imp (X4v2 imp q))', '(X4v5 imp q) imp ((ORX4 imp q))', 'q', '(X3v3 imp q)']
==========
nivel da formula que repete= 16
formula que repete= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai collapsar (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) 3 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c83bb10>, <pydotplus.graphviz.Node object at 0x7f708c7e9850>, <pydotplus.graphviz.Node object at 0x7f708c727b10>]
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
labels = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c7e9850>, <pydotplus.graphviz.Node object at 0x7f708c727b10>]
n = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) name= 372
vai identificar n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai identificar n=1532 e v=372
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7084bcd3d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7087964c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fab090>])
set([('373', '372')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>]
Set([('1533', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7087964c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fab090>])
set([('373', '372')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>]
Set([('1533', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084182b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fb2510>])
set([('367', '372')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>, <pydotplus.graphviz.Edge object at 0x7f7083565550>]
Set([('1533', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084182b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fb2510>])
set([('367', '372')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>, <pydotplus.graphviz.Edge object at 0x7f7083565550>]
Set([('1533', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
<pydotplus.graphviz.Node object at 0x7f708c83bb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090782150>])
set([('1532', '1531')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e2f350>, <pydotplus.graphviz.Edge object at 0x7f7083e187d0>, <pydotplus.graphviz.Edge object at 0x7f7084555cd0>, <pydotplus.graphviz.Edge object at 0x7f70850cab90>]
Set([('1519', '1531'), ('1532', '1531'), ('360', '1531'), ('896', '1531'), ('835', '1531'), ('372', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090782150>])
delete in_edge_Ancestor
n = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) name= 896
vai identificar n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
vai identificar n=1532 e v=896
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7089b94fd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708a3813d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f2ae90>])
set([('897', '896')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>, <pydotplus.graphviz.Edge object at 0x7f7083565550>, <pydotplus.graphviz.Edge object at 0x7f7081792790>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708a3813d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f2ae90>])
set([('897', '896')])
(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>, <pydotplus.graphviz.Edge object at 0x7f7083565550>, <pydotplus.graphviz.Edge object at 0x7f7081792790>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v5 imp q) e v = (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) n=(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7081321b50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091ee3c50>])
set([('891', '896')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>, <pydotplus.graphviz.Edge object at 0x7f7083565550>, <pydotplus.graphviz.Edge object at 0x7f7081792790>, <pydotplus.graphviz.Edge object at 0x7f7081cb19d0>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('897', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7081321b50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091ee3c50>])
set([('891', '896')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709071ca90>, <pydotplus.graphviz.Edge object at 0x7f7090721f10>, <pydotplus.graphviz.Edge object at 0x7f7083565550>, <pydotplus.graphviz.Edge object at 0x7f7081792790>, <pydotplus.graphviz.Edge object at 0x7f7081cb19d0>]
Set([('1533', '1532'), ('367', '1532'), ('373', '1532'), ('897', '1532'), ('1527', '1532')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v5 imp q) para (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
<pydotplus.graphviz.Node object at 0x7f708c83bb10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090782150>])
set([('1532', '1531')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e187d0>, <pydotplus.graphviz.Edge object at 0x7f7084555cd0>, <pydotplus.graphviz.Edge object at 0x7f70850cab90>]
Set([('1532', '1531'), ('835', '1531'), ('360', '1531'), ('1519', '1531'), ('896', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090782150>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v1 imp q)
vai collapsar (X3v1 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c7914d0>, <pydotplus.graphviz.Node object at 0x7f708c83a350>]
labels = (X3v1 imp q)
labels = (X3v1 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c83a350>]
n = (X3v1 imp q) name= 7
vai identificar n=(X3v1 imp q) e v=(X3v1 imp q)
vai identificar n=1167 e v=7
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7086fd9410>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v1]1 e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708534d490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093cfa6d0>])
set([('5', '7')])
[X1v1]1
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709132ffd0>, <pydotplus.graphviz.Edge object at 0x7f70913c0590>]
Set([('1165', '1167'), ('1166', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708534d490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093cfa6d0>])
set([('5', '7')])
[X1v1]1
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709132ffd0>, <pydotplus.graphviz.Edge object at 0x7f70913c0590>]
Set([('1165', '1167'), ('1166', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v1]1 para (X3v1 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v1 imp (X3v1 imp q)) e v = (X3v1 imp q) n=(X3v1 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7088a10a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093dd67d0>])
set([('6', '7')])
(X1v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709132ffd0>, <pydotplus.graphviz.Edge object at 0x7f70913c0590>, <pydotplus.graphviz.Edge object at 0x7f7083aa9610>]
Set([('1165', '1167'), ('1166', '1167'), ('5', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7088a10a10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093dd67d0>])
set([('6', '7')])
(X1v1 imp (X3v1 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709132ffd0>, <pydotplus.graphviz.Edge object at 0x7f70913c0590>, <pydotplus.graphviz.Edge object at 0x7f7083aa9610>]
Set([('1165', '1167'), ('1166', '1167'), ('5', '1167')])
(X3v1 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v1 imp (X3v1 imp q)) para (X3v1 imp q)
<pydotplus.graphviz.Node object at 0x7f708c7914d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091063dd0>])
set([('1167', '1281')])
(X3v1 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709105b950>, <pydotplus.graphviz.Edge object at 0x7f7091063dd0>, <pydotplus.graphviz.Edge object at 0x7f70854bda90>, <pydotplus.graphviz.Edge object at 0x7f7087ad6150>]
Set([('1282', '1281'), ('7', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7091063dd0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai collapsar (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c78ca10>, <pydotplus.graphviz.Node object at 0x7f708c80bd90>]
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
labels = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c80bd90>]
n = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) name= 122
vai identificar n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) e v=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
vai identificar n=1282 e v=122
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a6636d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084237a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70938396d0>])
set([('123', '122')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709107d790>, <pydotplus.graphviz.Edge object at 0x7f7091077290>]
Set([('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084237a50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70938396d0>])
set([('123', '122')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709107d790>, <pydotplus.graphviz.Edge object at 0x7f7091077290>]
Set([('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp q) 5 e v = (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) n=(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7088aa1110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093834210>])
set([('116', '122')])
(X3v4 imp q) 5
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709107d790>, <pydotplus.graphviz.Edge object at 0x7f7091077290>, <pydotplus.graphviz.Edge object at 0x7f70866526d0>]
Set([('123', '1282'), ('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7088aa1110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093834210>])
set([('116', '122')])
(X3v4 imp q) 5
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709107d790>, <pydotplus.graphviz.Edge object at 0x7f7091077290>, <pydotplus.graphviz.Edge object at 0x7f70866526d0>]
Set([('123', '1282'), ('1275', '1282'), ('1283', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp q) 5 para (X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c78ca10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709105b950>])
set([('1282', '1281')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709105b950>, <pydotplus.graphviz.Edge object at 0x7f7091063dd0>, <pydotplus.graphviz.Edge object at 0x7f70854bda90>]
Set([('1282', '1281'), ('1167', '1281'), ('122', '1281')])
(X3v2 imp q) imp ((ORX3 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709105b950>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v4 imp q)
vai collapsar (X4v4 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c67a2d0>, <pydotplus.graphviz.Node object at 0x7f708c6447d0>]
labels = (X4v4 imp q)
labels = (X4v4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c6447d0>]
n = (X4v4 imp q) name= 615
vai identificar n=(X4v4 imp q) e v=(X4v4 imp q)
vai identificar n=679 e v=615
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7083b61fd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]27 e v = (X4v4 imp q) n=(X4v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70849a7bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927ec690>])
set([('613', '615')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70927ffb90>, <pydotplus.graphviz.Edge object at 0x7f7092906a50>]
Set([('678', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70849a7bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70927ec690>])
set([('613', '615')])
[X3v4]27
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70927ffb90>, <pydotplus.graphviz.Edge object at 0x7f7092906a50>]
Set([('678', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]27 para (X4v4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v4 imp q)) e v = (X4v4 imp q) n=(X4v4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70886b9d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092801610>])
set([('614', '615')])
(X3v4 imp (X4v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70927ffb90>, <pydotplus.graphviz.Edge object at 0x7f7092906a50>, <pydotplus.graphviz.Edge object at 0x7f70849a7710>]
Set([('678', '679'), ('613', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70886b9d90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092801610>])
set([('614', '615')])
(X3v4 imp (X4v4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70927ffb90>, <pydotplus.graphviz.Edge object at 0x7f7092906a50>, <pydotplus.graphviz.Edge object at 0x7f70849a7710>]
Set([('678', '679'), ('613', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v4 imp q)) para (X4v4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c67a2d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709254ba50>])
set([('679', '686')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925455d0>, <pydotplus.graphviz.Edge object at 0x7f709254ba50>, <pydotplus.graphviz.Edge object at 0x7f708917e590>, <pydotplus.graphviz.Edge object at 0x7f70854712d0>]
Set([('615', '686'), ('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709254ba50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai collapsar (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c727d10>, <pydotplus.graphviz.Node object at 0x7f708c64b110>]
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c64b110>]
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 1126
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=178 e v=1126
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708173e310>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70866385d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091588e90>])
set([('1127', '1126')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936f0e50>, <pydotplus.graphviz.Edge object at 0x7f70936f9310>]
Set([('172', '178'), ('179', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70866385d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091588e90>])
set([('1127', '1126')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936f0e50>, <pydotplus.graphviz.Edge object at 0x7f70936f9310>]
Set([('172', '178'), ('179', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080f1a210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091601990>])
set([('1119', '1126')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936f0e50>, <pydotplus.graphviz.Edge object at 0x7f70936f9310>, <pydotplus.graphviz.Edge object at 0x7f7088cce910>]
Set([('172', '178'), ('179', '178'), ('1127', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080f1a210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091601990>])
set([('1119', '1126')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936f0e50>, <pydotplus.graphviz.Edge object at 0x7f70936f9310>, <pydotplus.graphviz.Edge object at 0x7f7088cce910>]
Set([('172', '178'), ('179', '178'), ('1127', '178')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c727d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70936d2050>])
set([('178', '177')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936d2050>, <pydotplus.graphviz.Edge object at 0x7f70936d84d0>, <pydotplus.graphviz.Edge object at 0x7f7083a21b90>, <pydotplus.graphviz.Edge object at 0x7f7083edd710>]
Set([('139', '177'), ('1111', '177'), ('178', '177'), ('1126', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70936d2050>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 6 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c7e9d10>, <pydotplus.graphviz.Node object at 0x7f708c7c9dd0>, <pydotplus.graphviz.Node object at 0x7f708c6f4ed0>, <pydotplus.graphviz.Node object at 0x7f708c6b6290>, <pydotplus.graphviz.Node object at 0x7f708c692ad0>, <pydotplus.graphviz.Node object at 0x7f708c69d450>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c7c9dd0>, <pydotplus.graphviz.Node object at 0x7f708c6f4ed0>, <pydotplus.graphviz.Node object at 0x7f708c6b6290>, <pydotplus.graphviz.Node object at 0x7f708c692ad0>, <pydotplus.graphviz.Node object at 0x7f708c69d450>]
n = (X4v5 imp q) name= 299
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=299
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a2167d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]13 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70829e7e10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933ec790>])
set([('297', '299')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>]
Set([('1506', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70829e7e10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933ec790>])
set([('297', '299')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>]
Set([('1506', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]13 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70892e91d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933e6790>])
set([('298', '299')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70892e91d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70933e6790>])
set([('298', '299')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c7e9d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f70872edb10>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>, <pydotplus.graphviz.Edge object at 0x7f7081347790>, <pydotplus.graphviz.Edge object at 0x7f7080b5a5d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('299', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 823
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=823
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7084a31f50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]37 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7082ee3a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709215ee10>])
set([('821', '823')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7082ee3a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709215ee10>])
set([('821', '823')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]37 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708847c490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f8ccd0>])
set([('822', '823')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('821', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708847c490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f8ccd0>])
set([('822', '823')])
(X3v2 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>]
Set([('1506', '1507'), ('297', '1507'), ('1505', '1507'), ('821', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c7e9d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f70878dae50>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>, <pydotplus.graphviz.Edge object at 0x7f7081347790>, <pydotplus.graphviz.Edge object at 0x7f7080b5a5d0>]
Set([('301', '1508'), ('1509', '1508'), ('823', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 1071
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=1071
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7084abab50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v1]47 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70820c8b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919ea650>])
set([('1069', '1071')])
[X3v1]47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>]
Set([('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70820c8b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919ea650>])
set([('1069', '1071')])
[X3v1]47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>]
Set([('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v1]47 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v1 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70852c6310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091b3afd0>])
set([('1070', '1071')])
(X3v1 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70852c6310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091b3afd0>])
set([('1070', '1071')])
(X3v1 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v1 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c7e9d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708269b6d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>, <pydotplus.graphviz.Edge object at 0x7f7081347790>, <pydotplus.graphviz.Edge object at 0x7f7080b5a5d0>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('491', '1508'), ('1071', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 491
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=491
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70848704d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]22 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083a073d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70931e7050>])
set([('489', '491')])
[X3v4]22
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083a073d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70931e7050>])
set([('489', '491')])
[X3v4]22
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('298', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]22 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707fb27590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092cb1b90>])
set([('490', '491')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>, <pydotplus.graphviz.Edge object at 0x7f7080e87f90>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707fb27590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092cb1b90>])
set([('490', '491')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>, <pydotplus.graphviz.Edge object at 0x7f7080e87f90>]
Set([('1069', '1507'), ('1506', '1507'), ('821', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c7e9d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7084a0e650>, <pydotplus.graphviz.Edge object at 0x7f7081347790>, <pydotplus.graphviz.Edge object at 0x7f7080b5a5d0>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508'), ('491', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 739
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1507 e v=739
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7084863090>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v3]32 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707fa203d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709231ad50>])
set([('737', '739')])
[X3v3]32
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>, <pydotplus.graphviz.Edge object at 0x7f7080e87f90>, <pydotplus.graphviz.Edge object at 0x7f708679ad50>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('490', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707fa203d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709231ad50>])
set([('737', '739')])
[X3v3]32
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>, <pydotplus.graphviz.Edge object at 0x7f7080e87f90>, <pydotplus.graphviz.Edge object at 0x7f708679ad50>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('490', '1507'), ('1505', '1507'), ('298', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('489', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v3]32 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708392d910>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709232ecd0>])
set([('738', '739')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>, <pydotplus.graphviz.Edge object at 0x7f7080e87f90>, <pydotplus.graphviz.Edge object at 0x7f708679ad50>, <pydotplus.graphviz.Edge object at 0x7f7080e19110>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('298', '1507'), ('490', '1507'), ('1505', '1507'), ('489', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('737', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708392d910>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709232ecd0>])
set([('738', '739')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090930a50>, <pydotplus.graphviz.Edge object at 0x7f7090889410>, <pydotplus.graphviz.Edge object at 0x7f7087e5f990>, <pydotplus.graphviz.Edge object at 0x7f70835c2bd0>, <pydotplus.graphviz.Edge object at 0x7f7082551610>, <pydotplus.graphviz.Edge object at 0x7f70877d2c50>, <pydotplus.graphviz.Edge object at 0x7f7084791550>, <pydotplus.graphviz.Edge object at 0x7f7081ee2110>, <pydotplus.graphviz.Edge object at 0x7f7080e87f90>, <pydotplus.graphviz.Edge object at 0x7f708679ad50>, <pydotplus.graphviz.Edge object at 0x7f7080e19110>]
Set([('821', '1507'), ('1069', '1507'), ('1506', '1507'), ('298', '1507'), ('490', '1507'), ('1505', '1507'), ('489', '1507'), ('1070', '1507'), ('297', '1507'), ('822', '1507'), ('737', '1507')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c7e9d10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
set([('1507', '1508')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7081347790>, <pydotplus.graphviz.Edge object at 0x7f7080b5a5d0>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508'), ('739', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908ac2d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= X1v2
vai collapsar X1v2 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c60e150>, <pydotplus.graphviz.Node object at 0x7f708c5d2190>]
labels = [X1v2]18
labels = [X1v2]18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X1v2]18 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c5d2190>]
n = [X1v2]18 name= 605
vai identificar n=[X1v2]18 e v=[X1v2]18
vai identificar n=645 e v=605
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X1v2]18 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7089caae10>]
v ====> [X1v2]18 =18
n ======> [X1v2]18 =18
SAO IGUAIS
APAGANDO ARESTA [X1v2]18==> (X1v2 imp q) 18
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 3 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c800090>, <pydotplus.graphviz.Node object at 0x7f708c713e90>, <pydotplus.graphviz.Node object at 0x7f708c6b6250>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c713e90>, <pydotplus.graphviz.Node object at 0x7f708c6b6250>]
n = (ORX4 imp q) name= 232
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1456 e v=232
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70864806d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089aab7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093641950>])
set([('233', '232')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>]
Set([('1455', '1456'), ('1457', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089aab7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093641950>])
set([('233', '232')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>]
Set([('1455', '1456'), ('1457', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084097250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70935c8a10>])
set([('231', '232')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>]
Set([('1455', '1456'), ('1457', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084097250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70935c8a10>])
set([('231', '232')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>]
Set([('1455', '1456'), ('1457', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c800090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709099cad0>])
set([('1456', '1463')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b0650>, <pydotplus.graphviz.Edge object at 0x7f709099cad0>, <pydotplus.graphviz.Edge object at 0x7f708690d990>, <pydotplus.graphviz.Edge object at 0x7f7083609810>, <pydotplus.graphviz.Edge object at 0x7f70852f89d0>, <pydotplus.graphviz.Edge object at 0x7f70830b0fd0>]
Set([('440', '1463'), ('238', '1463'), ('232', '1463'), ('446', '1463'), ('1462', '1463'), ('1456', '1463')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709099cad0>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 440
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1456 e v=440
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70889bd990>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708532e590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092da4c50>])
set([('441', '440')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>, <pydotplus.graphviz.Edge object at 0x7f7081b39b10>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708532e590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092da4c50>])
set([('441', '440')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>, <pydotplus.graphviz.Edge object at 0x7f7081b39b10>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080614310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092dac110>])
set([('439', '440')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>, <pydotplus.graphviz.Edge object at 0x7f7081b39b10>, <pydotplus.graphviz.Edge object at 0x7f70885ae110>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456'), ('441', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080614310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092dac110>])
set([('439', '440')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>, <pydotplus.graphviz.Edge object at 0x7f7081b39b10>, <pydotplus.graphviz.Edge object at 0x7f70885ae110>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456'), ('441', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c800090>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709099cad0>])
set([('1456', '1463')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70909b0650>, <pydotplus.graphviz.Edge object at 0x7f709099cad0>, <pydotplus.graphviz.Edge object at 0x7f708690d990>, <pydotplus.graphviz.Edge object at 0x7f70852f89d0>, <pydotplus.graphviz.Edge object at 0x7f70830b0fd0>]
Set([('446', '1463'), ('1462', '1463'), ('1456', '1463'), ('238', '1463'), ('440', '1463')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709099cad0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v2 imp (X4v5 imp q))
vai collapsar (X3v2 imp (X4v5 imp q)) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c6d6ed0>, <pydotplus.graphviz.Node object at 0x7f708c673dd0>]
labels = (X3v2 imp (X4v5 imp q))
labels = (X3v2 imp (X4v5 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp (X4v5 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c673dd0>]
n = (X3v2 imp (X4v5 imp q)) name= 1122
vai identificar n=(X3v2 imp (X4v5 imp q)) e v=(X3v2 imp (X4v5 imp q))
vai identificar n=174 e v=1122
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp (X4v5 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70860daf90>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
vai collapsar (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c648dd0>, <pydotplus.graphviz.Node object at 0x7f708c630950>]
labels = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
labels = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c630950>]
n = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) name= 623
vai identificar n=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
vai identificar n=687 e v=623
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7080070e50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) e v = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) n=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089ce5750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092753f90>])
set([('624', '623')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709255ee50>, <pydotplus.graphviz.Edge object at 0x7f7092566410>]
Set([('688', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089ce5750>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092753f90>])
set([('624', '623')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709255ee50>, <pydotplus.graphviz.Edge object at 0x7f7092566410>]
Set([('688', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) para (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v1 imp q) 28 e v = (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) n=(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7082726150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709275a450>])
set([('604', '623')])
(X4v1 imp q) 28
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709255ee50>, <pydotplus.graphviz.Edge object at 0x7f7092566410>, <pydotplus.graphviz.Edge object at 0x7f7084b89690>]
Set([('688', '687'), ('624', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7082726150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709275a450>])
set([('604', '623')])
(X4v1 imp q) 28
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709255ee50>, <pydotplus.graphviz.Edge object at 0x7f7092566410>, <pydotplus.graphviz.Edge object at 0x7f7084b89690>]
Set([('688', '687'), ('624', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v1 imp q) 28 para (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
<pydotplus.graphviz.Node object at 0x7f708c648dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70925455d0>])
set([('687', '686')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70925455d0>, <pydotplus.graphviz.Edge object at 0x7f709254ba50>, <pydotplus.graphviz.Edge object at 0x7f708917e590>]
Set([('623', '686'), ('687', '686'), ('679', '686')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70925455d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= ORX4
vai collapsar ORX4 3 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c78b610>, <pydotplus.graphviz.Node object at 0x7f708c706510>, <pydotplus.graphviz.Node object at 0x7f708c6b6310>]
labels = ORX4
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c706510>, <pydotplus.graphviz.Node object at 0x7f708c6b6310>]
n = ORX4 name= 238
vai identificar n=ORX4 e v=ORX4
vai identificar n=1462 e v=238
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7086581690>]
n = ORX4 name= 446
vai identificar n=ORX4 e v=ORX4
vai identificar n=1462 e v=446
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70864b0810>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v2 imp q)
vai collapsar (X4v2 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c73cb90>, <pydotplus.graphviz.Node object at 0x7f708c65ef50>]
labels = (X4v2 imp q)
labels = (X4v2 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c65ef50>]
n = (X4v2 imp q) name= 1111
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=139 e v=1111
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a6bfdd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]49 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70865ca1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709169d810>])
set([('1109', '1111')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a12750>, <pydotplus.graphviz.Edge object at 0x7f709395b950>]
Set([('137', '139'), ('138', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70865ca1d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709169d810>])
set([('1109', '1111')])
[X3v2]49
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a12750>, <pydotplus.graphviz.Edge object at 0x7f709395b950>]
Set([('137', '139'), ('138', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]49 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083ec7dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709168e290>])
set([('1110', '1111')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a12750>, <pydotplus.graphviz.Edge object at 0x7f709395b950>, <pydotplus.graphviz.Edge object at 0x7f708a463950>]
Set([('137', '139'), ('138', '139'), ('1109', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083ec7dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709168e290>])
set([('1110', '1111')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a12750>, <pydotplus.graphviz.Edge object at 0x7f709395b950>, <pydotplus.graphviz.Edge object at 0x7f708a463950>]
Set([('137', '139'), ('138', '139'), ('1109', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7f708c73cb90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70936d84d0>])
set([('139', '177')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70936d2050>, <pydotplus.graphviz.Edge object at 0x7f70936d84d0>, <pydotplus.graphviz.Edge object at 0x7f7083edd710>]
Set([('139', '177'), ('1111', '177'), ('178', '177')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70936d84d0>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= X3v2
vai collapsar X3v2 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c6ca550>, <pydotplus.graphviz.Node object at 0x7f708c658cd0>]
labels = [X3v2]8
labels = [X3v2]49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X3v2]8 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c658cd0>]
n = [X3v2]49 name= 1121
vai identificar n=[X3v2]8 e v=[X3v2]49
vai identificar n=173 e v=1121
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X3v2]49 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7081f92590>]
v ====> [X3v2]49 =49
n ======> [X3v2]8 =8
APAGANDO ARESTA [X3v2]49==> (X3v2 imp q) 8 49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v5 imp q)
vai collapsar (X3v5 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c8171d0>, <pydotplus.graphviz.Node object at 0x7f708c7383d0>]
labels = (X3v5 imp q)
labels = (X3v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c7383d0>]
n = (X3v5 imp q) name= 1143
vai identificar n=(X3v5 imp q) e v=(X3v5 imp q)
vai identificar n=243 e v=1143
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708825bd90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X2v4]46 e v = (X3v5 imp q) n=(X3v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7086888f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091520bd0>])
set([('1141', '1143')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709350ab10>, <pydotplus.graphviz.Edge object at 0x7f709357d5d0>]
Set([('242', '243'), ('241', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7086888f90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091520bd0>])
set([('1141', '1143')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709350ab10>, <pydotplus.graphviz.Edge object at 0x7f709357d5d0>]
Set([('242', '243'), ('241', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X2v4]46 para (X3v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X2v4 imp (X3v5 imp q)) e v = (X3v5 imp q) n=(X3v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083569210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709152e590>])
set([('1142', '1143')])
(X2v4 imp (X3v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709350ab10>, <pydotplus.graphviz.Edge object at 0x7f709357d5d0>, <pydotplus.graphviz.Edge object at 0x7f70829a7dd0>]
Set([('242', '243'), ('241', '243'), ('1141', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083569210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709152e590>])
set([('1142', '1143')])
(X2v4 imp (X3v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709350ab10>, <pydotplus.graphviz.Edge object at 0x7f709357d5d0>, <pydotplus.graphviz.Edge object at 0x7f70829a7dd0>]
Set([('242', '243'), ('241', '243'), ('1141', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X2v4 imp (X3v5 imp q)) para (X3v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c8171d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709349c150>])
set([('243', '248')])
(X3v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70934a26d0>, <pydotplus.graphviz.Edge object at 0x7f709349c150>, <pydotplus.graphviz.Edge object at 0x7f70869bd050>, <pydotplus.graphviz.Edge object at 0x7f7087d75110>]
Set([('249', '248'), ('1143', '248'), ('243', '248'), ('1149', '248')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709349c150>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
vai collapsar (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c7f7e50>, <pydotplus.graphviz.Node object at 0x7f708c701890>]
labels = (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
labels = (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c701890>]
n = (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) name= 1149
vai identificar n=(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) e v=(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))
vai identificar n=249 e v=1149
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70846b7350>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X1v2 imp (X4v2 imp q))
vai collapsar (X1v2 imp (X4v2 imp q)) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c61aad0>, <pydotplus.graphviz.Node object at 0x7f708c5dfb10>]
labels = (X1v2 imp (X4v2 imp q))
labels = (X1v2 imp (X4v2 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X1v2 imp (X4v2 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c5dfb10>]
n = (X1v2 imp (X4v2 imp q)) name= 606
vai identificar n=(X1v2 imp (X4v2 imp q)) e v=(X1v2 imp (X4v2 imp q))
vai identificar n=646 e v=606
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X1v2 imp (X4v2 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7085266610>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X4v5 imp q) imp ((ORX4 imp q))
vai collapsar (X4v5 imp q) imp ((ORX4 imp q)) 6 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c7ee7d0>, <pydotplus.graphviz.Node object at 0x7f708c7f2c50>, <pydotplus.graphviz.Node object at 0x7f708c70c890>, <pydotplus.graphviz.Node object at 0x7f708c6a2410>, <pydotplus.graphviz.Node object at 0x7f708c6a2250>, <pydotplus.graphviz.Node object at 0x7f708c6765d0>]
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
labels = (X4v5 imp q) imp ((ORX4 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) imp ((ORX4 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c7f2c50>, <pydotplus.graphviz.Node object at 0x7f708c70c890>, <pydotplus.graphviz.Node object at 0x7f708c6a2410>, <pydotplus.graphviz.Node object at 0x7f708c6a2250>, <pydotplus.graphviz.Node object at 0x7f708c6765d0>]
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 301
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=301
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a2a4bd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70829f25d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709342f490>])
set([('302', '301')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>]
Set([('1510', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70829f25d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709342f490>])
set([('302', '301')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>]
Set([('1510', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085ae6810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093430c10>])
set([('263', '301')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>]
Set([('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085ae6810>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093430c10>])
set([('263', '301')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>]
Set([('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7f708c7ee7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ac0a590>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7081347790>]
Set([('301', '1508'), ('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 825
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=825
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7089a63d90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708058d0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092441210>])
set([('826', '825')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708058d0d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092441210>])
set([('826', '825')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7085642c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70920c4710>])
set([('787', '825')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('826', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7085642c10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70920c4710>])
set([('787', '825')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>]
Set([('263', '1509'), ('1510', '1509'), ('302', '1509'), ('826', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7f708c7ee7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f7089fd8ad0>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7081347790>]
Set([('1509', '1508'), ('1507', '1508'), ('741', '1508'), ('1073', '1508'), ('825', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 1073
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=1073
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708401b410>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080a92dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091972f50>])
set([('1074', '1073')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080a92dd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091972f50>])
set([('1074', '1073')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) 48 e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7084b82410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70921830d0>])
set([('1060', '1073')])
(X4v2 imp q) 48
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7084b82410>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70921830d0>])
set([('1060', '1073')])
(X4v2 imp q) 48
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>]
Set([('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) 48 para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7f708c7ee7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708ab9f7d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7081347790>]
Set([('741', '1508'), ('1507', '1508'), ('1509', '1508'), ('1073', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 493
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=493
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7081334590>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70855fe590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e47750>])
set([('494', '493')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70855fe590>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e47750>])
set([('494', '493')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('263', '1509'), ('1074', '1509'), ('302', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707fd87490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e6abd0>])
set([('455', '493')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707fd87490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092e6abd0>])
set([('455', '493')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7f708c7ee7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f708a2a4850>, <pydotplus.graphviz.Edge object at 0x7f7081347790>]
Set([('741', '1508'), ('1509', '1508'), ('1507', '1508'), ('493', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
delete in_edge_Ancestor
n = (X4v5 imp q) imp ((ORX4 imp q)) name= 741
vai identificar n=(X4v5 imp q) imp ((ORX4 imp q)) e v=(X4v5 imp q) imp ((ORX4 imp q))
vai identificar n=1509 e v=741
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) imp ((ORX4 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7084a0fa90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70845eb890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922ec550>])
set([('742', '741')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70845eb890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922ec550>])
set([('742', '741')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) para (X4v5 imp q) imp ((ORX4 imp q))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v2 imp q) e v = (X4v5 imp q) imp ((ORX4 imp q)) n=(X4v5 imp q) imp ((ORX4 imp q)) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7088d1e890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922f29d0>])
set([('727', '741')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7081e3d510>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7088d1e890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70922f29d0>])
set([('727', '741')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7081e3d510>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v2 imp q) para (X4v5 imp q) imp ((ORX4 imp q))
<pydotplus.graphviz.Node object at 0x7f708c7ee7d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
set([('1509', '1508')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70908a3e10>, <pydotplus.graphviz.Edge object at 0x7f70908ac2d0>, <pydotplus.graphviz.Edge object at 0x7f7081347790>]
Set([('741', '1508'), ('1509', '1508'), ('1507', '1508')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f70908a3e10>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= q
vai collapsar q 4 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c791290>, <pydotplus.graphviz.Node object at 0x7f708c73c3d0>, <pydotplus.graphviz.Node object at 0x7f708c706bd0>, <pydotplus.graphviz.Node object at 0x7f708c6448d0>]
labels = q
labels = q
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c73c3d0>, <pydotplus.graphviz.Node object at 0x7f708c706bd0>, <pydotplus.graphviz.Node object at 0x7f708c6448d0>]
n = q name= 951
vai identificar n=q e v=q
vai identificar n=1219 e v=951
e_in_A.has_key(v.get_name())
False
name = 951
<pydotplus.graphviz.Edge object at 0x7f7091b97910>
950
<pydotplus.graphviz.Node object at 0x7f70844ac2d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091b97910>])
set([('950', '951')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>]
Set([('1212', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([])
name = 951
<pydotplus.graphviz.Edge object at 0x7f7091b9ed90>
944
<pydotplus.graphviz.Node object at 0x7f7084069fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091b9ed90>])
set([('944', '951')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>, <pydotplus.graphviz.Edge object at 0x7f707f83bc50>]
Set([('1212', '1219'), ('950', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708c791290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70912eb990>])
set([('1219', '1220')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091bb21d0>]
Set([('951', '952')])
(X3v1 imp q) 42
INtersecao ====================
Set([])
n = q name= 887
vai identificar n=q e v=q
vai identificar n=1219 e v=887
e_in_A.has_key(v.get_name())
False
name = 887
<pydotplus.graphviz.Edge object at 0x7f7091c6e110>
886
<pydotplus.graphviz.Node object at 0x7f7086169c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c6e110>])
set([('886', '887')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>, <pydotplus.graphviz.Edge object at 0x7f707f83bc50>, <pydotplus.graphviz.Edge object at 0x7f70844aca10>]
Set([('1218', '1219'), ('1212', '1219'), ('950', '1219'), ('944', '1219')])
q
INtersecao ====================
Set([])
name = 887
<pydotplus.graphviz.Edge object at 0x7f7091c75590>
880
<pydotplus.graphviz.Node object at 0x7f708633ac50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091c75590>])
set([('880', '887')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>, <pydotplus.graphviz.Edge object at 0x7f707f83bc50>, <pydotplus.graphviz.Edge object at 0x7f70844aca10>, <pydotplus.graphviz.Edge object at 0x7f7086169450>]
Set([('1218', '1219'), ('1212', '1219'), ('950', '1219'), ('944', '1219'), ('886', '1219')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708c791290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70912eb990>, <pydotplus.graphviz.Edge object at 0x7f708239d550>])
set([('1219', '1220'), ('1219', '952')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091c07990>]
Set([('887', '888')])
(X3v4 imp q) 39
INtersecao ====================
Set([])
n = q name= 555
vai identificar n=q e v=q
vai identificar n=1219 e v=555
e_in_A.has_key(v.get_name())
False
name = 555
<pydotplus.graphviz.Edge object at 0x7f7092fbbb50>
554
<pydotplus.graphviz.Node object at 0x7f7089de1150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092fbbb50>])
set([('554', '555')])
ORX5
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>, <pydotplus.graphviz.Edge object at 0x7f707f83bc50>, <pydotplus.graphviz.Edge object at 0x7f70844aca10>, <pydotplus.graphviz.Edge object at 0x7f7086169450>, <pydotplus.graphviz.Edge object at 0x7f707fef92d0>]
Set([('1218', '1219'), ('886', '1219'), ('880', '1219'), ('1212', '1219'), ('950', '1219'), ('944', '1219')])
q
INtersecao ====================
Set([])
name = 555
<pydotplus.graphviz.Edge object at 0x7f7092c42ed0>
548
<pydotplus.graphviz.Node object at 0x7f70865058d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c42ed0>])
set([('548', '555')])
(ORX5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>, <pydotplus.graphviz.Edge object at 0x7f707f83bc50>, <pydotplus.graphviz.Edge object at 0x7f70844aca10>, <pydotplus.graphviz.Edge object at 0x7f7086169450>, <pydotplus.graphviz.Edge object at 0x7f707fef92d0>, <pydotplus.graphviz.Edge object at 0x7f7089de1e50>]
Set([('944', '1219'), ('886', '1219'), ('880', '1219'), ('554', '1219'), ('1212', '1219'), ('950', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708c791290>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70912eb990>, <pydotplus.graphviz.Edge object at 0x7f708d8bb9d0>, <pydotplus.graphviz.Edge object at 0x7f708239d550>])
set([('1219', '1220'), ('1219', '888'), ('1219', '952')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092b24850>]
Set([('555', '556')])
(X4v4 imp q) 26
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 16
formula que repete= (X3v3 imp q)
vai collapsar (X3v3 imp q) 2 vezes, no nivel 16
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c796c50>, <pydotplus.graphviz.Node object at 0x7f708c70c350>]
labels = (X3v3 imp q)
labels = (X3v3 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v3 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c70c350>]
n = (X3v3 imp q) name= 835
vai identificar n=(X3v3 imp q) e v=(X3v3 imp q)
vai identificar n=1519 e v=835
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v3 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70870356d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v3]35 e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708614b510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092374c10>])
set([('833', '835')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907faa50>, <pydotplus.graphviz.Edge object at 0x7f7090789410>]
Set([('1518', '1519'), ('1517', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708614b510>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092374c10>])
set([('833', '835')])
[X1v3]35
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907faa50>, <pydotplus.graphviz.Edge object at 0x7f7090789410>]
Set([('1518', '1519'), ('1517', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v3]35 para (X3v3 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v3 imp (X3v3 imp q)) e v = (X3v3 imp q) n=(X3v3 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7086be3110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f3f350>])
set([('834', '835')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907faa50>, <pydotplus.graphviz.Edge object at 0x7f7090789410>, <pydotplus.graphviz.Edge object at 0x7f7084773f10>]
Set([('1518', '1519'), ('1517', '1519'), ('833', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7086be3110>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091f3f350>])
set([('834', '835')])
(X1v3 imp (X3v3 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70907faa50>, <pydotplus.graphviz.Edge object at 0x7f7090789410>, <pydotplus.graphviz.Edge object at 0x7f7084773f10>]
Set([('1518', '1519'), ('1517', '1519'), ('833', '1519')])
(X3v3 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v3 imp (X3v3 imp q)) para (X3v3 imp q)
<pydotplus.graphviz.Node object at 0x7f708c796c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709077e710>])
set([('1519', '1531')])
(X3v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090782150>, <pydotplus.graphviz.Edge object at 0x7f709077e710>, <pydotplus.graphviz.Edge object at 0x7f7083e187d0>, <pydotplus.graphviz.Edge object at 0x7f70850cab90>]
Set([('1532', '1531'), ('835', '1531'), ('1519', '1531'), ('360', '1531')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709077e710>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
Gerando graph_from_dot_data  DEPOIS-COMPRESSAO do nivel 16
gravando dot file
nivel 17
['(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))', '(X1v1 imp (X3v1 imp q))', '(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))', 'X3v1 imp q', '(X4v1 imp q)', 'X3v4 imp q', 'X4v2 imp q', '(X3v4 imp (X4v5 imp q))', '(X2v2 imp (X3v2 imp q))', 'X1v3', 'q', 'X1v1', '(X3v4 imp q)', '(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))))', '(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))', '(X4v4 imp q)', '(X1v3 imp (X3v3 imp q))', '(X3v4 imp (X4v4 imp q))', 'X2v4', '(X2v4 imp (X4v4 imp q))', '(X3v1 imp (X4v5 imp q))', 'X2v1', 'X2v2', 'X2v3', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v3 imp q)', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(X3v1 imp (X4v1 imp q))', '(ORX4 imp q)', 'X4v1 imp q', '(X2v3 imp (X3v3 imp q))', '(X2v4 imp (X3v5 imp q))', '(X3v2 imp (X4v5 imp q))', '(X2v3 imp (X3v5 imp q))', 'ORX5', 'ORX4', '(X4v2 imp q)', 'X3v3', 'X3v2', '(X3v5 imp q)', 'X3v4', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', 'X4v4 imp q', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v2 imp (X4v2 imp q))', '(X3v3 imp q)', '(X2v1 imp (X3v1 imp q))', '(ORX5 imp q)', '(X3v3 imp (X4v5 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))']
REPEATED_FORMULAS =====> 
['(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))', 'q', 'X2v4', 'X2v3', 'X3v1', '(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))', '(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))', '(X4v5 imp q)', '(ORX4 imp q)', '(X3v2 imp (X4v5 imp q))', 'ORX4', '(X4v2 imp q)', 'X3v2', '(X3v5 imp q)', 'X3v4', '(X3v5 imp q) imp ((X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))))', '(X4v5 imp q) imp ((ORX4 imp q))', '(X3v2 imp (X4v2 imp q))', '(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))']
==========
nivel da formula que repete= 17
formula que repete= (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
vai collapsar (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c349250>, <pydotplus.graphviz.Node object at 0x7f708c384d90>]
labels = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
labels = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c384d90>]
n = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) name= 624
vai identificar n=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) e v=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
vai identificar n=688 e v=624
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708446f190>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))) e v = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) n=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7086daef50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092772dd0>])
set([('625', '624')])
(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709257ed50>, <pydotplus.graphviz.Edge object at 0x7f709257e610>]
Set([('689', '688'), ('676', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7086daef50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092772dd0>])
set([('625', '624')])
(X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709257ed50>, <pydotplus.graphviz.Edge object at 0x7f709257e610>]
Set([('689', '688'), ('676', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v3 imp q) imp ((X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))) para (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v3 imp q) e v = (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) n=(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70850c4f10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709276c850>])
set([('611', '624')])
(X4v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709257ed50>, <pydotplus.graphviz.Edge object at 0x7f709257e610>, <pydotplus.graphviz.Edge object at 0x7f70844a4b50>]
Set([('689', '688'), ('676', '688'), ('625', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70850c4f10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709276c850>])
set([('611', '624')])
(X4v3 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709257ed50>, <pydotplus.graphviz.Edge object at 0x7f709257e610>, <pydotplus.graphviz.Edge object at 0x7f70844a4b50>]
Set([('689', '688'), ('676', '688'), ('625', '688')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v3 imp q) para (X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
<pydotplus.graphviz.Node object at 0x7f708c349250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709255ee50>])
set([('688', '687')])
(X4v1 imp q) imp ((X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709255ee50>, <pydotplus.graphviz.Edge object at 0x7f7092566410>, <pydotplus.graphviz.Edge object at 0x7f7084b89690>, <pydotplus.graphviz.Edge object at 0x7f7083718cd0>]
Set([('604', '687'), ('688', '687'), ('624', '687'), ('643', '687')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709255ee50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= q
vai collapsar q 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c491450>, <pydotplus.graphviz.Node object at 0x7f708c47e190>]
labels = q
labels = q
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c47e190>]
n = q name= 1011
vai identificar n=q e v=q
vai identificar n=359 e v=1011
e_in_A.has_key(v.get_name())
False
name = 1011
<pydotplus.graphviz.Edge object at 0x7f70918c0a90>
1010
<pydotplus.graphviz.Node object at 0x7f707fd78e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70918c0a90>])
set([('1010', '1011')])
ORX4
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093058150>, <pydotplus.graphviz.Edge object at 0x7f709305e5d0>]
Set([('352', '359'), ('358', '359')])
q
INtersecao ====================
Set([])
name = 1011
<pydotplus.graphviz.Edge object at 0x7f7091846f10>
1004
<pydotplus.graphviz.Node object at 0x7f7084cdb710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091846f10>])
set([('1004', '1011')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093058150>, <pydotplus.graphviz.Edge object at 0x7f709305e5d0>, <pydotplus.graphviz.Edge object at 0x7f70880a9690>]
Set([('352', '359'), ('358', '359'), ('1010', '359')])
q
INtersecao ====================
Set([])
<pydotplus.graphviz.Node object at 0x7f708c491450>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093068810>])
set([('359', '360')])
q
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709185d350>]
Set([('1011', '1012')])
(X3v4 imp q) 44
INtersecao ====================
Set([])
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X2v4
vai collapsar X2v4 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c461850>, <pydotplus.graphviz.Node object at 0x7f708c364590>]
labels = [X2v4]46
labels = [X2v4]29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X2v4]46 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c364590>]
n = [X2v4]29 name= 677
vai identificar n=[X2v4]46 e v=[X2v4]29
vai identificar n=1141 e v=677
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X2v4]29 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708847fb90>]
<pydotplus.graphviz.Node object at 0x7f708c461850>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70829a7dd0>])
set([('1141', '243')])
[X2v4]46
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70927ffb90>, <pydotplus.graphviz.Edge object at 0x7f7092906a50>, <pydotplus.graphviz.Edge object at 0x7f70849a7710>, <pydotplus.graphviz.Edge object at 0x7f70808f3950>]
Set([('678', '679'), ('613', '679'), ('614', '679'), ('677', '679')])
(X4v4 imp q)
INtersecao ====================
Set([])
v ====> [X2v4]29 =29
n ======> [X2v4]46 =46
APAGANDO ARESTA [X2v4]29==> (X2v4 imp q) 29
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X2v3
vai collapsar X2v3 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c580c50>, <pydotplus.graphviz.Node object at 0x7f708c4e8790>]
labels = [X2v3]63
labels = [X2v3]7
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X2v3]63 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c4e8790>]
n = [X2v3]7 name= 241
vai identificar n=[X2v3]63 e v=[X2v3]7
vai identificar n=1517 e v=241
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X2v3]7 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70841315d0>]
<pydotplus.graphviz.Node object at 0x7f708c580c50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70907faa50>])
set([('1517', '1519')])
[X2v3]63
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709350ab10>, <pydotplus.graphviz.Edge object at 0x7f709357d5d0>, <pydotplus.graphviz.Edge object at 0x7f70829a7dd0>, <pydotplus.graphviz.Edge object at 0x7f7085d29dd0>]
Set([('1142', '243'), ('242', '243'), ('241', '243'), ('1141', '243')])
(X3v5 imp q)
INtersecao ====================
Set([])
v ====> [X2v3]7 =7
n ======> [X2v3]63 =63
APAGANDO ARESTA [X2v3]7==> (X2v3 imp q) 7
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X3v1
vai collapsar X3v1 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c3ceb50>, <pydotplus.graphviz.Node object at 0x7f708c32d650>]
labels = [X3v1]47
labels = [X3v1]25
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X3v1]47 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c32d650>]
n = [X3v1]25 name= 517
vai identificar n=[X3v1]47 e v=[X3v1]25
vai identificar n=1069 e v=517
e_in_A.has_key(v.get_name())
False
<pydotplus.graphviz.Node object at 0x7f708c3ceb50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7084791550>])
set([('1069', '1507')])
[X3v1]47
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7092a15390>, <pydotplus.graphviz.Edge object at 0x7f70929d5dd0>]
Set([('518', '519'), ('517', '519')])
(X4v1 imp q)
INtersecao ====================
Set([])
v ====> [X3v1]25 =25
n ======> [X3v1]47 =47
APAGANDO ARESTA [X3v1]25==> (X3v1 imp q) 25
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai collapsar (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) 2 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c563d50>, <pydotplus.graphviz.Node object at 0x7f708c55ad10>]
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
labels = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c55ad10>]
n = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) name= 123
vai identificar n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) e v=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
vai identificar n=1283 e v=123
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70888133d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70827bfe50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709387a4d0>])
set([('124', '123')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091019110>, <pydotplus.graphviz.Edge object at 0x7f709101f590>]
Set([('1272', '1283'), ('1284', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70827bfe50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709387a4d0>])
set([('124', '123')])
(X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091019110>, <pydotplus.graphviz.Edge object at 0x7f709101f590>]
Set([('1272', '1283'), ('1284', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) imp ((X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))) para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp q) 3 e v = (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) n=(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707f947bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093852990>])
set([('64', '123')])
(X3v3 imp q) 3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091019110>, <pydotplus.graphviz.Edge object at 0x7f709101f590>, <pydotplus.graphviz.Edge object at 0x7f7085b999d0>]
Set([('1272', '1283'), ('1284', '1283'), ('124', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707f947bd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093852990>])
set([('64', '123')])
(X3v3 imp q) 3
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091019110>, <pydotplus.graphviz.Edge object at 0x7f709101f590>, <pydotplus.graphviz.Edge object at 0x7f7085b999d0>]
Set([('1272', '1283'), ('1284', '1283'), ('124', '1283')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp q) 3 para (X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
<pydotplus.graphviz.Node object at 0x7f708c563d50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709107d790>])
set([('1283', '1282')])
(X3v4 imp q) imp ((X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f709107d790>, <pydotplus.graphviz.Edge object at 0x7f7091077290>, <pydotplus.graphviz.Edge object at 0x7f70866526d0>, <pydotplus.graphviz.Edge object at 0x7f7081cf5b10>]
Set([('123', '1282'), ('1275', '1282'), ('1283', '1282'), ('116', '1282')])
(X3v1 imp q) imp ((X3v2 imp q) imp ((ORX3 imp q)))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709107d790>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai collapsar (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) 6 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c6089d0>, <pydotplus.graphviz.Node object at 0x7f708c4a62d0>, <pydotplus.graphviz.Node object at 0x7f708c40bed0>, <pydotplus.graphviz.Node object at 0x7f708c442350>, <pydotplus.graphviz.Node object at 0x7f708c391610>, <pydotplus.graphviz.Node object at 0x7f708c3f7090>]
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
labels = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c4a62d0>, <pydotplus.graphviz.Node object at 0x7f708c40bed0>, <pydotplus.graphviz.Node object at 0x7f708c442350>, <pydotplus.graphviz.Node object at 0x7f708c391610>, <pydotplus.graphviz.Node object at 0x7f708c3f7090>]
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 302
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=302
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7081235b10>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70892a2490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709330bdd0>])
set([('303', '302')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>]
Set([('1511', '1510'), ('1503', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70892a2490>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709330bdd0>])
set([('303', '302')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>]
Set([('1511', '1510'), ('1503', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7087827e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093415710>])
set([('295', '302')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7087827e50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093415710>])
set([('295', '302')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c6089d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70847acfd0>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7081e3d510>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('302', '1509'), ('1074', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 826
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=826
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708656b6d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080eebb50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091fa0d90>])
set([('827', '826')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080eebb50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091fa0d90>])
set([('827', '826')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>]
Set([('1511', '1510'), ('1503', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) 38 e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7087995550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091fa20d0>])
set([('820', '826')])
(X4v4 imp q) 38
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>]
Set([('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7087995550>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091fa20d0>])
set([('820', '826')])
(X4v4 imp q) 38
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>]
Set([('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) 38 para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c6089d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f7084434390>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7081e3d510>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1060', '1509'), ('826', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('1074', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 1074
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=1074
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70856c6110>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708a7546d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919dd4d0>])
set([('1075', '1074')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708a7546d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919dd4d0>])
set([('1075', '1074')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70875586d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919dddd0>])
set([('1067', '1074')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70875586d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70919dddd0>])
set([('1067', '1074')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c6089d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f7089d778d0>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7081e3d510>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1060', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('1074', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 494
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=494
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7084c3cb90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7081651150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092cdc190>])
set([('495', '494')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7081651150>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092cdc190>])
set([('495', '494')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>]
Set([('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('1075', '1510'), ('303', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70823a4250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092cced50>])
set([('487', '494')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>, <pydotplus.graphviz.Edge object at 0x7f7081e19310>]
Set([('495', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70823a4250>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092cced50>])
set([('487', '494')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>, <pydotplus.graphviz.Edge object at 0x7f7081e19310>]
Set([('495', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c6089d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f708a878e90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7081e3d510>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1060', '1509'), ('1495', '1509'), ('494', '1509'), ('455', '1509'), ('263', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
delete in_edge_Ancestor
n = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) name= 742
vai identificar n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) e v=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
vai identificar n=1510 e v=742
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f707fd87ed0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7088b1ea50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092286e90>])
set([('743', '742')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>, <pydotplus.graphviz.Edge object at 0x7f7081e19310>, <pydotplus.graphviz.Edge object at 0x7f7089040610>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7088b1ea50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092286e90>])
set([('743', '742')])
(X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>, <pydotplus.graphviz.Edge object at 0x7f7081e19310>, <pydotplus.graphviz.Edge object at 0x7f7089040610>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) imp ((X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v4 imp q) e v = (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) n=(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q))) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7082077350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709228e350>])
set([('735', '742')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>, <pydotplus.graphviz.Edge object at 0x7f7081e19310>, <pydotplus.graphviz.Edge object at 0x7f7089040610>, <pydotplus.graphviz.Edge object at 0x7f70823a4a50>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('743', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7082077350>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709228e350>])
set([('735', '742')])
(X4v4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090942d90>, <pydotplus.graphviz.Edge object at 0x7f7090864210>, <pydotplus.graphviz.Edge object at 0x7f7083a2e3d0>, <pydotplus.graphviz.Edge object at 0x7f7085057110>, <pydotplus.graphviz.Edge object at 0x7f708ab8d090>, <pydotplus.graphviz.Edge object at 0x7f70864e33d0>, <pydotplus.graphviz.Edge object at 0x7f70885df8d0>, <pydotplus.graphviz.Edge object at 0x7f70857de7d0>, <pydotplus.graphviz.Edge object at 0x7f7081e19310>, <pydotplus.graphviz.Edge object at 0x7f7089040610>, <pydotplus.graphviz.Edge object at 0x7f70823a4a50>]
Set([('495', '1510'), ('487', '1510'), ('820', '1510'), ('1511', '1510'), ('1503', '1510'), ('827', '1510'), ('303', '1510'), ('743', '1510'), ('1075', '1510'), ('1067', '1510'), ('295', '1510')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v4 imp q) para (X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
<pydotplus.graphviz.Node object at 0x7f708c6089d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
set([('1510', '1509')])
(X4v2 imp q) imp ((X4v5 imp q) imp ((ORX4 imp q)))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7081e3d510>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1060', '1509'), ('1495', '1509'), ('455', '1509'), ('263', '1509'), ('727', '1509'), ('742', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090805c50>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X4v5 imp q)
vai collapsar (X4v5 imp q) 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c5bd890>, <pydotplus.graphviz.Node object at 0x7f708c491790>, <pydotplus.graphviz.Node object at 0x7f708c39a850>]
labels = (X4v5 imp q)
labels = (X4v5 imp q)
labels = (X4v5 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v5 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c491790>, <pydotplus.graphviz.Node object at 0x7f708c39a850>]
n = (X4v5 imp q) name= 231
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1455 e v=231
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70882ad6d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v4]10 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080982b50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093a30850>])
set([('229', '231')])
[X3v4]10
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>]
Set([('1454', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080982b50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093a30850>])
set([('229', '231')])
[X3v4]10
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>]
Set([('1454', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v4]10 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v4 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7086e63310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70935e3210>])
set([('230', '231')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>, <pydotplus.graphviz.Edge object at 0x7f7082d6a750>]
Set([('1454', '1455'), ('229', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7086e63310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70935e3210>])
set([('230', '231')])
(X3v4 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>, <pydotplus.graphviz.Edge object at 0x7f7082d6a750>]
Set([('1454', '1455'), ('229', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v4 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5bd890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090ac7450>])
set([('1455', '1456')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>, <pydotplus.graphviz.Edge object at 0x7f7081b39b10>, <pydotplus.graphviz.Edge object at 0x7f70885ae110>, <pydotplus.graphviz.Edge object at 0x7f708084edd0>]
Set([('1455', '1456'), ('1457', '1456'), ('231', '1456'), ('233', '1456'), ('441', '1456'), ('439', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090ac7450>])
delete in_edge_Ancestor
n = (X4v5 imp q) name= 439
vai identificar n=(X4v5 imp q) e v=(X4v5 imp q)
vai identificar n=1455 e v=439
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v5 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7081ded8d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v3]20 e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7083402fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093261e10>])
set([('437', '439')])
[X3v3]20
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>, <pydotplus.graphviz.Edge object at 0x7f7082d6a750>, <pydotplus.graphviz.Edge object at 0x7f7080f2e390>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7083402fd0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093261e10>])
set([('437', '439')])
[X3v3]20
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>, <pydotplus.graphviz.Edge object at 0x7f7082d6a750>, <pydotplus.graphviz.Edge object at 0x7f7080f2e390>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v3]20 para (X4v5 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v3 imp (X4v5 imp q)) e v = (X4v5 imp q) n=(X4v5 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70862f8a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092d89250>])
set([('438', '439')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>, <pydotplus.graphviz.Edge object at 0x7f7082d6a750>, <pydotplus.graphviz.Edge object at 0x7f7080f2e390>, <pydotplus.graphviz.Edge object at 0x7f708a3dd310>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('437', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70862f8a90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092d89250>])
set([('438', '439')])
(X3v3 imp (X4v5 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a15b90>, <pydotplus.graphviz.Edge object at 0x7f7091618550>, <pydotplus.graphviz.Edge object at 0x7f7082d6a750>, <pydotplus.graphviz.Edge object at 0x7f7080f2e390>, <pydotplus.graphviz.Edge object at 0x7f708a3dd310>]
Set([('1454', '1455'), ('229', '1455'), ('230', '1455'), ('437', '1455'), ('1453', '1455')])
(X4v5 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v3 imp (X4v5 imp q)) para (X4v5 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5bd890>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090ac7450>])
set([('1455', '1456')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091a1fa10>, <pydotplus.graphviz.Edge object at 0x7f7090ac7450>, <pydotplus.graphviz.Edge object at 0x7f7083290390>, <pydotplus.graphviz.Edge object at 0x7f70885ae110>, <pydotplus.graphviz.Edge object at 0x7f708084edd0>]
Set([('1455', '1456'), ('1457', '1456'), ('233', '1456'), ('439', '1456'), ('441', '1456')])
(ORX4 imp q)
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7090ac7450>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (ORX4 imp q)
vai collapsar (ORX4 imp q) 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c5163d0>, <pydotplus.graphviz.Node object at 0x7f708c4194d0>, <pydotplus.graphviz.Node object at 0x7f708c47e950>]
labels = (ORX4 imp q)
labels = (ORX4 imp q)
labels = (ORX4 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (ORX4 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c4194d0>, <pydotplus.graphviz.Node object at 0x7f708c47e950>]
n = (ORX4 imp q) name= 944
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1212 e v=944
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70844bb490>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708000ac50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709210fc10>])
set([('945', '944')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>]
Set([('1211', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708000ac50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709210fc10>])
set([('945', '944')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>]
Set([('1211', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70838e5710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70921140d0>])
set([('943', '944')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>, <pydotplus.graphviz.Edge object at 0x7f7083d7e550>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70838e5710>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70921140d0>])
set([('943', '944')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>, <pydotplus.graphviz.Edge object at 0x7f7083d7e550>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5163d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091331f90>])
set([('1212', '1219')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>, <pydotplus.graphviz.Edge object at 0x7f707f83bc50>, <pydotplus.graphviz.Edge object at 0x7f70844aca10>, <pydotplus.graphviz.Edge object at 0x7f7086169450>, <pydotplus.graphviz.Edge object at 0x7f707fef92d0>, <pydotplus.graphviz.Edge object at 0x7f7089de1e50>, <pydotplus.graphviz.Edge object at 0x7f7088630190>]
Set([('944', '1219'), ('886', '1219'), ('880', '1219'), ('554', '1219'), ('1212', '1219'), ('950', '1219'), ('548', '1219'), ('1218', '1219')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7091331f90>])
delete in_edge_Ancestor
n = (ORX4 imp q) name= 880
vai identificar n=(ORX4 imp q) e v=(ORX4 imp q)
vai identificar n=1212 e v=880
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (ORX4 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70838cd1d0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) imp ((ORX4 imp q)) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7088c0aad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091d3b510>])
set([('881', '880')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>, <pydotplus.graphviz.Edge object at 0x7f7083d7e550>, <pydotplus.graphviz.Edge object at 0x7f708364a650>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7088c0aad0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091d3b510>])
set([('881', '880')])
(X4v5 imp q) imp ((ORX4 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>, <pydotplus.graphviz.Edge object at 0x7f7083d7e550>, <pydotplus.graphviz.Edge object at 0x7f708364a650>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) imp ((ORX4 imp q)) para (ORX4 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X4v5 imp q) e v = (ORX4 imp q) n=(ORX4 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70800030d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091d18510>])
set([('879', '880')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>, <pydotplus.graphviz.Edge object at 0x7f7083d7e550>, <pydotplus.graphviz.Edge object at 0x7f708364a650>, <pydotplus.graphviz.Edge object at 0x7f70868194d0>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212'), ('881', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70800030d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091d18510>])
set([('879', '880')])
(X4v5 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f70910cb0d0>, <pydotplus.graphviz.Edge object at 0x7f70910d1550>, <pydotplus.graphviz.Edge object at 0x7f7083d7e550>, <pydotplus.graphviz.Edge object at 0x7f708364a650>, <pydotplus.graphviz.Edge object at 0x7f70868194d0>]
Set([('1211', '1212'), ('945', '1212'), ('1213', '1212'), ('943', '1212'), ('881', '1212')])
(ORX4 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X4v5 imp q) para (ORX4 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5163d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7091331f90>])
set([('1212', '1219')])
(ORX4 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7091222650>, <pydotplus.graphviz.Edge object at 0x7f7091331f90>, <pydotplus.graphviz.Edge object at 0x7f707f83bc50>, <pydotplus.graphviz.Edge object at 0x7f7086169450>, <pydotplus.graphviz.Edge object at 0x7f707fef92d0>, <pydotplus.graphviz.Edge object at 0x7f7089de1e50>, <pydotplus.graphviz.Edge object at 0x7f7088630190>]
Set([('1218', '1219'), ('886', '1219'), ('880', '1219'), ('1212', '1219'), ('554', '1219'), ('548', '1219'), ('950', '1219')])
q
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f7091331f90>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X3v2 imp (X4v5 imp q))
vai collapsar (X3v2 imp (X4v5 imp q)) 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c631bd0>, <pydotplus.graphviz.Node object at 0x7f708c4f6790>, <pydotplus.graphviz.Node object at 0x7f708c41f390>]
labels = (X3v2 imp (X4v5 imp q))
labels = (X3v2 imp (X4v5 imp q))
labels = (X3v2 imp (X4v5 imp q))
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X3v2 imp (X4v5 imp q)) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c4f6790>, <pydotplus.graphviz.Node object at 0x7f708c41f390>]
n = (X3v2 imp (X4v5 imp q)) name= 298
vai identificar n=(X3v2 imp (X4v5 imp q)) e v=(X3v2 imp (X4v5 imp q))
vai identificar n=1506 e v=298
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp (X4v5 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7087e16bd0>]
n = (X3v2 imp (X4v5 imp q)) name= 822
vai identificar n=(X3v2 imp (X4v5 imp q)) e v=(X3v2 imp (X4v5 imp q))
vai identificar n=1506 e v=822
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X3v2 imp (X4v5 imp q)) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f707fda8f50>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= ORX4
vai collapsar ORX4 3 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c4d48d0>, <pydotplus.graphviz.Node object at 0x7f708c40bb10>, <pydotplus.graphviz.Node object at 0x7f708c410950>]
labels = ORX4
labels = ORX4
labels = ORX4
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= ORX4 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c40bb10>, <pydotplus.graphviz.Node object at 0x7f708c410950>]
n = ORX4 name= 950
vai identificar n=ORX4 e v=ORX4
vai identificar n=1218 e v=950
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70849afc50>]
n = ORX4 name= 886
vai identificar n=ORX4 e v=ORX4
vai identificar n=1218 e v=886
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= ORX4 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708c80ac90>]
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= (X4v2 imp q)
vai collapsar (X4v2 imp q) 5 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c5d4b10>, <pydotplus.graphviz.Node object at 0x7f708c491fd0>, <pydotplus.graphviz.Node object at 0x7f708c474b10>, <pydotplus.graphviz.Node object at 0x7f708c403250>, <pydotplus.graphviz.Node object at 0x7f708c3ed450>]
labels = (X4v2 imp q)
labels = (X4v2 imp q)
labels = (X4v2 imp q)
labels = (X4v2 imp q)
labels = (X4v2 imp q)
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= (X4v2 imp q) tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c491fd0>, <pydotplus.graphviz.Node object at 0x7f708c474b10>, <pydotplus.graphviz.Node object at 0x7f708c403250>, <pydotplus.graphviz.Node object at 0x7f708c3ed450>]
n = (X4v2 imp q) name= 263
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=263
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7087391a50>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]13 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7089e5f990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70934cafd0>])
set([('261', '263')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>]
Set([('1494', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7089e5f990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70934cafd0>])
set([('261', '263')])
[X3v2]13
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>]
Set([('1494', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]13 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7086244ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093347190>])
set([('262', '263')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>]
Set([('1494', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7086244ed0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7093347190>])
set([('262', '263')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>]
Set([('1494', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5d4b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f70833c6910>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1060', '1509'), ('1495', '1509'), ('455', '1509'), ('263', '1509'), ('727', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
delete in_edge_Ancestor
n = (X4v2 imp q) name= 787
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=787
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f707fb9e290>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X3v2]37 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f70811c44d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70920e8a10>])
set([('785', '787')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f70811c44d0>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70920e8a10>])
set([('785', '787')])
[X3v2]37
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X3v2]37 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X3v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080e2fa50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70928dda90>])
set([('786', '787')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495'), ('785', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080e2fa50>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70928dda90>])
set([('786', '787')])
(X3v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>]
Set([('1494', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495'), ('785', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X3v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5d4b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f708411ff10>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1060', '1509'), ('1495', '1509'), ('455', '1509'), ('727', '1509'), ('787', '1509'), ('1510', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
delete in_edge_Ancestor
n = (X4v2 imp q) name= 455
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=455
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f7080be1dd0>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v2]18 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708c9a9310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c2efd0>])
set([('453', '455')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708c9a9310>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c2efd0>])
set([('453', '455')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v2]18 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f7080226210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c42f50>])
set([('454', '455')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>, <pydotplus.graphviz.Edge object at 0x7f70851860d0>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f7080226210>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092c42f50>])
set([('454', '455')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>, <pydotplus.graphviz.Edge object at 0x7f70851860d0>]
Set([('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5d4b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f707fd87990>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1510', '1509'), ('1060', '1509'), ('455', '1509'), ('727', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
delete in_edge_Ancestor
n = (X4v2 imp q) name= 727
vai identificar n=(X4v2 imp q) e v=(X4v2 imp q)
vai identificar n=1495 e v=727
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= (X4v2 imp q) com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f708a878d90>]
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =[X1v2]18 e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f707f7a1c90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70924798d0>])
set([('725', '727')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>, <pydotplus.graphviz.Edge object at 0x7f70851860d0>, <pydotplus.graphviz.Edge object at 0x7f7080dad3d0>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f707f7a1c90>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f70924798d0>])
set([('725', '727')])
[X1v2]18
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>, <pydotplus.graphviz.Edge object at 0x7f70851860d0>, <pydotplus.graphviz.Edge object at 0x7f7080dad3d0>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE [X1v2]18 para (X4v2 imp q)
IDENTIFY: e_in.has_key(v.get_name()) name e1 p =(X1v2 imp (X4v2 imp q)) e v = (X4v2 imp q) n=(X4v2 imp q) Double_Deduction_Edge= 
<pydotplus.graphviz.Node object at 0x7f708a86f990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092380750>])
set([('726', '727')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>, <pydotplus.graphviz.Edge object at 0x7f70851860d0>, <pydotplus.graphviz.Edge object at 0x7f7080dad3d0>, <pydotplus.graphviz.Edge object at 0x7f7085c1d750>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495'), ('725', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
Set([])
<pydotplus.graphviz.Node object at 0x7f708a86f990>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7092380750>])
set([('726', '727')])
(X1v2 imp (X4v2 imp q))
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090f33850>, <pydotplus.graphviz.Edge object at 0x7f7090884950>, <pydotplus.graphviz.Edge object at 0x7f7080fd34d0>, <pydotplus.graphviz.Edge object at 0x7f7080ffe110>, <pydotplus.graphviz.Edge object at 0x7f70894733d0>, <pydotplus.graphviz.Edge object at 0x7f70873b8a90>, <pydotplus.graphviz.Edge object at 0x7f70851860d0>, <pydotplus.graphviz.Edge object at 0x7f7080dad3d0>, <pydotplus.graphviz.Edge object at 0x7f7085c1d750>]
Set([('454', '1495'), ('785', '1495'), ('1494', '1495'), ('786', '1495'), ('262', '1495'), ('453', '1495'), ('261', '1495'), ('1493', '1495'), ('725', '1495')])
(X4v2 imp q)
INtersecao ====================
Set([])
VAI ADICIONAR ARESTA DE (X1v2 imp (X4v2 imp q)) para (X4v2 imp q)
<pydotplus.graphviz.Node object at 0x7f708c5d4b10>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
set([('1495', '1509')])
(X4v2 imp q)
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7090805c50>, <pydotplus.graphviz.Edge object at 0x7f709080e110>, <pydotplus.graphviz.Edge object at 0x7f708abc6f90>, <pydotplus.graphviz.Edge object at 0x7f7083cadf10>]
Set([('1510', '1509'), ('1060', '1509'), ('727', '1509'), ('1495', '1509')])
(X4v5 imp q) imp ((ORX4 imp q))
INtersecao ====================
Set([<pydotplus.graphviz.Edge object at 0x7f709080e110>])
delete in_edge_Ancestor
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
nivel da formula que repete= 17
formula que repete= X3v2
vai collapsar X3v2 5 vezes, no nivel 17
Collapsing Equally Labeled Nodes in the list =>
[<pydotplus.graphviz.Node object at 0x7f708c87a910>, <pydotplus.graphviz.Node object at 0x7f708c489c10>, <pydotplus.graphviz.Node object at 0x7f708c4c1610>, <pydotplus.graphviz.Node object at 0x7f708c475490>, <pydotplus.graphviz.Node object at 0x7f708c38c6d0>]
labels = [X3v2]66
labels = [X3v2]13
labels = [X3v2]8
labels = [X3v2]37
labels = [X3v2]49
gravando dot file em collapsing_nodes ANTES da compressao horizontal, nos a serem colapsados em estao em azul
PREPARE-TO-IDENTIFY: Caso que no= [X3v2]66 tem e_out_A vazio, mas e_in_A diferente de vazio
nos node_repeated = 
[<pydotplus.graphviz.Node object at 0x7f708c489c10>, <pydotplus.graphviz.Node object at 0x7f708c4c1610>, <pydotplus.graphviz.Node object at 0x7f708c475490>, <pydotplus.graphviz.Node object at 0x7f708c38c6d0>]
n = [X3v2]13 name= 297
vai identificar n=[X3v2]66 e v=[X3v2]13
vai identificar n=1505 e v=297
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X3v2]13 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70848f78d0>]
v ====> [X3v2]13 =13
n ======> [X3v2]66 =66
APAGANDO ARESTA [X3v2]13==> (X3v2 imp q) 66 13 37
n = [X3v2]8 name= 137
vai identificar n=[X3v2]6613 e v=[X3v2]8
vai identificar n=1505 e v=137
e_in_A.has_key(v.get_name())
True
e_out_A.has_key(v.get_name())= False
IDENTIFY: elif not e_out_A.has_key(v.get_name()) Caso com no= [X3v2]8 com lista de ancestor-saindo vazia, mas ancestor-chegando (e_in_A) nao vazia
IDENTIFY: e_in_A= 
[<pydotplus.graphviz.Edge object at 0x7f70880abf50>]
<pydotplus.graphviz.Node object at 0x7f708c87a910>
conjunto v1
Set([<pydotplus.graphviz.Edge object at 0x7f7090930a50>])
set([('1505', '1507')])
[X3v2]6613
conjunto v2
[<pydotplus.graphviz.Edge object at 0x7f7093a12750>, <pydotplus.graphviz.Edge object at 0x7f709395b950>, <pydotplus.graphviz.Edge object at 0x7f708a463950>, <pydotplus.graphviz.Edge object at 0x7f70827b8510>]
Set([('1110', '139'), ('137', '139'), ('138', '139'), ('1109', '139')])
(X4v2 imp q)
INtersecao ====================
Set([])
v ====> [X3v2]8 =8
n ======> [X3v2]6613 =6613
